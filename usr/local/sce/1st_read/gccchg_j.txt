[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                   All Rights Reserved
                                                             Aug. 2000

						 ee-gcc の変更，バグ情報
========================================================================

Tool Chain EE 2.9-ee-991111-01 リリース後に新たに判明したバグ情報
------------------------------------------------------------------------
今回リリースする GNU ツールには、以下の不具合が判明しています。

- C++ プログラムでヘッダファイル bitset をインクルードするとエラーが発
  生する。

  回避策： bitset を使わないようにしてください。使う必要がある場合は、
	   /usr/local/sce/ee/gcc/include/g++-2/bitset を以下のように暫定的
	   に修正してください。

*** bitset.orig Mon Jul 31 18:47:53 2000
--- bitset      Mon Jul 31 18:46:43 2000
*************** public:
*** 626,632 ****
    template<class _CharT, class _Traits, class _Alloc>
    explicit bitset(const basic_string<_CharT,_Traits,_Alloc>& __s,
                    size_t __pos = 0,
!                   size_t __n = basic_string<_CharT,_Traits,_Alloc>::npos)
      : _Base()
    {
      if (__pos > __s.size())
--- 626,632 ----
    template<class _CharT, class _Traits, class _Alloc>
    explicit bitset(const basic_string<_CharT,_Traits,_Alloc>& __s,
                    size_t __pos = 0,
!                 size_t __n = -1)
      : _Base()
    {
      if (__pos > __s.size())


- 構造体にアトリビュート packed が指定された場合、初期値が正しく設定され
  ない。

  回避策： パックされた構造体の初期設定を初期設定子ではなく代入で行なっ
           てください。あるいは、C ソースファイルではパックされた構造
           体の宣言だけを行ない、実体の定義はアセンブリ言語のソースファ
           イルで行なうという方法もあります。後者の場合、.word や
           .half などのデータ定義命令の自動アラインメントの機能を無効
           にするため、(構造体のラベルの定義の直後辺りに) 疑似命令
           '.align 0' が必要になります。

- #include 前処理指令の直前の行が C++ 形式のコメントで、かつそのコメン
  トの改行文字の直前の文字が第二バイトが '\'である２バイト文字であると、
  -MM などの依存関係出力オプションが正常に動作しない。

  回避策： 上記の条件にあてはまるコメントの最後に空白文字を挿入してく
           ださい。

- #if 前処理指令の定数式に誤りがあっても、あるいは定数式そのものがなく
  てもエラーにならない。

  回避策： 定数式を正しく記述すれば問題ありません。

- asm 文のオペランド制約文字 '+' を使用するとエラーが発生する。

  回避策： 入出力オペランドの別の記述方法を使ってください。詳しくは
           GCC の info ファイルを参照してください。

------------------------------------------------------------------------
Tool Chain EE 2.9-ee-991111-01 リリース時のバグ情報
------------------------------------------------------------------------
- asm 文のオペランドの式と制約に不整合があると、インターナルエラーが発
  生する。

  回避策： 該当する asm 文を正しく書き直してください。

- オプション -fshort-double を指定すると、可変個数引数の関数に double
  型の引数が正しく渡らない。

  回避策： double の場合、値ではなくアドレスを渡すなどして、関数を書き
           換えてください。

- ループの最適化に失敗して不正なオブジェクトコードが生成される場合があ
  る。

  回避策： オプション -fno-strength-reduce を指定することで回避できま
           す。また、この不具合は、ループの条件式が E1 || E2 || ... ||
           En という式(E1 .. En は式)であることが発生条件の一つなので、
           該当するループがあるならば、それを書き換えることで回避でき
           ます。この不具合は、EE 用以外の gcc でも発生することが確認
           されており、世間一般での gcc の使用実績から判断すると、発生
           頻度はそれほど高くないと思われます。

- #if, #ifdef 等の条件が真のときに、それらに対応する #endif がなくても
  エラーにならない。

  回避策： 有効な回避策はありません。

- 'typedef int new_int __attribute__ ((algined(16)))' などとすると、指
  定のアトリビュートが new_int だけでなく、int にも効いてしまう。

  補足： この不具合はTool Chain Release 1.6で修正されたことになっていまし
	 たが、実は不完全であり様々な問題(必要なコードが削除される等)を発
         生させることが判明したため、元に戻しました。

------------------------------------------------------------------------
ee-gcc の前バージョン（version 2.9-ee-991111）からの主な変更点
------------------------------------------------------------------------
- オプション -Wall を指定しても、最適化オプションを -O1 以上でコンパイ
  ルすると、void ではない関数が値を返さないことを警告しない不具合を修
  正しました。

- ee-dvp-as の -no-dma-vif オプションが使用できるようになりました。

- C++ 形式のコメントや文字列リテラルの最後の文字が２バイト文字で、かつ
  その第２バイトの値が '\' と同じ場合に、行の継続と誤認する不具合を修
  正しました。

- C++ のプログラムで、テンプレートに volatile な asm 文があると、その
  テンプレートを具体化するときにエラーが発生する不具合を修正しました。

- "Could not find a spill register" というエラーが発生し、さらに

  ../../src/gcc/toplev.c:1516: Internal compiler error in function fatal_insn

  というインターナルエラーが発生する不具合を修正しました。

- 最適化の誤りで、必要なコードを不正に削除してしまう不具合(オプション
  -fno-edge-lcm を指定することで回避可能)を修正しました。

- 必要なコードを不正に削除してしまう不具合(上記とは別のもの)を修正しま
  した。

- C++ のプログラムで explicit constructor の暗黙の呼出しがエラーになら
  ない不具合を修正しました。

- 以下のインターナルエラーが発生する場合がある不具合を修正しました。

  ../../src/gcc/haifa-sched.c:6824: Internal compiler error in function schedule_block
  Please submit a Problem Report to Cygnus Solutions with send-pr.

- ee-gdb で1024 byte を越えるサイズのデータを表示しようとするとエラー
  になる不具合を修正しました。

- ee-gdb を -w オプションで起動したときに、ダイアログボックスでターゲット
  の選択ができない不具合を修正しました。


その他の注意
------------------------------------------------------------------------
1. リンク時のエラー
------------------------------------------------------------------------
stdin, stdout, stderr を直接使用していたり、あるいは putchar のような
マクロ展開された結果、 stdin, ... がコンパイル時のソーステキストに直接
現れるマクロを使用しているプログラムのコンパイル時に、オプション -G に
0 以外の値を指定(-G のデフォルトは 8 です)すると、リンク時に以下のエラー
が発生する場合があります。

    relocation truncated to fit: R_MIPS_GPREL16 _impure_ptr

この場合、以下のいずれかの方法で対処してください。

- すべてのソースファイルのコンパイル時に -G0 を指定する。あるいは、
  stdin, stdout, stderr が直接記述されているソースファイルにそのソース
  ファイル外からアクセスされる大域変数が無いならば、そのソースファイル
  をコンパイルするときだけ -G0 を指定する。

- /usr/local/sce/ee/gcc/sce-patch/patch を適用せずに、標準ライブラリ
 をソースから作り直す。

- stdin, stdout, stderr を直接使用せず、以下に示す my-stdio.h と
  my-stdio.c のようなものを介して間接的に使用する。

  使用例：

        #include "my-stdio.h"
        #include <stdio.h>

        int main()
        {
            fprintf(MY_STDOUT, "Hello\n");
            /* stdout ではなく MY_STDOUT を使う */
            return 0;
        }


  my-stdio.h:
        /* stdio.h よりも先にインクルードしなければならない。*/
        #define MY_STDIN my_stdin()
        #define MY_STDOUT my_stdout()
        #define MY_STDERR my_stderr()

        FILE *my_stdin();
        FILE *my_stdout();
        FILE *my_stderr();

  my-stdio.c:
        /* オプション -G0 を指定してコンパイルする。*/
        #include <stdio.h>

        FILE *my_stdin()
        {
            return stdin;
        }

        FILE *my_stdout()
        {
            return stdout;
        }

        FILE *my_stderr()
        {
            return stdout;
        }


------------------------------------------------------------------------
2. float 型の精度を越える式
------------------------------------------------------------------------
コンパイラは、コンパイル時に値を計算することが可能な式を検出し、そのよ
うな式の値を定数で置き換えます。コンパイル時に計算可能な式をどの程度ま
で検出するかは最適化のレベルによるため、最適化した場合にはコンパイル時
に計算される式が、最適化をしない場合には実行時に計算されるということが
あります。Emotion Engine の fpu の仕様とコンパイラのコンパイル時演算の
仕様の IEEE 754 への準拠度の違いから、float 型の式の値が float 型の演
算精度を越える場合や 0 による除算などの特殊な状況下では、両者の値は異
なったものになります。通常は、計算が何時行われるかが問題になることはな
いと考えられますが、これらの特殊な状況を取り扱いたい場合にはご注意くだ
さい。EE Core User's Manual の 「4.8. IEEE 754 との互換性」の節も参照
してください。


========================================================================
iop-gcc における制限事項
------------------------------------------------------------------------
- 現在の iop コンパイラは浮動小数点演算のサポートを考慮して作成されて
  おらず、浮動小数点演算ライブラリも提供されていません。よって iop の
  プログラミングでは浮動小数点は使用できません。

