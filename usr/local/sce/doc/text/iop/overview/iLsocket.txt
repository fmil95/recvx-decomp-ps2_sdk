[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

ソケットライブラリ
===================


 1 ライブラリ概要
------------------

    ソケットライブラリは、i.LINKドライバの上位階層に位置し、i.LINKでのソ
    ケット通信を実現するAPIです。これを使用することにより、アプリケーショ
    ンプログラマは、
         ・バスリセットによるノード番号の変更
         ・トランザクションに関わる処理
    等の煩雑な処理を意識することなく、パケット単位での通信を行なうことが
    できます。
    
    

  1.1 関連ファイル

    ソケットライブラリを利用するのに必要なファイルは次のとおりです。
    
    +--------------+----------------+
    |カテゴリ       ファイル        |
    +              +                +
    |ヘッダファイル ilink.h ilsock.h|
    |               ilsocksf.h      |
    |IOPモジュール  ilink.irx       |
    |               ilsock.irx      |
    +--------------+----------------+
    

  1.2 ソケット通信の手順概略

    ソケットライブラリを使用して行なう通信処理の手順はおおよそ次のように
    なります。
         (1) ライブラリの初期化
             sceILsockInit()を用いて、ソケットライブラリを初期化します。
             このとき、同時に作成するソケットの最大個数を指定します。
         (2) ソケットの作成
             sceILsockOpen()を用いて、ソケットを必要なだけ作成します。ソ
             ケットを表すディスクリプタが返されるので、以後の処理ではその
             ディスクリプタを用いてソケットを指定します。
         (3) アドレス設定
             sceILsockBind()を用いて、ソケットにアドレス情報（ノードIDと
             ポート番号の組）を設定します。この情報は送信元を表すデータと
             して、そのソケットから送信するパケットに付加されます。
         (4) 通信相手の設定
             sceILsockConnect()を用いて、通信相手のアドレス情報を設定しま
             す。この処理は省いてもかまいません。
         (5) データ送受信
             sceILsockSend() / sceILsockRecv()を用いて、あらかじめ設定し
             てある相手先とデータの送受信を行います。また、
             sceILsockSendTo() / sceILsockRecvFrom()を用いて、そのつど指
             定する相手先との送受信を行うこともできます。
         (6) 終了時の処理
             ソケットが不要になったときは、sceILsockClose()を用いて処分す
             ることができます。また、ソケット通信処理が不要になったときは、
             sceILsockReset()を用いてライブラリの動作を停止することができ
             ます。

  1.3 注意事項

         (1) このソケットライブラリはパケットの到達性を保証していません。
             パケットが到達しないことが稀にあり得るという前提でアプリケー
             ションプログラムを作成してください。
         (2) ディスクリプタに関する処理は再入可能ではありません。複数のス
             レッドが同じソケットを共有する場合は排他制御を行う必要があり
             ます。
         (3) データ受信はブロッキング処理です。関数が呼び出された時点で受
             信済みデータがなければ、データを受信するまで処理が戻りません。

 2 プロトコル
--------------

    ここではi.LINKソケットライブラリの内部プロトコルについて説明します。

  2.1 コンフィグレーションROMの構成


   (1) Root_Directory

      コンフィグレーションROMのRoot_Directoryには、以下のエントリを含んだ
      Unit_Directoryがただ一つだけ存在しなければなりません。
      
    +---------------------+----------------+
    |key(hex)              value           |
    +                     +                +
    |Unit_Spec_ID(0x12)    0x080046        |
    |Unit_Sw_Version(0x13) 0x1a0000        |
    |Unit_Location(0x95)   (offset to leaf)|
    +---------------------+----------------+
      
      Unit_Spec_IDエントリはUnit_Directoryの先頭に、Unit_Sw_Versionエント
      リはUnit_Spec_IDの直後になければなりません。
      Unit_Locationは複数存在してはなりません。
      
      これらのエントリを検索するときには出現位置・順序は無視しなければな
      りません。また、複数のUnit_Locationエントリを検出した場合には、2番
      目以降は無視しなければなりません。

   (2) Unit_Location leaf

      Unit_Location leafはそのノードの受信用FIFO領域を指定します。データ
      構造は次のとおりです。
      
      base addressは受信用FIFO領域の先頭アドレスで、4 byte alignでなけれ
      ばなりません。
      bound addressは、受信用FIFO領域に含まれる最大アドレスに +1 した値と
      なります。
      受信用FIFO領域のサイズは最大パケットサイズ（512 byte）以上必要です。
      アドレスの上位16 bitは必ず0です。
      tagは必ず0x01です。読み出すときにはtagの値は無視しなければなりませ
      ん。

  2.2 トランザクション

    すべてのデータグラムは、受信用FIFO領域に対する"async write request 
    for data block"トランザクションによって転送されます。
    ブロードキャストは対応するすべてのノードへのユニキャストによって実現
    されます。
    パケットのdestination offsetが受信用FIFO領域の先頭アドレスと一致しな
    いリクエストを受信したときは、無視するかアドレスエラーを返さなければ
    なりません。
    パケットのdestination EUI-64が自ノードのBus_Info_BlockのEUI-64と一致
    せず、かつブロードキャストアドレス（0xffffffff:ffffffff）とも一致しな
    いリクエストを受信したときは、無視しなければなりません。
    transaction_timeout, ack_missingを検出しても、これに対してリトライを
    行なってはなりません。その場合でもパケットが到達している可能性を完全
    には否定できず、安易にリトライするとパケットが重複する可能性があるた
    めです。この制約のため、ソケットライブラリは到達性を保証できません。
    ack_busy, ack_data_errに対するリトライは行なってかまいません。

   (1) destination ID

      データグラムの送信先となる1394 destination IDは、ソケットドライバが
      自動的にコンフィグレーションROMをスキャンした結果によって決定されま
      す。得られたマッピング情報はキャッシュしてかまいません。
      Bus_Info_BlockのEUI-64とdestination EUI-64が一致していても規定され
      たUnit_Directoryを持たないノードは、存在しないものとして扱わなけれ
      ばなりません。

   (2) packet format

      実際にデータグラムを転送するasync write request for data blockパケ
      ットの形式は次のとおりです。
      
