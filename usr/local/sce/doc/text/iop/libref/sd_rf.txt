[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                       低レベルサウンドライブラリ
                      ===========================


 1 構造体
==========

=========================================================================
sceSdBatch                                                       [構造体]
=========================================================================
                                                           バッチコマンド
[構造]
        typedef struct {
        	u_short func;
        	u_short entry;
        	u_int value;
        } sceSdBatch;
        
[メンバ]
        
        func	以下の機能のいずれかひとつを設定する。
        	SD_BSET_PARAM	0x01	sceSdSetParamを実行
        	SD_BGET_PARAM	0x10	sceSdGetParamを実行
        	SD_BSET_SWITCH	0x02	sceSdSetSwitchを実行
        	SD_BGET_SWITCH	0x12	sceSdGetSwitchを実行
        	SD_BSET_ADDR	0x03	sceSdSetAddrを実行
        	SD_BGET_ADDR	0x13	sceSdGetAddrを実行
        	SD_BSET_CORE	0x04	sceSdSetCoreAttrを実行
        	SD_BGET_CORE	0x14	sceSdGetCoreAttrを実行
        	SD_WRITE_IOP	0x05	IOPメモリに書きこみ
        	SD_WRITE_EE	0x06	EEメモリに書きこみ
        	SD_RETURN_EE	0x07	EEメモリにreturnsを転送
        entry	funcに渡すエントリ。ラッパAPIの場合は第１引数に相当。
        value	funcに渡す設定値。ラッパAPIの場合は第２引数に相当。
        
[解説]
        バッチコマンドを表す構造体で、この構造体の配列をバッチコマンド列
        としてバッチ処理APIに渡します。
        funcにSD_WRITE_IOPを指定した場合は、valueで指定したIOPメモリのア
        ドレスにentryの値を書きこみます。
        funcにSD_WRITE_EEを指定した場合は、valueで指定したEEメモリのアド
        レスにentryの値を書きこみます。内部でSIF DMAを使用します。
        funcにSD_RETURN_EEを指定した場合は、valueで指定したEEメモリのアド
        レスに、returns（返値の配列：sceSdProcBatch()を参照のこと）を、en
        tryに示すバイト数だけ転送します。内部でSIF DMAを使用します。
        funcにSD_BSET_*を指定した場合は、最終的に処理対象となるレジスタが
        複数回指定されないようにしてください。SD_BSET_COREについては一回
        の呼び出しに対して一つのみ含まれるようにしてください。
        
[関連項目]
        sceSdProcBatch(), sceSdProcBatchEx()
        

=========================================================================
sceSdEffectAttr                                                  [構造体]
=========================================================================
                                                           エフェクト属性
[構造]
        typedef struct {
        	int core;
        	int mode;
        	short depth_L;
        	short depth_R;
        	int delay;
        	int feedback;
        } sceSdEffectAttr;
        
[メンバ]
        core		コア指定 (現在未使用)
        mode		エフェクトモード
        depth_L		エフェクトのリターンボリューム（深さ/左）
        depth_R		エフェクトのリターンボリューム（深さ/右）
        delay		Delay Time (ECHO, DELAY のみ)
        feedback	Feedback (ECHO のみ)
        
[解説]
        エフェクト属性を設定するための構造体です。
        
        ＜mode＞
        エフェクトのモードを指定する。指定できるモードとサウンドメモリで
        占有される容量は以下の通り。
        
        +---------------------+--------------+----------+
        |マクロ                種類           size(byte)|
        +                     +              +          +
        |SD_REV_MODE_OFF       off            0x 0080   |
        |SD_REV_MODE_ROOM      ルーム         0x 26c0   |
        |SD_REV_MODE_STUDIO_A  スタジオ(小)   0x 1f40   |
        |SD_REV_MODE_STUDIO_B  スタジオ(中)   0x 4840   |
        |SD_REV_MODE_STUDIO_C  スタジオ(大)   0x 6fe0   |
        |SD_REV_MODE_HALL      ホール         0x ade0   |
        |SD_REV_MODE_SPACE     スペースエコー 0x f6c0   |
        |SD_REV_MODE_ECHO      エコー         0x18040   |
        |SD_REV_MODE_DELAY     ディレイ       0x18040   |
        |SD_REV_MODE_PIPE      パイプエコー   0x 3c00   |
        +---------------------+--------------+----------+
        
        SD_REV_MODE_CLEAR_WA を mode に OR で指定すると、モード設定と同時
        にエフェクト領域をクリアします。クリアには DMA の0チャンネルを使
        用します。クリア時のDMAチャンネルを指定したい場合は、sceSdClearEf
        fectWorkArea() を使用して下さい．
        
        ＜depth＞
        エフェクトのリターンボリューム（深さ）を -0x8000 〜 0x7fff の範囲
        で左右独立に設定する。設定された値が負の場合エフェクト成分 (wet)
        の位相が反転する。
        
        ＜delay＞
        ECHO, DELAYのみ有効。ディレイタイムを 0 〜 127 の範囲で設定する。
        
        ＜feedback＞
        ECHO, DELAYのみ有効。フィードバック値を 0 〜 127 の範囲で設定する。
        
[関連項目]
        sceSdSetEffectAttr(), sceSdGetEffectAttr()
        

 2 関数
========


=========================================================================
sceSdBlockTrans                                                    [関数]
=========================================================================
                                           入出力ブロックへの転送を行なう
[形式]
        int sceSdBlockTrans(
        	short channel,
        	u_short mode,
        	u_char *m_addr,
        	u_int size[,
        	u_char *start_addr]
        )
        
[引数]
        channel		転送チャンネル。0または1を指定できる。
        mode		転送モード
        m_addr		IOPメモリ側のアドレス
        size		転送サイズ
        start_addr	IOP メモリ側の転送開始絶対アドレス
        		(mode にSD_TRANS_MODE_WRITE_FROM 指定時のみ。
        		指定しない場合、形式欄の[]内は省略可。)
[返り値]
        転送したバイト数。エラーならば負の値。
        mode に SD_TRANS_MODE_STOP を指定した場合は、その時アクセスしてい
        た位置+バッファ情報
        
[解説]
        SPU2の入出力ブロックに関わる転送を行います。
        
        ＜mode に設定できるビットマスク＞
         ・転送方向
           SD_TRANS_MODE_WRITE		0
           SD_TRANS_MODE_READ		1
           SD_TRANS_MODE_STOP		2
           SD_TRANS_MODE_WRITE_FROM	3
         ・転送設定（WRITE/READのみ）
           SD_BLOCK_ONESHOT	(0<<4)
           SD_BLOCK_LOOP	(1<<4)
         ・転送開始ブロック(READのみ）
           SD_BLOCK_C0_VOICE1
           SD_BLOCK_C0_VOICE3
           SD_BLOCK_C1_SINL
           SD_BLOCK_C1_SINR
           SD_BLOCK_C1_VOICE1
           SD_BLOCK_C1_VOICE3
           SD_BLOCK_C0_MEMOUTL
           SD_BLOCK_C0_MEMOUTR
           SD_BLOCK_C0_MEMOUTEL
           SD_BLOCK_C0_MEMOUTER
           SD_BLOCK_C1_MEMOUTL
           SD_BLOCK_C1_MEMOUTR
           SD_BLOCK_C1_MEMOUTEL
           SD_BLOCK_C1_MEMOUTER
         ・転送ブロック数(READのみ）
           SD_BLOCK_COUNT(x) ( (x)<<12 )
        
        IOP 側に置かれるデータ形式は、16bit, Little Endian, Signed の	ス
        トレート PCM です。さらに現在の仕様では、左チャンネルと右チャンネ
        ルが 512 バイト毎にインターリーブされている必要があります。
        
        mode に SD_TRANS_MODE_WRITE を指定した場合は、IOP メモリから入力
        ブロックへデータを転送します。
        mode に SD_TRANS_MODE_READ を指定した場合は、mode で指定した出力
        ブロックから、IOP メモリへ転送が行われます。
        
        mode に SD_TRANS_MODE_WRITE_FROM を指定した場合、start_addr で指
        定した IOP メモリ内の位置から転送を開始します。start_addr で指定
        する位置はIOP メモリ内において (m_addr + size) の領域内である必要
        があります。他は SD_TRANS_MODE_WRITE と同様です。
        start_addr は mode に SD_TRANS_MODE_WRITE_FROM が指定された時のみ
        参照され、他の転送方向を指定した場合は start_addr を指定する必要
        はありません (すなわち引数は 4 つのみ)。
        mode に SD_TRANS_MODE_STOP を指定した場合、転送を中断します。その
        際、sceSdBlockTransStatus() と同等の値を返り値にとります。この返
        り値の仕様は sceSdBlockTransStatus() を参照してください。
        mode に SD_BLOCK_ONESHOT を指定した場合、設定した範囲の波形データ
        の演奏を 1 回だけ行います。終了後はSPU2内のバッファに残った波形デ
        ータがループ再生されるので、これを止めるには、再生の終了を割り込
        みかポーリングで検出して、SD_TRANS_MODE_STOP を実行します。
        SD_BLOCK_LOOPを指定した場合、設定した範囲の波形データを繰り返し演
        奏します。この場合、size は1024の倍数である必要があります。
        
        また、mode に SD_BLOCK_ONESHOT が指定された場合、IOP側のバッファ
        の終端がアクセスされたときに割り込みが入ります。modeにSD_BLOCK_LO
        OPが指定された場合は、IOP側のバッファの中間地点と終端がアクセスさ
        れたときに割り込みが入ります。
        
        転送ブロック数は、数値を 12 bit 左シフトしたものを指定します。
        転送ブロックは"転送開始ブロック"にある順番で並んでいるので、SD_BL
        OCK_C0_MEMOUTL と SD_BLOCK_C0_MEMOUTR を転送したい時は、転送開始
        ブロックに SD_BLOCK_C0_MEMOUTL を指定し、転送ブロック数に (2<<12)
         を指定します。一つのブロックのサイズは 1 kbyte です。
        これらの設定は SD_TRANS_WRITE(_FROM) 時は必要ありません。
        
        各ブロックは 512 byte のダブルバッファになっているのですが、READ
        時には、ダブルバッファの両方が IOP メモリに転送されます。
        したがって、どちらか一方のバッファは無効であり、どちらが有効かはS
        PU2割り込み等を用いて調べる必要があります。
        

=========================================================================
sceSdBlockTransStatus                                              [関数]
=========================================================================
                                       入出力ブロック転送の状態を取得する
[形式]
        u_int sceSdBlockTransStatus(
        	short channel,
        	short flag
        )
        
[引数]
        channel		転送チャンネル。0または1を指定できる。
        flag		ステータスのフラグ（未実装）
        
[返り値]
        転送状態
        
[解説]
        入出力ブロック転送の状態を取得します。bit0〜23がアクセス中のアド
        レス（IOPメモリ）を表します。SPU_AUTODMA_ONESHOTモードの場合、転
        送が終了するとゼロになります。
        bit24は転送中のバッファ番号で、SPU_AUTODMA_LOOP の場合のみ意味を
        持ちます。バッファの前半を転送中なら0、後半を転送中なら1を返しま
        す。
        bit25〜31はリザーブ領域で、将来使用する可能性があります。
        

=========================================================================
sceSdClearEffectWorkArea                                           [関数]
=========================================================================
                                         エフェクトのワークエリアをクリア
[形式(IOP)]
        int sceSdClearEffectWorkArea (
        	int core,
        	int channel,
        	int effect_mode
        );
        
[引数]
        core		コア指定（ 0 or 1 ）
        channel		クリアに使用するDMAチャンネルの指定（ 0 or 1 ）
        effect_mode	エフェクトモードを指定
        
[返り値]
        なし
        
[解説]
        クリア処理にはDMAを使用するので、チャンネルを指定してください。
        コア指定では、どちらのコアが使っているエフェクトエリアをクリアす
        るかを指定します。
        

=========================================================================
sceSdGetAddr                                                       [関数]
=========================================================================
                                         レジスタラッパ - アドレス値Get用
[形式]
        u_int sceSdGetAddr(
        	u_short register,
        )
        
[引数]
        register	読み出すレジスタ番号
        
[返り値]
        レジスタから読み出した値（バイト）
        
[解説]
        指定したレジスタが保持しているアドレス情報を読み出します。
        SD_A_* および SD_VA_* シリーズのレジスタにはこのAPIを使用します。
        
        SPU2ハードウエアの内部アドレス表現はShort Word ですが、このAPIで
        はバイトで表現されます。
        
        ＜レジスタ番号指定の形式＞
        SD_A_* の場合 ： SD_CORE_? | SD_A_*
        SD_VA_* の場合： SD_CORE_? | SD_VOICE_?? | SD_VA_*
        

=========================================================================
sceSdGetCoreAttr                                                   [関数]
=========================================================================
                                       擬似レジスタラッパ - コア設定Get用
[形式]
        u_short sceSdGetCoreAttr(
        	u_short entry,
        )
        
[引数]
        entry		パラメータを読み出すエントリ
        
[返り値]
        エントリから読み出した値
        
[解説]
        指定エントリの保持しているコア設定パラメータを読み出します。
        エントリはレジスタではありませんが、擬似的にラッパAPIと同じインタ
        フェイスにしています。Batchコマンドとしても使用できます。
        SD_C_*シリーズのエントリにはこのAPIを使用します。
        
        +------------------+---------------------------------------+
        |エントリ           内容                                   |
        +                  +                                       +
        |SD_C_EFFECT_ENABLE エフェクト領域への書きこみ許可 (0 or 1)|
        |SD_C_IRQ_ENABLE    SPU2割り込み許可 (0 or 1)              |
        |SD_C_MUTE_ENABLE   ミュート (0 or 1)                      |
        |SD_C_NOISE_CLK     ノイズ発生器のM系列シフト周波数（6bit) |
        |SD_C_SPDIF_MODE    SPDIFの設定（マスク）                  |
        +------------------+---------------------------------------+
        
        SD_C_*_ENABLEシリーズのエントリでは、enableのときは1、disableのと
        きは0が返ります。
        SD_C_NOISE_CLKは、0〜63の値が返ります。
        SD_C_SPDIF_MODEは、以下のフラグの論理和が返ります。SD_C_SPDIF_MOD
        Eはコア指定できず、どちらかを読み出すとSPU2全体の設定が返ります。
        +----------------------+-----------------------------------------+
        |フラグ                 意味                                     |
        +                      +                                         +
        |SD_SPDIF_OUT_OFF       SPDIFに何も出力しない                    |
        |SD_SPDIF_OUT_PCM       アナログと同じ音をPCMで出力（デフォルト）|
        |SD_SPDIF_OUT_BITSTREAM Core0の入力ブロックに入力されたデータを、|
        |                       ビットストリームとして出力する           |
        |SD_SPDIF_COPY_NORMAL   通常モード（１世代録音可・デフォルト）   |
        |SD_SPDIF_COPY_PROHIBIT デジタル録音禁止                         |
        +----------------------+-----------------------------------------+
        
        ＜エントリ指定の形式＞
        SD_C_* の場合 ： SD_CORE_? | SD_C_*
        

=========================================================================
sceSdGetEffectAttr                                                 [関数]
=========================================================================
                                                     エフェクト属性を取得
[形式(IOP)]
        void sceSdGetEffectAttr (
        	int core,
        	sceSdEffectAttr *attr
        );
        
[引数]
        core		コア指定（ 0 or 1 ）
        attr		エフェクト属性構造体へのポインタ
        
[返り値]
        なし
        
[解説]
        エフェクトの属性を読み出します。
        sceSdEffectAttrの解説を参照してください。
        

=========================================================================
sceSdGetParam                                                      [関数]
=========================================================================
                                     レジスタラッパ - 基本パラメータGet用
[形式]
        u_short sceSdGetParam(
        	u_short register
        )
        
[引数]
        register		パラメータを読み出すレジスタ番号
        
[返り値]
        レジスタから読み出した値
        
[解説]
        基本パラメータレジスタおよびボリュームレジスタから、16ビットのパ
        ラメータを読み出します。
        SD_P_* および SD_VP_* シリーズのレジスタにはこのAPIを使用してくだ
        さい。
        
        ＜レジスタ番号指定の形式＞
        SD_P_* の場合 ： SD_CORE_? | SD_P_*
        SD_VP_* の場合： SD_CORE_? | SD_VOICE_?? | SD_VP_*
        

=========================================================================
sceSdGetSwitch                                                     [関数]
=========================================================================
                               レジスタラッパ - ボイス制御パラメータGet用
[形式]
        u_int sceSdGetSwitch(
        	u_short register
        )
        
[引数]
        register		パラメータを読み出すレジスタ番号
        
[返り値]
        レジスタから読み出した値（ビットマスク）
        
[解説]
        ボイス制御パラメータレジスタから、ボイスごとのOn/Offフラグを読み
        出します。
        SD_S_* シリーズのレジスタにはこのAPIを使用します。
        
        ＜レジスタ番号指定の形式＞
        SD_S_* の場合 ： SD_CORE_? | SD_S_*
        

=========================================================================
sceSdInit                                                          [関数]
=========================================================================
                                                 サウンドデバイスの初期化
[形式]
        int sceSdInit( int flag )
        
[引数]
        flag	初期化フラグ
        	SD_INIT_COLD	すべて初期化する
        	SD_INIT_HOT	ボイス・ボリューム・エフェクトの設定を初期化しない
        
[返り値]
        正常終了時には 0。エラーがあった場合は ?1。
        
[解説]
        サウンドデバイスの初期化を行ないます。
        割り込みコントローラの設定は行なわないので、別途カーネルサービス
        等を使って設定してください（libsdrでは、sdrdrv.irxの中で割り込み
        初期化を行っています）。
        
        ＜割り込みコントローラ設定の例＞
        CpuEnableIntr();		// CPU全体について割り込みを許可
        EnableIntr( INUM_DMA_4 );	// SPU2のDMA（チャンネル0）の割り込みを
        許可EnableIntr( INUM_DMA_7 );	// SPU2のDMA（チャンネル1）の割り込
        みを許可EnableIntr( INUM_SPU );	// SPU2の割り込みを許可

=========================================================================
sceSdNote2Pitch                                                    [関数]
=========================================================================
                                               ノート値からピッチ値に変換
[形式]
        u_short sceSdNote2Pitch (
        	u_short center_note,
        	u_short center_fine,
        	u_short note,
        	short fine
        )
        
[引数]
        center_note	サンプリング時のベースノート
        center_fine	サンプリング時のベースノートに対するファイン
        note		ノート
        fine		ノートに対するファイン
        
[返り値]
        ピッチ
        
[解説]
        センターノートと発音ノートから、ピッチ（SPU2レジスタに設定する値）
        を計算します。
        

=========================================================================
sceSdPitch2Note                                                    [関数]
=========================================================================
                                               ピッチ値からノート値に変換
[形式]
        u_short sceSdPitch2Note (
        	u_short center_note,
        	u_short center_fine,
        	u_short pitch
        )
        
[引数]
        center_note	サンプリング時のベースノート
        center_fine	サンプリング時のベースノートに対するファイン
        pitch		ピッチ
        
[返り値]
        ノート値（上８ビットがノート、下８ビットがファイン）
        
[解説]
        センターノートと発音ピッチ（SPU2レジスタに設定する値）から、発音
        ノートを計算します。
        

=========================================================================
sceSdProcBatch                                                     [関数]
=========================================================================
                                                               バッチ処理
[形式]
        int sceSdProcBatch(
        	sceSdBatch* batch,
        	u_int returns[],
        	u_int num
        )
        
[引数]
        batch		バッチのコマンド構造体配列のポインタ
        returns[]	コマンドのリターン値が出力されるアドレス
        		NULLならば出力されない。
        num		バッチに登録されているコマンドの個数
        
[返り値]
        処理されたコマンドの個数。
        エラーが発生した場合、そのときに処理してい	たコマンドの番号（何番
        目か）を負の値にして返す。
        
[解説]
        レジスタ設定・取得等をバッチ処理します。
        バッチコマンドの種類、制限等についてはsceSdBatchの解説を参照して
        ください。
        

=========================================================================
sceSdProcBatchEx                                                   [関数]
=========================================================================
                                            バッチ処理 ボイス一括処理付き
[形式]
        int sceSdProcBatchEx(
        	sceSdBatch* batch,
        	u_int returns[],
        	u_int num
        	u_int voice
        )
        
[引数]
        batch		バッチのコマンド構造体配列のポインタ
        returns[]	コマンドのリターン値が出力されるアドレス
        		NULLならば出力されない。
        num		バッチに登録されているコマンドの個数
        voice		ボイス一括処理を行なうボイスをビットマスクで指定
        
[返り値]
        処理されたコマンドの個数。エラーが発生した場合、そのときに処理し
        ていたコマンドの番号（何番目か）を負の値にして返す。
        
[解説]
        レジスタにボイス指定のあるコマンド（SD_V*シリーズ）の場合、sceSdP
        rocBatchでは各ボイスについてコマンドを列挙する必要がありますが、s
        ceSdProcBatchExでは、引数voice（ビットマスク）で指定されたものに
        ついて、１つのコマンドで複数ボイスの処理を一括して行なうことがで
        きます。一括処理を有効にするためには、バッチコマンド構造体のentry
        にSD_VOICE_XXを論理和で指定する必要があります。
        （例：SD_CORE_0|SD_VP_ENVX|SD_VOICE_XX ）
        
        引数のnumはバッチコマンドのエントリ個数であり、ボイス一括処理を行
        なうコマンドも１つと数えます。一方、返値の個数はSPU2に対して実行
        されたコマンドの個数であり、ボイス一括処理を行なった場合は、各ボ
        イスに対するコマンドを個別にカウントします。
        
        returns[]のエリアには、コマンド実行後の返値が入るので、コマンドの
        実行数（返値numと同じ）*4バイトの領域が必要となります。
        
        バッチコマンドの種類、制限等についてはsceSdBatchの解説を参照して
        ください。
        

=========================================================================
sceSdSetAddr                                                       [関数]
=========================================================================
                                         レジスタラッパ - アドレス値Set用
[形式]
        void sceSdSetAddr(
        	u_short register,
        	u_int value,
        )
        
[引数]
        register	パラメータをセットするレジスタ番号
        value		レジスタにセットするパラメータ値（バイト）
        
[返り値]
        なし
        
[解説]
        アドレス指定レジスタにアドレスをセットします。
        SD_A_* および SD_VA_* シリーズのレジスタにはこのAPIを使用します。
        
        ハードウェア上の制限から、アドレスは16の倍数である必要があります。
        それ以外の値をセットした場合、端数は無視されます。
        
        SPU2ハードウエアの内部アドレス表現はShort Word ですが、このAPIで
        はバイトで指定します。
        
        ＜レジスタ番号指定の形式＞
        SD_A_* の場合 ： SD_CORE_? | SD_A_*
        SD_VA_* の場合： SD_CORE_? | SD_VOICE_?? | SD_VA_*
        
        SD_VA_NAX は読み出し専用なのでセットできません。

=========================================================================
sceSdSetCoreAttr                                                   [関数]
=========================================================================
                                       擬似レジスタラッパ - コア設定Set用
[形式]
        void sceSdSetCoreAttr(
        	u_short entry,
        	u_short value,
        )
        
[引数]
        entry		パラメータをセットするエントリ
        value		エントリにセットするパラメータ値
        
[返り値]
        なし
        
[解説]
        エントリに、コア設定パラメータをセットします。
        エントリはレジスタではありませんが、擬似的にラッパAPIと同じインタ
        フェイスにしています。Batchコマンドとしても使用できます。
        SD_C_* シリーズのエントリにはこのAPIを使用します。
        
        +------------------+-----------------------------------------+
        |エントリ           機能                                     |
        +                  +                                         +
        |SD_C_EFFECT_ENABLE エフェクト領域への書きこみを許可 (0 or 1)|
        |SD_C_IRQ_ENABLE    SPU2割り込みを許可 (0 or 1)              |
        |SD_C_MUTE_ENABLE   ミュート (0 or 1)                        |
        |SD_C_NOISE_CLK     ノイズ発生器のM系列シフト周波数（6bit)   |
        |SD_C_SPDIF_MODE    SPDIFの設定（マスク）                    |
        +------------------+-----------------------------------------+
        
        SD_C_*_ENABLEシリーズのエントリは、value に1（enable）か0（disabl
        e）を設定します。
        SD_C_NOISE_CLK は、value に0〜63の値を設定します。
        SD_C_SPDIF_MODEは、value に以下のフラグをビット論理和で指定します。
        SD_C_IRQ_ENABLEは、SPU2割り込みが起こった際に呼ばれる割り込みハン
        ドラ内で一旦必ず0を指定します。その後、割り込みハンドラを終了する
        際に、再度割り込みが必要な場合に1を指定します。
        
        +----------------------+-----------------------------------------+
        |フラグ                 意味                                     |
        +                      +                                         +
        |SD_SPDIF_MEDIA_DVD     メディアはDVD                            |
        |SD_SPDIF_MEDIA_CD      メディアはCD（デフォルト）               |
        |SD_SPDIF_OUT_OFF       SPDIFに何も出力しない                    |
        |SD_SPDIF_OUT_PCM       アナログ出力と同じ音をPCMで出力する      |
        |SD_SPDIF_OUT_BITSTREAM Core0の入力ブロックに入力されたデータを、|
        |                       ビットストリームとして出力する           |
        |SD_SPDIF_COPY_NORMAL   通常のコピープロテクト（１世代録音可）   |
        |SD_SPDIF_COPY_PROHIBIT デジタル録音禁止                         |
        +----------------------+-----------------------------------------+
        
        SD_C_SPDIF_MODEはコア指定できません。どちらかのコアに対して設定す
        ると、SPU2全体の設定になります。
        
        ＜エントリ指定の形式＞
        SD_C_SPDIF_MODE の場合 ： SD_C_SPDIF_MODE  （コア指定は無視される）
        SD_C_SPDIF_MODE 以外   ： SD_CORE_? | SD_C_*
        
        SPDIF設定には、設定しなくても動作に問題無いものもありますが、規格
        に準拠する必要があるので、正しく設定するようにして下さい。
        
        （例）メディアはDVD・出力はPCM・デジタル録音は禁止
        sceSdSetCoreAttr( SD_C_SPDIF_MODE,
        SPU_SPDIF_MEDIA_DVD|SD_SPDIF_OUT_PCM|SD_SPDIF_COPY_PROHIBIT );
        

=========================================================================
sceSdSetEffectAttr                                                 [関数]
=========================================================================
                                                     エフェクト属性を設定
[形式(IOP)]
        int sceSdSetEffectAttr (
        	int core,
        	sceSdEffectAttr *attr
        );
        
[引数]
        core		コア指定（ 0 or 1 ）
        attr		エフェクト属性構造体へのポインタ
        
[返り値]
        ステータス（未実装）
        
[解説]
        エフェクトの属性を設定します。
        sceSdEffectAttr の解説を参照してください。
        
        このAPIの実行よりも先に、エフェクト領域の終端アドレスを設定してお
        く必要があります（SD_A_EEAマクロで設定）。開始アドレス（ESA）は、
        エフェクトの種類によって、APIの内部で設定されます。
        

=========================================================================
sceSdSetIRQCallback                                                [関数]
=========================================================================
                                               SPU2割り込みハンドラの設定
[形式(IOP)]
        void* sceSdSetIRQCallback (
        	SD_IRQ_CBProc func
        );
        
[引数]
        func	割り込みハンドラへのポインタ
        
[返り値]
        以前設定されていた割り込みハンドラへのポインタ
        
[解説]
        SPU2 割り込みハンドラを設定します。
        
        sceSdSetSpu2IntrHandler() でも転送割り込みハンドラを設定した場合、
        sceSdSetSpu2IntrHandler() で設定されたハンドラが優先され、sceSdSe
        tIRQCallback() で設定されたハンドラは呼び出されません。
        
[備考]
        割り込みハンドラはスレッド独立部で実行されるため、プログラミング
        に際していくつか特別な注意が必要です。詳しくは\overview\iopkernl
        に注意事項が記載されていますので参照してください。

=========================================================================
sceSdSetParam                                                      [関数]
=========================================================================
                                     レジスタラッパ - 基本パラメータSet用
[形式]
        void sceSdSetParam(
        	u_short register,
        	u_short value,
        )
        
[引数]
        register	パラメータをセットするレジスタ番号
        value		レジスタにセットするパラメータ値
        
[返り値]
        なし
        
[解説]
        基本パラメータレジスタおよびボリュームレジスタに、16ビットのパラ
        メータをセットします。
        SD_P_* および SD_VP_* シリーズのレジスタにはこのAPIを使用してくだ
        さい。
        
        ＜レジスタ番号指定の形式＞
        SD_P_* の場合 ： SD_CORE_? | SD_P_*
        SD_VP_* の場合： SD_CORE_? | SD_VOICE_?? | SD_VP_*
        
        SD_VP_ENVX、SD_VP_VOLXL、SD_VP_VOLXR、SD_P_MVOLX は読み出し専用な
        のでセットできません。
        

=========================================================================
sceSdSetSpu2IntrHandler                                            [関数]
=========================================================================
                                              SPU2 割り込みハンドラの設定
[形式(IOP)]
        sceSdSpu2IntrHandler sceSdSetSpu2IntrHandler (
        	sceSdSpu2IntrHandler func,
        	void *data
        );
        
[引数]
        func	割り込みハンドラへのポインタ
        data	割り込みハンドラ func に渡されるデータのアドレス
        
[返り値]
        以前設定されていた割り込みハンドラへのポインタ
        
[解説]
        SPU2 割り込みのハンドラを設定します。
        
        sceSdSetIRQCallback() でも転送割り込みハンドラを設定した場合、sce
        SdSetSpu2IntrHandler() で設定されたハンドラが優先され、sceSdSetIR
        QCallback() で設定されたハンドラは呼び出されません。
        
[備考]
        割り込みハンドラはスレッド独立部で実行されるため、プログラミング
        に際していくつか特別な注意が必要です。詳しくは\overview\iopkernl
        に注意事項が記載されていますので参照してください。

=========================================================================
sceSdSetSwitch                                                     [関数]
=========================================================================
                               レジスタラッパ - ボイス制御パラメータSet用
[形式]
        void sceSdSetSwitch(
        	u_short register,
        	u_int value
        )
        
[引数]
        register	パラメータをセットするレジスタ番号
        value		レジスタにセットするパラメータ値（ビットマスク）
        
[返り値]
        なし
        
[解説]
        ボイス制御パラメータレジスタに、ボイスごとのOn/Offフラグをセット
        します。
        SD_S_* シリーズのレジスタにはこのAPIを使用してください。
        
        ＜レジスタ番号指定の形式＞
        SD_S_* の場合 ： SD_CORE_? | SD_S_*
        
        SD_S_ENDX は読み出し専用なのでセットできません。
        

=========================================================================
sceSdSetTransCallback                                              [関数]
=========================================================================
                                               転送割り込みハンドラの設定
[形式(IOP)]
        void* sceSdSetTransCallback (
        	u_short channel,
        	SD_TRANS_CBProc func
        );
        
[引数]
        channel		転送チャンネル。0または1を指定できる。
        func		割り込みハンドラへのポインタ
        
[返り値]
        以前設定されていた割り込みハンドラへのポインタ
        
[解説]
        転送（ボイスのI/O転送は除く）の割り込みハンドラを設定します。
        割り込みが入るタイミングは転送モードの設定によって異なります。SD_
        BLOCK_ONESHOTの場合は、設定したサイズの転送が終了したときに割り込
        みが入ります。SD_BLOCK_LOOPの場合は、転送サイズの中間点と終点で割
        り込みが入ります。
        割り込みが入るのは、設定したサイズを"演奏したとき"ではありません。
        SPU2内の入出力ブロックへの"転送を行ったとき"になります。
        sceSdSetTransIntrHandler() でも転送割り込みハンドラを設定した場合、
        sceSdSetTransIntrHandler() で設定されたハンドラが優先され、sceSdS
        etTransCallback() で設定されたハンドラは呼び出されません。
        
[備考]
        割り込みハンドラはスレッド独立部で実行されるため、プログラミング
        に際していくつか特別な注意が必要です。詳しくは\overview\iopkernl
        に注意事項が記載されていますので参照してください。
        
[関連項目]
        sceSdBlockTrans()

=========================================================================
sceSdSetTransIntrHandler                                           [関数]
=========================================================================
                                             転送の割り込みハンドラの設定
[形式(IOP)]
        sceSdTransIntrHandler sceSdSetTransIntrHandler (
        	int channel,
        	sceSdTransIntrHandler func,
        	void *data
        );
        
[引数]
        channel :	転送チャンネル。0 または 1 を指定できる。
        func :		割り込みハンドラへのポインタ
        data :		割り込みハンドラ func に渡されるデータのアドレス
        
[返り値]
        以前設定されていた割り込みハンドラへのポインタ
        
[解説]
        転送 (ボイスの I/O 転送は除く) の割り込みハンドラを設定します。
        割り込みが入るタイミングは転送モードの設定によって異なります。SD_
        BLOCK_ONESHOTの場合は、設定したサイズの転送が終了したときに割り込
        みが入ります。SD_BLOCK_LOOPの場合は、転送サイズの中間点と終点で割
        り込みが入ります。
        割り込みが入るのは、設定したサイズを"演奏したとき"ではありません。
        SPU2内の入出力ブロックへの"転送を行ったとき"になります。
        sceSdSetTransCallback() でも転送割り込みハンドラを設定した場合、s
        ceSdSetTransIntrHandler() で設定されたハンドラが優先され、sceSdSe
        tTransCallback() で設定されたハンドラは呼び出されません。
        
[備考]
        割り込みハンドラはスレッド独立部で実行されるため、プログラミング
        に際していくつか特別な注意が必要です。詳しくは\overview\iopkernl
        に注意事項が記載されていますので参照してください。
        
[関連項目]
        sceSdBlockTrans()

=========================================================================
sceSdVoiceTrans                                                    [関数]
=========================================================================
                                       SPU2ローカルメモリへの転送を行なう
[形式]
        int sceSdVoiceTrans(
        	short channel,
        	u_short mode,
        	u_char *m_addr,
        	u_char *s_addr,
        	u_int size
        )
        
[引数]
        channel		転送チャンネル。0または1を指定できる。
        mode		転送モード
        m_addr		IOPメモリ側のアドレス
        s_addr		SPUメモリ側のアドレス
        size		転送サイズ
        
[返り値]
        転送したバイト数。エラーならば負の値
        
[解説]
        SPU2ローカルメモリ（ボイスメモリ）と、IOPメモリとの転送を行ないま
        す。
        転送は64バイト単位で行なわれます。転送サイズが64バイトの倍数でな
        い場合でも、転送は64バイト単位で行なわれるので注意してください。
        
        ＜modeに設定できるビットマスク＞
         ・転送方向
        	SD_TRANS_MODE_WRITE	0
        	SD_TRANS_MODE_READ		1
         ・転送デバイス
        	SD_TRANS_BY_DMA	(0x0<<3)
        	SD_TRANS_BY_IO	(0x1<<3) （Writeのみ）
        

=========================================================================
sceSdVoiceTransStatus                                              [関数]
=========================================================================
                                               ボイス転送の状態を取得する
[形式]
        u_int sceSdVoiceTransStatus(
        	short channel,
        	short flag
        )
        
[引数]
        channel	転送チャンネル。0または1を指定できる。
        flag	動作フラグ
        	SD_TRANS_STATUS_WAIT	転送終了まで待つ
        	SD_TRANS_STATUS_CHECK	待たずに現在の状態を返す
        
[返り値]
        １ならば転送終了、０ならば転送中。
        
[解説]
        ボイス転送の状態を取得します。
        flagの指定により、ブロッキング処理 / ノンブロッキング処理を選択す
        ることができます。
        

 3 コールバック関数
====================


=========================================================================
sceSdSpu2IntrHandler                                               [関数]
=========================================================================
                                                SPU2 割り込みハンドラ仕様
[形式]
        typedef int (*sceSdSpu2IntrHandler)(
        	int core_bit,
        	void *data
        )
        
[引数]
        core_bit 	SPU2 割り込みが発生したコアのビット表現
        data		sceSdSetSpu2IntrHandler() で登録したデータアドレス
        
[返り値]
        現在未使用、必ず0を返す。
[解説]
        この関数は、SPU2割り込み内で実行されるものです。その際、割り込み
        が発生したコアをビット (下位 2 ビットのみ有効) で表現した値、登録
        時に指定したデータのアドレスが引数として渡されます。
        
        ＜core_bit＞
        1 / 0 ビット
        0  1		CORE0 で SPU2割り込みが発生
        1  0		CORE1 で SPU2割り込みが発生
        1  1		CORE0, CORE1 の両方で同時に SPU2割り込みが発生
        
[関連項目]
        sceSdSetSpu2IntrHandler(), sceSdSetIRQCallback()
        

=========================================================================
sceSdTransIntrHandler                                              [関数]
=========================================================================
                                                 転送割り込みハンドラ仕様
[形式]
        typedef int (*sceSdTransIntrHandler)(
        	int channel,
        	void *data
        )
        
[引数]
        channel 	sceSdSetTransIntrHandler() でのハンドラ設定時に指定した
        転送チャンネル (0 または 1)
        data 	sceSdSetTransIntrHandler() でのハンドラ設定時に指定したユー
        ザ側データアドレス
        
[返り値]
        現在未使用、必ず0を返す。
        
[解説]
        この関数は、DMA 転送終了時に発生する割り込み内で実行されるもので
        す。その際、割り込みが発生した転送チャンネル番号と、登録時に指定
        したデータのアドレスが引数として渡されます。
        
[関連項目]
        sceSdSetTransIntrHandler(), sceSdSetTransCallback()
        
        

 4 レジスタマクロ一覧
======================


=========================================================================
SD_A_EEA                                             [レジスタマクロ一覧]
=========================================================================
                                   エフェクト処理用作業領域の終端アドレス
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_A_EEA);			//取得
        void sceSdSetAddr(SD_CORE_?|SD_A_EEA, u_int value);	//設定
[解説]
        デジタルエフェクト処理に使用する、作業領域の終端アドレスを指定し
        ます。
        下位17bitはすべて1である必要があります。したがって、128KB境界にし
        か指定できません。
        
        +----+------+----------------------------------+
        |bit  symbol contents                          |
        +    +      +                                  +
        |0-22 ADDR   エフェクト用作業領域の終端アドレス|
        |            bit0-16はすべて1であること        |
        +----+------+----------------------------------+
        

=========================================================================
SD_A_ESA                                             [レジスタマクロ一覧]
=========================================================================
                                   エフェクト処理用作業領域の先頭アドレス
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_A_ESA);			//取得
        void sceSdSetAddr(SD_CORE_?|SD_A_ESA, u_int value);	//設定
[解説]
        デジタルエフェクト処理に使用する、作業領域の先頭アドレスを指定し
        ます。
        
        +----+------+----------------------------------+
        |bit  symbol contents                          |
        +    +      +                                  +
        |0-22 ADDR   エフェクト用作業領域の先頭アドレス|
        +----+------+----------------------------------+
        
        ※エフェクト設定APIのsceSdSetEffectAttr()を使用する場合は、そのAP
        Iの内部で設定を行なうので、S_A_ESAを直接設定する必要はありません。
        

=========================================================================
SD_A_IRQA                                            [レジスタマクロ一覧]
=========================================================================
                                               SPU2割り込みアドレスの指定
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_A_IRQA);		//取得
        void sceSdSetAddr(SD_CORE_?|SD_A_IRQA, u_int value);	//設定
[解説]
        各コアがローカルメモリの特定のアドレスをアクセスしたときに、ホス
        ト（IOP）に対して割り込みを発生させることができますが、そのアドレ
        スを指定します。
        
        +----+------+----------------------------+
        |bit  symbol contents                    |
        +    +      +                            +
        |0-22 ADDR   割り込みを発生させるアドレス|
        |            bit0-3は0であること         |
        +----+------+----------------------------+
        

=========================================================================
SD_A_TSA                                             [レジスタマクロ一覧]
=========================================================================
                                                         転送開始アドレス
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_A_TSA);			//取得
        void sceSdSetAddr(SD_CORE_?|SD_A_TSA, u_int value);	//設定
[解説]
        SPU2ローカルメモリへの転送（入出力ブロックへの転送を除く）の転送
        先となる、ローカルメモリの先頭アドレスを指定します。
        転送の実行状況によらず、値は不変です。
        転送中に値を変更した場合、動作、ならびに転送されたデータは不定に
        なります。
        通常は転送用のライブラリ内でセットされるので、ユーザーがセットす
        る必要はありません。
        
        +----+------+----------------------+
        |bit  symbol contents              |
        +    +      +                      +
        |0-22 ADDR   転送領域の先頭アドレス|
        |            bit0-3は0であること   |
        +----+------+----------------------+
        

=========================================================================
SD_P_MMIX                                            [レジスタマクロ一覧]
=========================================================================
                                             ボイスミキシング後の出力指定
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_P_MMIX);		//取得
        void sceSdSetParam(SD_CORE_?|SD_P_MMIX, u_short value);	//設定
[解説]
        出力をダイレクト／エフェクトのいずれに出力するかを指定します。
        
        +---+-------+------------------------------------------+
        |bit symbol  contents                                  |
        +   +       +                                          +
        |11  MSNDL   ボイス出力（ドライ:L）→ ダイレクト出力   |
        |10  MSNDR   ボイス出力（ドライ:R）→ ダイレクト出力   |
        |09  MSNDEL  ボイス出力（ウエット:L）→ エフェクト出力 |
        |08  MSNDER  ボイス出力（ウエット:R）→ エフェクト出力 |
        |07  MINL    サウンドデータ入力（L） → ダイレクト出力 |
        |06  MINR    サウンドデータ入力（R） → ダイレクト出力 |
        |05  MINEL   サウンドデータ入力（L） → エフェクト出力 |
        |04  MINER   サウンドデータ入力（R） → エフェクト出力 |
        |03  SINL    コア外部入力（L）→ ダイレクト出力        |
        |02  SINR    コア外部入力（R）→ ダイレクト出力        |
        |01  SINEL   コア外部入力（L）→ エフェクト出力        |
        |00  SINER   コア外部入力（R）→ エフェクト出力        |
        +---+-------+------------------------------------------+
        
        

=========================================================================
SD_P_EVOLL / SD_P_EVOLR                              [レジスタマクロ一覧]
=========================================================================
  エフェクトリターンボリューム（左） / エフェクトリターンボリューム（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_P_EVOLx);		   //取得
        void sceSdSetParam(SD_CORE_?|SD_P_EVOLx, u_short value);   //設定
[解説]
        エフェクトのリターンボリュームを指定します。
        
        +----+------+------------+
        |bit  symbol contents    |
        +    +      +            +
        |15-0 VALUE  ボリューム値|
        +----+------+------------+
        

=========================================================================
SD_P_AVOLL / SD_P_AVOLR                              [レジスタマクロ一覧]
=========================================================================
          コア外部入力のボリューム（左） / コア外部入力のボリューム（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_P_AVOLx);		   //取得
        void sceSdSetParam(SD_CORE_?|SD_P_AVOLx, u_short value);   //設定
[解説]
        コア外部入力のボリュームを指定します。
        
        +----+------+------------+
        |bit  symbol contents    |
        +    +      +            +
        |15-0 VALUE  ボリューム値|
        +----+------+------------+
        

=========================================================================
SD_P_BVOLL / SD_P_BVOLR                              [レジスタマクロ一覧]
=========================================================================
     サウンドデータ入力のボリューム（左） / サウンドデータ入力のボリュー
     ム（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_P_BVOLx);		   //取得
        void sceSdSetParam(SD_CORE_?|SD_P_BVOLx, u_short value);   //設定
[解説]
        サウンドデータ入力のボリュームを指定します。
        
        +----+------+------------+
        |bit  symbol contents    |
        +    +      +            +
        |15-0 VALUE  ボリューム値|
        +----+------+------------+
        

=========================================================================
SD_P_MVOLL / SD_P_MVOLR                              [レジスタマクロ一覧]
=========================================================================
                      マスターボリューム（左） / マスターボリューム（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_P_MVOLx);		   //取得
        void sceSdSetParam(SD_CORE_?|SD_P_MVOLx, u_short value);   //設定
[解説]
        各コアのマスタボリュームを指定します。
        id フィールド (bit15-12) の値で設定する内容が異なります。
        
        +----+-------------------------------------------------------+
        |ID   動作                                                   |
        +    +                                                       +
        |0xxx 一定値指定モード                                       |
        |     bit 0-14 で値を指定します。                            |
        |     負値の場合は位相が反転します。                         |
        |1000 直線増加モード（正相)                                  |
        |     1Ts に指定した値ずつ加算。 +1.0 まで直線的に増加       |
        |     bit 0-7 で値を指定                                     |
        |     現在値は正であること                                   |
        |1001 直線増加モード（逆相)                                  |
        |     1Ts に指定した値ずつ加算。 -1.0 まで直線的に減少       |
        |     bit 0-7 で値を指定                                     |
        |     現在値は負であること                                   |
        |1010 直線減少モード（正相)                                  |
        |     1Ts に指定した値ずつ加算。 0.0 まで直線的に減少        |
        |     bit 0-7 で値を指定                                     |
        |     現在値は正であること                                   |
        |1011 直線減少モード（逆相)                                  |
        |     1Ts に指定した値ずつ加算。 0.0 まで直線的に増加        |
        |     bit 0-7 で値を指定                                     |
        |     現在値は負であること                                   |
        |1100 疑似逆指数増加モード（正相)                            |
        |     1Ts に指定した値に比例して加算。 1.0 まで折れ線で増加  |
        |     bit 0-7 で値を指定                                     |
        |     現在値は正であること                                   |
        |1101 疑似逆指数増加モード（逆相)                            |
        |     1Ts に指定した値に比例して加算。 -1.0 まで折れ線で増加 |
        |     bit 0-7 で値を指定                                     |
        |     現在値は負であること                                   |
        |1110 指数減少モード                                         |
        |     1Ts に指定した値づつ乗算。                             |
        |     bit 0-7 で値を指定                                     |
        +----+-------------------------------------------------------+
        

=========================================================================
SD_P_MVOLXL / SD_P_MVOLXR                            [レジスタマクロ一覧]
=========================================================================
      マスターボリュームの現在値（左） / マスターボリュームの現在値（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_P_MVOLXx);		//取得
        
[解説]
        マスターボリュームの現在値を取得します。
        取得専用で、設定できません。
        なお、MVOL が一定値指定モード以外の場合、ボリュームの変化にしたが
        い 1 Ts 毎に値が変化します。
        
        +----+------+----------------+
        |bit  symbol contents        |
        +    +      +                +
        |15-0 VALUE  ボリューム現在値|
        +----+------+----------------+
        

=========================================================================
SD_S_ENDX                                            [レジスタマクロ一覧]
=========================================================================
                                                 エンドポイント通過フラグ
[形式]
        u_int sceSdGetSwitch(SD_CORE_?|SD_S_ENDX);		//取得
        void sceSdSetSwitch(SD_CORE_?|SD_S_ENDX, u_int value);	//設定
[解説]
        各ボイスの発音処理が進んでエンドポイントブロックに到達したかどう
        かが示されます。
        
        +----+------+---------------------------------+
        |bit  symbol contents                         |
        +    +      +                                 +
        |0    VOICE  Voice0のエンドポイント通過フラグ |
        |            0: 未通過  1: 通過済み           |
        |省略                                         |
        |23   VOICE  Voice23のエンドポイント通過フラグ|
        |            0: 未通過  1: 通過済み           |
        +----+------+---------------------------------+
        
        キーオンを指定することにより、そのボイスに該当するビットは 0 にな
        ります。
        また、このレジスタに任意の値（0以外でもよい）を書き込むことにより、
        すべてのビットが0にクリアされます。
        

=========================================================================
SD_S_KOFF                                            [レジスタマクロ一覧]
=========================================================================
                                               キーオフ（ボイス発音終了）
[形式]
        u_int sceSdGetSwitch(SD_CORE_?|SD_S_KOFF);		//取得
        void sceSdSetSwitch(SD_CORE_?|SD_S_KOFF, u_int value);	//設定
[解説]
        各ボイスのキーオフ（発音終了）を指定します。１を書きこんだビット
        に対応するボイスのキーオフ処理が開始されます。キーオフ状態になる
        と、エンベロープがリリースに移行します。即座に音が消えるとは限り
        ません。
        
        +----+------+-------------------------+
        |bit  symbol contents                 |
        +    +      +                         +
        |0    VOICE  Voice0のキーオフスイッチ |
        |省略                                 |
        |23   VOICE  Voice23のキーオフスイッチ|
        +----+------+-------------------------+
        
        同一レジスタへの連続書き込みは 2 Ts 以上の間隔を開ける必要があり
        ます。2 Ts 以内に連続して書き込んだ場合、実際に発音終了の処理を行
        うボイスは不定です。
        

=========================================================================
SD_S_KON                                             [レジスタマクロ一覧]
=========================================================================
                                               キーオン（ボイス発音開始）
[形式]
        u_int sceSdGetSwitch(SD_CORE_?|SD_S_KON);		//取得
        void sceSdSetSwitch(SD_CORE_?|SD_S_KON, u_int value);	//設定
[解説]
        各ボイスのキーオン（発音開始）を指定します。１を書きこんだビット
        に対応するボイスの発音処理が開始されます。
        ゼロを書きこんでも、キーオフにはなりません。
        
        +----+------+-------------------------+
        |bit  symbol contents                 |
        +    +      +                         +
        |0    VOICE  Voice0のキーオンスイッチ |
        |省略                                 |
        |23   VOICE  Voice23のキーオンスイッチ|
        +----+------+-------------------------+
        
        このレジスタを読み込んだ値は、実際の発音されているボイスを反映し
        ていません。
        また、同一レジスタへの連続書き込みは 2 Ts 以上の間隔を開ける必要
        があります。2 Ts 以内に連続して書き込んだ場合、実際に発音開始の処
        理を行うボイスは不定です。
        なお、発音処理を行っているボイスに対してキーオフを指定せずに再度
        ビット 1 を書き込むことによってキーオンの指定を行うことが可能です。
        

=========================================================================
SD_S_NON                                             [レジスタマクロ一覧]
=========================================================================
                                                 ノイズ発生器への割り当て
[形式]
        u_int sceSdGetSwitch(SD_CORE_?|SD_S_NON);		//取得
        void sceSdSetSwitch(SD_CORE_?|SD_S_NON, u_int value);	//設定
[解説]
        各ボイスのサウンドソースとして、ノイズ発生器を割り当てるかどうか
        を指定します。
        
        +----+------+---------------------------+
        |bit  symbol contents                   |
        +    +      +                           +
        |0    VOICE  Voice0のサウンドソース指定 |
        |            0: off  1: on              |
        |省略                                   |
        |23   VOICE  Voice23のサウンドソース指定|
        |            0: off  1: on              |
        +----+------+---------------------------+
        
        

=========================================================================
SD_S_PMON                                            [レジスタマクロ一覧]
=========================================================================
                                                         ピッチ変調の指定
[形式]
        u_int sceSdGetSwitch(SD_CORE_?|SD_S_PMON);		//取得
        void sceSdSetSwitch(SD_CORE_?|SD_S_PMON, u_int value);	//設定
[解説]
        各ボイスに対して、ピッチ変調をかけるかどうか指定します。
        指定したボイスの一つ若い番号のボイスの波高値が、変調に使われます。
        したがって、Voice0に対応するbit0は指定できません。
        
        +----+------+-----------------------+
        |bit  symbol contents               |
        +    +      +                       +
        |1    VOICE  Voice1のピッチ変調指定 |
        |            0: off  1: on          |
        |省略                               |
        |23   VOICE  Voice23のピッチ変調指定|
        |            0: off  1: on          |
        +----+------+-----------------------+
        

=========================================================================
SD_S_VMIXL / SD_S_VMIXR
SD_S_VMIXEL / SD_S_VMIXER    [レジスタマクロ一覧]
=========================================================================
     ボイス出力のミキシング指定（Dry 左） / ボイス出力のミキシング指定（D
     ry 右）
     ボイス出力のミキシング指定（Wet 左） / ボイス出力のミキシング指定（W
     et 右）
[形式]
        u_int sceSdGetSwitch(SD_CORE_?|SD_S_VMIXx);		//取得
        void sceSdSetSwitch(SD_CORE_?|SD_S_VMIXx, u_int value);	//設定
[解説]
        各ボイスの出力を、L=Dry左 / R=Dry右 / EL=Wet左 / ER=Wet右それぞれ
        に出力するかどうかを指定します。
        Dryとはエフェクト無し側、Wetとはエフェクト有り側を意味します。
        
        +----+------+---------------------------------+
        |bit  symbol contents                         |
        +    +      +                                 +
        |0    VOICE  Voice0の出力スイッチ             |
        |            0: 該当チャンネルへ出力しない    |
        |            1: 該当チャンネルへ出力する      |
        |省略                                         |
        |23   VOICE  Voice23のエンドポイント通過フラグ|
        |            0: 該当チャンネルへ出力しない    |
        |            1: 該当チャンネルへ出力する      |
        +----+------+---------------------------------+
        

=========================================================================
SD_VA_LSAX                                           [レジスタマクロ一覧]
=========================================================================
                                                 ループポイントのアドレス
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_VOICE_?|SD_VA_LSAX);	//取得
        void sceSdSetAddr(SD_CORE_?|SD_VOICE_?|SD_VA_LSAX, u_int value);	
        //設定
[解説]
        波形データでループポイントに指定されているブロックの先頭アドレス
        が示されます。ループポイントブロックを通過した時に初めて設定され
        ます。
        発音処理中 (キーオン後 4 Ts の経過より後。4 Ts 以内の書き換えは無
        視されます）に、このレジスタの値を変更することができます。この場
        合、該当するボイスに対して設定されたアドレスが優先され、ループポ
        イントブロックの情報は次にそのボイスがキーオンされるまで無効にな
        ります。
        
        +----+------+------------------------+
        |bit  symbol contents                |
        +    +      +                        +
        |0-22 ADDR   ループポイントのアドレス|
        |            bit0-3は0であること     |
        +----+------+------------------------+
        

=========================================================================
SD_VA_NAX                                            [レジスタマクロ一覧]
=========================================================================
                                 次に読みこまれるべき波形データのアドレス
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_VOICE_?|SD_VA_NAX);	//取得
[解説]
        波形データ中で、次に読みこまれる波形データのアドレスが示されます。
        発音処理が進むにつれて、自動的に更新されます。
        取得専用で、指定はできません。
        
        +----+------+--------------------------------+
        |bit  symbol contents                        |
        +    +      +                                +
        |0-22 ADDR   次に読まれる波形データのアドレス|
        +----+------+--------------------------------+
        

=========================================================================
SD_VA_SSA                                            [レジスタマクロ一覧]
=========================================================================
                                                 波形データの先頭アドレス
[形式]
        u_int sceSdGetAddr(SD_CORE_?|SD_VOICE_?|SD_VA_SSA);	//取得
        void sceSdSetAddr(SD_CORE_?|SD_VOICE_?|SD_VA_SSA, u_int value);			//設定
[解説]
        各ボイスのサウンドソースとなる、波形データの先頭アドレスを指定し
        ます。
        
        +----+------+------------------------+
        |bit  symbol contents                |
        +    +      +                        +
        |0-22 ADDR   波形データの先頭アドレス|
        |            bit0-3は0であること     |
        +----+------+------------------------+
        

=========================================================================
SD_VP_ADSR1                                          [レジスタマクロ一覧]
=========================================================================
                                                             エンベロープ
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_VOICE_?|SD_VP_ADSR1);   //取得
        void sceSdSetParam(SD_CORE_?|SD_VOICE_?|SD_VP_ADSR1, u_short valu
        e);	//設定
[解説]
        エンベロープを設定します。
        
        +----+------+---------------------+
        |bit  symbol contents             |
        +    +      +                     +
        |15   AM     Attack Rate モード   |
        |            0       直線増加     |
        |            1       疑似指数増加 |
        |14-8 AR     Attack rate          |
        |7-4  DR     Decay rate           |
        |3-0  SL     Sustain level        |
        +----+------+---------------------+
        

=========================================================================
SD_VP_ADSR2                                          [レジスタマクロ一覧]
=========================================================================
                                                       エンベロープ（２）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_VOICE_?|SD_VP_ADSR2);   //取得
        void sceSdSetParam(SD_CORE_?|SD_VOICE_?|SD_VP_ADSR2, u_short valu
        e);	//設定
[解説]
        エンベロープを設定します。
        
        +-----+------+---------------------------+
        |bit   symbol contents                   |
        +     +      +                           +
        |15-13 SM     Sustain Rate モード        |
        |             000     直線的増加モード   |
        |             010     直線的減少モード   |
        |             100     疑似指数増加モード |
        |             110     指数減少モード     |
        |12-6  SR     Sustain rate               |
        |5     RM     Release rate モード        |
        |             0       直線的減少モード   |
        |             1       指数減少モード     |
        |4-0   RR     Release rate               |
        +-----+------+---------------------------+
        

=========================================================================
SD_VP_ENVX                                           [レジスタマクロ一覧]
=========================================================================
                                                       エンベロープ現在値
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_VOICE_?|SD_VP_ENVX);	//取得
        
[解説]
        エンベロープの現在値を取得します。
        取得専用で、指定はできません。
        なお、エンベロープの SR, RR の指定が直線的減少の指定の場合、1 Ts
        だけ負になることがあります。またループなしの波形データを発音して
        いる場合、ENDX レジスタのそのボイスに該当するビットが 1 となった
        時点でエンベロープの状態に関わらず ENVX は 0 になります。
        
        +----+------+--------------------+
        |bit  symbol contents            |
        +    +      +                    +
        |15-0 VALUE  エンベロープの現在値|
        +----+------+--------------------+
        

=========================================================================
SD_VP_PITCH                                          [レジスタマクロ一覧]
=========================================================================
                                                           発音時のピッチ
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_VOICE_?|SD_VP_PITCH);   //取得
        void sceSdSetParam(SD_CORE_?|SD_VOICE_?|SD_VP_PITCH, u_short valu
        e);	//設定
[解説]
        
        +----+------+------------+
        |bit  symbol contents    |
        +    +      +            +
        |15-0 VALUE  ピッチ指定値|
        +----+------+------------+
        
        各ボイスのピッチ（音の高さ）を指定します。
        原音のピッチを f0 とすると、ピッチ指定値(VALUE)と発音されるピッチ
         f の関係は以下のとおりです。
        	f = VALUE * f0 / 4096
        
        なお、サウンドソースをノイズ発生器とした場合はピッチ指定を変えて
        も聴感上の変化はありません。ノイズのピッチは別途用意されているAPI
        で指定します。
        ピッチの指定は発音処理の進行速度に影響し、ピッチを低く指定すると
        発音処理がゆっくり進むことになります。
        

=========================================================================
SD_VP_VOLL / SD_VP_VOLR                              [レジスタマクロ一覧]
=========================================================================
                          ボイスボリューム（左） / ボイスボリューム（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_VOICE_?|SD_VP_VOLx);	//取得
        void sceSdSetParam(SD_CORE_?|SD_VOICE_?|SD_VP_VOLx, u_short value)
        ;	//設定
[解説]
        ボイスボリュームを指定します。
        id フィールド (bit15-12) の値で設定する内容が異なります。
        
        +----+-------------------------------------------------------+
        |ID   動作                                                   |
        +    +                                                       +
        |0xxx 一定値指定モード。                                     |
        |     bit 0-14 で値を指定します。                            |
        |     負値の場合は位相が反転します。                         |
        |1000 直線増加モード（正相)                                  |
        |     1Ts に指定した値ずつ加算。 +1.0 まで直線的に増加       |
        |     bit 0-7 で値を指定                                     |
        |     現在値は正であること                                   |
        |1001 直線増加モード（逆相)                                  |
        |     1Ts に指定した値ずつ加算。 -1.0 まで直線的に減少       |
        |     bit 0-7 で値を指定                                     |
        |     現在値は負であること                                   |
        |1010 直線減少モード（正相)                                  |
        |     1Ts に指定した値ずつ加算。 0.0 まで直線的に減少        |
        |     bit 0-7 で値を指定                                     |
        |     現在値は正であること                                   |
        |1011 直線減少モード（逆相)                                  |
        |     1Ts に指定した値ずつ加算。 0.0 まで直線的に増加        |
        |     bit 0-7 で値を指定                                     |
        |     現在値は負であること                                   |
        |1100 疑似逆指数増加モード（正相)                            |
        |     1Ts に指定した値に比例して加算。 1.0 まで折れ線で増加  |
        |     bit 0-7 で値を指定                                     |
        |     現在値は正であること                                   |
        |1101 疑似逆指数増加モード（逆相)                            |
        |     1Ts に指定した値に比例して加算。 -1.0 まで折れ線で増加 |
        |     bit 0-7 で値を指定                                     |
        |     現在値は負であること                                   |
        |1110 指数減少モード                                         |
        |     1Ts に指定した値づつ乗算。                             |
        |     bit 0-7 で値を指定                                     |
        +----+-------------------------------------------------------+
        

=========================================================================
SD_VP_VOLXL / SD_VP_VOLXR                            [レジスタマクロ一覧]
=========================================================================
                          ボリューム現在値（左） / ボリューム現在値（右）
[形式]
        u_short sceSdGetParam(SD_CORE_?|SD_VOICE_?|SD_VP_VOLXx);   //取得
[解説]
        ボリュームの現在値を取得します。
        取得専用で、指定はできません。
        なお、VOL が一定値指定モード以外の場合、ボリュームの変化にしたが
        い 1Ts 毎に値が変化します。
        
        +----+------+----------------+
        |bit  symbol contents        |
        +    +      +                +
        |15-0 VALUE  ボリューム現在値|
        +----+------+----------------+
        
