[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                              VU0ライブラリ
                             ==============


 1 構造体
==========

=========================================================================
sceVu0FMATRIX                                                    [構造体]
=========================================================================
                                                          4x4マトリックス
[構造]
        typedef sceVu0FVECTOR sceVu0FMATRIX[4];
        
[解説]
        float×4×4要素のマトリックスです。行列要素としての並びは次のよう
        になっています。
        
        |m[0][0] m[1][0] m[2][0] m[3][0]|
        |m[0][1] m[1][1] m[2][1] m[3][1]|
        |m[0][2] m[1][2] m[2][2] m[3][2]|
        |m[0][3] m[1][3] m[2][3] m[3][3]|
        

=========================================================================
sceVu0FVECTOR                                                    [構造体]
=========================================================================
                                                4次元ベクトル（浮動小数）
[構造]
        typedef float sceVu0FVECTOR[4];
        
[解説]
        float×4要素のベクトルです。EEはリトルエンディアンであり、sceVu0F
        VECTORの配列要素とベクトル要素(フィールド)との対応は次のようにな
        っています。
        
        +--------+----------+
        |配列要素 フィールド|
        +        +          +
        |a[0]     x         |
        |a[1]     y         |
        |a[2]     z         |
        |a[3]     w         |
        +--------+----------+
        

=========================================================================
sceVu0IVECTOR                                                    [構造体]
=========================================================================
                                                    4次元ベクトル（整数）
[構造]
        typedef int sceVu0IVECTOR[4];
        
[解説]
        int×4要素のベクトルです。EEはリトルエンディアンであり、sceVu0IVE
        CTORの配列要素とベクトル要素(フィールド)との対応は次のようになっ
        ています。
        
        +--------+----------+
        |配列要素 フィールド|
        +        +          +
        |a[0]     x         |
        |a[1]     y         |
        |a[2]     z         |
        |a[3]     w         |
        +--------+----------+
        
        sceVu0IVECTORは、小数部0bitの固定小数点数または小数部4bitの固定小
        数点数と、ふたつの数値フォーマットで使用することができます。
        
        +----------------+------------------------+
        |フォーマット     仕様                    |
        +                +                        +
        |固定小数点(32.0) 整数部:32bit,小数部:0bit|
        |固定小数点(28.4) 整数部:24bit,小数部:4bit|
        +----------------+------------------------+
        

 2 関数
========


=========================================================================
sceVpu0Reset                                                       [関数]
=========================================================================
                                                       VU0,VIF0のリセット
[形式]
        void sceVpu0Reset(void);
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        VU0およびVIF0を初期化します。
        

=========================================================================
sceVu0AddVector                                                    [関数]
=========================================================================
                                                     4並列加算 (ADD/xyzw)
[形式]
        void sceVu0AddVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2
        )
        
[引数]
        v0		出力:ベクトル
        v1,v2		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1の各要素とベクトルv2の各要素を各々加算し、結果をv0に返
        します。
        

=========================================================================
sceVu0ApplyMatrix                                                  [関数]
=========================================================================
                                             ベクトルとマトリックスの乗算
[形式]
        void sceVu0ApplyMatrix(
        	sceVu0FVECTOR v0,
        	sceVu0FMATRIX m0,
        	sceVu0FVECTOR v1
        )
        
[引数]
        v0		出力:ベクトル
        m0		入力:マトリックス
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        マトリックスm0にベクトルv1を右から乗算し、結果をベクトルv0に返し
        ます。式で表現すると次のとおりです。
        v0=m0*v1
        

=========================================================================
sceVu0CameraMatrix                                                 [関数]
=========================================================================
                                                 ワールドビュー行列の生成
[形式]
        void sceVu0CameraMatrix(
        	sceVu0FMATRIX m,
        	sceVu0FVECTOR p,
        	sceVu0FVECTOR zd,
        	sceVu0FVECTOR yd
        );
        
[引数]
        m		出力:マトリックス(ビューワールド座標)
        p		入力:ベクトル(視点)
        zd		入力:ベクトル(視線)
        yd		入力:ベクトル(垂直方向)
        
[返り値]
        なし
        
[解説]
        視点pを(0,0,0)に、視線zdを(0,0,1)に、垂直方向ydを(0,1,0)にと変換
        するような行列を求め、mに返します。
        

=========================================================================
sceVu0ClampVector                                                  [関数]
=========================================================================
                                                       ベクトルのクランプ
[形式]
        void sceVu0ClampVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	float min,
        	float max
        )
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        min		入力:最小値
        max		入力:最大値
        
[返り値]
        なし
        
[解説]
        ベクトルv1の各要素を、最小値min、最大値maxでクランプし、結果をベ
        クトルv0に返します。
        

=========================================================================
sceVu0ClipAll                                                      [関数]
=========================================================================
                                           表示範囲によるクリッピング検査
[形式]
        int sceVu0ClipAll(
        	sceVu0FVECTOR minv,
        	sceVu0FVECTOR maxv,
        	sceVu0FMATRIX ms,
        	sceVu0FVECTOR *vm,
        	int n
        );
        
[引数]
        minv		入力:表示範囲の最小値
        maxv		入力:表示範囲の最大値
        ms		入力:マトリックス（モデル−スクリーン）
        vm		入力:頂点ベクトルのポインタ
        n		入力:頂点数
        
[返り値]
        すべての頂点が表示範囲に入っていないときは1を返します。
        
[解説]
        vmとnで指定されるn個の頂点がすべて表示範囲に入っていないかどうか
        を調べます。
        

=========================================================================
sceVu0ClipScreen                                                   [関数]
=========================================================================
                                         GS描画範囲によるクリッピング検査
[形式]
        int sceVu0ClipScreen(
        	sceVu0FVECTOR v0
        )
        
[引数]
        v0		入力:ベクトル
        
[返り値]
        描画範囲に入っているときは0を返します。
        
[解説]
        頂点ベクトルv0がGSの描画範囲に入っているかどうかを調べます。
        

=========================================================================
sceVu0ClipScreen3                                                  [関数]
=========================================================================
                                         GS描画範囲によるクリッピング検査
[形式]
        int sceVu0ClipScreen3(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2
        )
        
[引数]
        v0,v1,v2		入力:ベクトル
        
[返り値]
        すべての頂点が描画範囲に入っているときは0を返します。
        
[解説]
        頂点ベクトルv0,v1,v2がすべてGSの描画範囲に入っているかどうかを調
        べます。
        

=========================================================================
sceVu0CopyMatrix                                                   [関数]
=========================================================================
                                                       マトリックスの複写
[形式]
        void sceVu0CopyMatrix(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        
[返り値]
        なし
        
[解説]
        マトリックスm1をマトリックスm0にコピーします。
        

=========================================================================
sceVu0CopyVector                                                   [関数]
=========================================================================
                                                           ベクトルの複写
[形式]
        void sceVu0CopyVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1
        );
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1をベクトルv0にコピーします。
        

=========================================================================
sceVu0CopyVectorXYZ                                                [関数]
=========================================================================
                                                           ベクトルの複写
[形式]
        void sceVu0CopyVectorXYZ(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1
        );
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1のx,y,z要素をベクトルv0にコピーします。
        ベクトルv0のw要素は、そのままベクトルv0に返す。	
        

=========================================================================
sceVu0DivVector                                                    [関数]
=========================================================================
                                                                     除算
[形式]
        void sceVu0DivVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	float q
        )
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        q		入力:スカラー
        
[返り値]
        なし
        
[解説]
        ベクトルv1をスカラーqで除算し、結果をベクトルv0に返します。
        

=========================================================================
sceVu0DivVectorXYZ                                                 [関数]
=========================================================================
                                                                     除算
[形式]
        void sceVu0DivVectorXYZ(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	float q
        )
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        q		入力:スカラー
        
[返り値]
        なし
        
[解説]
        ベクトルv1のx,y,z要素をスカラーqで除算し、結果をベクトルv0に返し
        ます。
        ベクトルv0のw要素は、そのままベクトルv0に返します。
        

=========================================================================
sceVu0DropShadowMatrix                                             [関数]
=========================================================================
                                           ドロップシャドウ射影行列の生成
[形式]
        void sceVu0DropShadowMatrix(
        	sceVu0FMATRIX m,
        	sceVu0FVECTOR lp,
        	float a,
        	float b,
        	float c,
        	int mode
        );
        
[引数]
        m		出力:マトリックス
        lp		入力:ベクトル(光源の位置)
        a		入力:影の投影面
        b		入力:影の投影面
        c		入力:影の投影面
        mode		入力:光源の種類
        		0: 平行光源
        		1: 点光源
        
[返り値]
        なし
        
[解説]
        ax+by+cz=1で表現される平面にlpとmodeで指定される光源からの影を投
        影する行列を求め、mに返します。
        

=========================================================================
sceVu0FTOI0Vector                                                  [関数]
=========================================================================
                                       浮動小数点 -> 小数部0bit固定小数点
[形式]
        void sceVu0FTOI0Vector(
        	sceVu0IVECTOR v0,
        	sceVu0FVECTOR v1
        );
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        浮動小数点ベクトルv1の各要素を小数部0bitの固定小数点に変換し、v0
        に返します。
        

=========================================================================
sceVu0FTOI4Vector                                                  [関数]
=========================================================================
                                       浮動小数点 -> 小数部4bit固定小数点
[形式]
        void sceVu0FTOI4Vector(
        	sceVu0IVECTOR v0,
        	sceVu0FVECTOR v1
        );
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        浮動小数点ベクトルv1の各要素を小数部4bitの固定小数点数に変換し、v
        0に返します。
        

=========================================================================
sceVu0InnerProduct                                                 [関数]
=========================================================================
                                                           ベクトルの内積
[形式]
        float sceVu0InnerProduct(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1
        )
        
[引数]
        v0,v1		入力:ベクトル
        
[返り値]
        内積
        
[解説]
        ベクトルv0,v1の内積を求めます。
        

=========================================================================
sceVu0InterVector                                                  [関数]
=========================================================================
                                                       内挿ベクトルの生成
[形式]
        void sceVu0InterVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2,
        	float t
        )
        
[引数]
        v0		出力:ベクトル
        v1,v2		入力:ベクトル
        t		入力:内挿パラメータ
        
[返り値]
        なし
        
[解説]
        ベクトルv1,v2およびパラメータtから内挿ベクトルを求め、v0に返しま
        す。
        式で表現すると次のとおりです。
        v0 = v1*t + v2*(1-t)
        

=========================================================================
sceVu0InterVectorXYZ                                               [関数]
=========================================================================
                                                       内挿ベクトルの生成
[形式]
        void sceVu0InterVectorXYZ(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2,
        	float t
        )
        
[引数]
        v0		出力:ベクトル
        v1,v2		入力:ベクトル
        t		入力:内挿パラメータ
        
[返り値]
        なし
        
[解説]
        ベクトルv1,v2およびパラメータtから内挿ベクトルを求め、v0に返しま
        す。
        式で表現すると次のとおりです。
        v0 = v1*t + v2*(1-t)
        ただしベクトルv0のw要素は、そのままベクトルv0に返します。
        

=========================================================================
sceVu0InversMatrix                                                 [関数]
=========================================================================
                                                             逆行列の生成
[形式]
        void sceVu0InversMatrix(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス（正則行列）
        
[返り値]
        なし
        
[解説]
        マトリックスm1の逆行列を求めて、マトリックスm0に返します。
        m1は正則行列(回転または並行移動のマトリックス)でなければなりませ
        ん。
        

=========================================================================
sceVu0ITOF0Vector                                                  [関数]
=========================================================================
                                       小数部0bit固定小数点 -> 浮動小数点
[形式]
        void sceVu0ITOF0Vector(
        	sceVu0FVECTOR v0,
        	sceVu0IVECTOR v1
        );
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        小数部0bitの固定小数点ベクトルv1の各要素を浮動小数点に変換し、v0
        に返します。
        

=========================================================================
sceVu0ITOF4Vector                                                  [関数]
=========================================================================
                                       小数部4bit固定小数点 -> 浮動小数点
[形式]
        void sceVu0ITOF4Vector(
        	sceVu0FVECTOR v0,
        	sceVu0IVECTOR v1
        );
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        小数部4bitの固定小数点ベクトルv1の各要素を浮動小数点に変換し、v0
        に返します。
        

=========================================================================
sceVu0LightColorMatrix                                             [関数]
=========================================================================
                                                   ライトカラー行列の生成
[形式]
        void sceVu0LightColorMatrix(
        	sceVu0FMATRIX m,
        	sceVu0FVECTOR c0,
        	sceVu0FVECTOR c1,
        	sceVu0FVECTOR c2,
        	sceVu0FVECTOR a
        );
        
[引数]
        m		出力:マトリックス
        c0		入力:ベクトル(光源色0)
        c1		入力:ベクトル(光源色1)
        c2		入力:ベクトル(光源色2)
        a		入力:ベクトル(アンビエント)
        
[返り値]
        なし
        
[解説]
        光源色c0,c1,c2と環境色aからライトカラー行列を求め、mに返します。
        

=========================================================================
sceVu0MulMatrix                                                    [関数]
=========================================================================
                                                         マトリックスの積
[形式]
        void sceVu0MulMatrix(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1,
        	sceVu0FMATRIX m2
        )
        
[引数]
        m0		出力:マトリックス
        m1,m2		入力:マトリックス
        
[返り値]
        なし
        
[解説]
        マトリックスm1にマトリックスm2を右から乗算し、結果をm0に返します。
        式で表現すると次のとおりです。
        m0=m1*m2
        

=========================================================================
sceVu0MulVector                                                    [関数]
=========================================================================
                                                     4並列積算 (MUL/xyzw)
[形式]
        void sceVu0MulVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2
        )
        
[引数]
        v0		出力:ベクトル
        v1,v2		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1の各要素とベクトルv2の各要素をそれぞれ乗算し、結果をv0
        に返します。
        

=========================================================================
sceVu0Normalize                                                    [関数]
=========================================================================
                                                         ベクトルの正規化
[形式]
        void sceVu0Normalize(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1
        )
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1を正規化してv0に返します。
        

=========================================================================
sceVu0NormalLightMatrix                                            [関数]
=========================================================================
                                                 ノーマルライト行列の生成
[形式]
        void sceVu0NormalLightMatrix(
        	sceVu0FMATRIX m,
        	sceVu0FVECTOR l0,
        	sceVu0FVECTOR l1,
        	sceVu0FVECTOR l2
        );
        
[引数]
        m		出力:マトリックス
        l0		入力:ベクトル(光源0の方向)
        l1		入力:ベクトル(光源1の方向)
        l2		入力:ベクトル(光源2の方向)
        
[返り値]
        なし
        
[解説]
        光源l0、光源l1、光源l2からノーマルライト行列を求め、mに返します。
        

=========================================================================
sceVu0OuterProduct                                                 [関数]
=========================================================================
                                                           ベクトルの外積
[形式]
        void sceVu0OuterProduct(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2
        )
        
[引数]
        v0		出力:ベクトル
        v1,v2		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1,v2の外積を求めてv0に返します。
        

=========================================================================
sceVu0RotMatrix                                                    [関数]
=========================================================================
                                                               行列の回転
[形式]
        void sceVu0RotMatrix(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1,
        	sceVu0FVECTOR rot
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        rot		入力:x,y,z軸の回転角(有効範囲:-π〜π)
        
[返り値]
        なし
        
[解説]
        Z軸を中心とする回転マトリックスをrot[2]から、Y軸を中心とする回転
        マトリックスをrot[1]から、X軸を中心とする回転マトリックスをrot[0]
        からそれぞれ求め、順にマトリックスm1に左側から乗算して、その結果
        をマトリックスm0に返します。
        

=========================================================================
sceVu0RotMatrixX                                                   [関数]
=========================================================================
                                                      X軸を中心とする回転
[形式]
        void sceVu0RotMatrixX(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1,
        	float rx
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        rx		入力:回転角(有効範囲:-π〜π)
        
[返り値]
        なし
        
[解説]
        X軸を中心とする回転マトリックスを指定された回転角rxから求め、マト
        リックスm1に左側から乗算して、その結果をマトリックスm0に返します。
        

=========================================================================
sceVu0RotMatrixY                                                   [関数]
=========================================================================
                                                      Y軸を中心とする回転
[形式]
        void sceVu0RotMatrixY(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1,
        	float ry
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        ry		入力:回転角(有効範囲:-π〜π)
        
[返り値]
        なし
        
[解説]
        Y軸を中心とする回転マトリックスを指定された回転角ryから求め、マト
        リックスm1に左側から乗算して、その結果をマトリックスm0に返します。
        

=========================================================================
sceVu0RotMatrixZ                                                   [関数]
=========================================================================
                                                      Z軸を中心とする回転
[形式]
        void sceVu0RotMatrixZ(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1,
        	float rz
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        rz		入力:回転角(有効範囲:-π〜π)
        
[返り値]
        なし
        
[解説]
        Z軸を中心とする回転マトリックスを指定された回転角rzから求め、マト
        リックスm1に左側から乗算して、その結果をマトリックスm0に返します。
        

=========================================================================
sceVu0RotTransPers                                                 [関数]
=========================================================================
                                                                 透視変換
[形式]
        void sceVu0RotTransPers(
        	sceVu0IVECTOR v0,
        	sceVu0FMATRIX m0,
        	sceVu0FVECTOR v1,
        	int mode
        );
        
[引数]
        v0		出力:スクリーン座標を表すベクトル
        m0		入力:透視変換マトリックス
        v1		入力:頂点を表すベクトル
        mode		入力:出力座標値v0[2],v0[3]のフォーマット指定
        		0: 小数部4bitの固定小数点
        		1: 小数部0bitの固定小数点
        
[返り値]
        なし
        
[解説]
        ベクトルv1で与えられた頂点を、マトリックスm0によってスクリーン座
        標に透視変換し、ベクトルv0に返します。
        出力されるv0[0],v0[1]の数値フォーマットは小数部4bitの32bit符号付
        き固定小数点数です。v0[2],v0[3]の数値フォーマットはmodeの指定に応
        じて変わり、mode=0のときは小数部4bitの32bit符号なし固定小数点、mo
        de=1のときは小数部0bitの32bit符号なし固定小数点となります。GIFのP
        ACKEDモードでXYZF2,XYZF3を用いる場合には、mode=0を指定すると、PAC
        K時に整数部が切り出されるので有用です。
        

=========================================================================
sceVu0RotTransPersN                                                [関数]
=========================================================================
                                                                 透視変換
[形式]
        void sceVu0RotTransPersN(
        	sceVu0IVECTOR *v0,
        	sceVu0FMATRIX m0,
        	sceVu0FVECTOR *v1,
        	int n,
        	int mode
        );
        
[引数]
        v0		出力:スクリーン座標を表すベクトルのポインタ
        m0		入力:マトリックス
        v1		入力:頂点を表すベクトルのポインタ
        n		入力:頂点数
        mode		入力:出力座標値v0[2],v0[3]のフォーマット指定
        		0: 小数部4bitの固定小数点
        		1: 小数部0bitの固定小数点
        
[返り値]
        なし
        
[解説]
        v1とnとで指定されたn個の頂点を、マトリックスm0によってスクリーン
        座標に透視変換し、結果をv0が指す領域に返します。
        出力される*v0[0],*v0[1]の数値フォーマットは小数部4bitの32bit符号
        付き固定小数点数です。*v0[2],*v0[3]の数値フォーマットはmodeの指定
        に応じて変わり、mode=0のときは小数部4bitの32bit符号なし固定小数点、
        mode=1のときは小数部0bitの32bit符号なし固定小数点となります。GIF
        のPACKEDモードでXYZF2,XYZF3を用いる場合には、mode=0を指定すると、
        PACK時に整数部が切り出されるので有用です。

=========================================================================
sceVu0ScaleVector                                                  [関数]
=========================================================================
                                   スカラー値とベクトルの乗算 (MULx/xyzw)
[形式]
        void sceVu0ScaleVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	float t
        )
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        t		入力:スカラー
        
[返り値]
        なし
        
[解説]
        ベクトルv1にスカラーtを乗算し、結果をv0に返します。
        

=========================================================================
sceVu0ScaleVectorXYZ                                               [関数]
=========================================================================
                                    スカラー値とベクトルの乗算 (MULx/xyz)
[形式]
        void sceVu0ScaleVectorXYZ(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	float t
        )
        
[引数]
        v0		出力:ベクトル
        v1		入力:ベクトル
        t		入力:スカラー
        
[返り値]
        なし
        
[解説]
        ベクトルv1のx,y,z要素にスカラーtを乗算し、結果をベクトルv0に返し
        ます。
        ベクトルv0のw要素は、そのままベクトルv0に返します。
        

=========================================================================
sceVu0SubVector                                                    [関数]
=========================================================================
                                                     4並列減算 (SUB/xyzw)
[形式]
        void sceVu0SubVector(
        	sceVu0FVECTOR v0,
        	sceVu0FVECTOR v1,
        	sceVu0FVECTOR v2
        )
        
[引数]
        v0		出力:ベクトル
        v1,v2		入力:ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルv1の各要素からベクトルv2の各要素を各々減算し、結果をv0に
        返します。
        

=========================================================================
sceVu0TransMatrix                                                  [関数]
=========================================================================
                                                           行列の平行移動
[形式]
        void sceVu0TransMatrix(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1,
        	sceVu0FVECTOR tv
        );
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        tv		入力:移動ベクトル
        
[返り値]
        なし
        
[解説]
        ベクトルtvにしたがってマトリックスm1を平行移動し、m0に返します。
        

=========================================================================
sceVu0TransposeMatrix                                              [関数]
=========================================================================
                                                           転置行列の生成
[形式]
        void sceVu0TransposeMatrix(
        	sceVu0FMATRIX m0,
        	sceVu0FMATRIX m1
        )
        
[引数]
        m0		出力:マトリックス
        m1		入力:マトリックス
        
[返り値]
        なし
        
[解説]
        マトリックスm1の転置行列を求め、m0に返します。
        

=========================================================================
sceVu0UnitMatrix                                                   [関数]
=========================================================================
                                                           単位行列の生成
[形式]
        void sceVu0UnitMatrix(
        	sceVu0FMATRIX m0
        );
        
[引数]
        m0		出力:マトリックス
        
[返り値]
        なし
        
[解説]
        マトリックスm0に4x4の単位行列を返します。
        

=========================================================================
sceVu0ViewScreenMatrix                                             [関数]
=========================================================================
                                               ビュースクリーン行列の生成
[形式]
        void sceVu0ViewScreenMatrix(
        	sceVu0FMATRIX m,
        	float scrz,
        	float ax,
        	float ay,
        	float cx,
        	float cy,
        	float zmin,
        	float zmax,
        	float nearz,
        	float farz
        )
        
[引数]
        m		出力:マトリックス
        scrz		入力:(スクリーンまでの距離)
        ax		入力:(Ｘ方向アスペクト比)
        ay		入力:(Ｙ方向アスペクト比)
        cx		入力:(スクリーンの中心Ｘ座標)
        cy		入力:(スクリーンの中心Ｙ座標)
        zmin		入力:(Ｚバッファ最小値)
        zmax		入力:(Ｚバッファ最大値)
        nearz		入力:(ニアクリップ面のＺ)
        farz		入力:(ファークリップ面のＺ)
        
[返り値]
        なし
        
[解説]
        指定された各パラメータに従ってビュースクリーン行列を求め、mに返し
        ます。
