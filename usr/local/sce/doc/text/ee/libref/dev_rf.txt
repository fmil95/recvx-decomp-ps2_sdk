[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                      開発用デバッグ支援ライブラリ
                     =============================


 1 構造体
==========

=========================================================================
sceDevVif1Cnd                                                    [構造体]
=========================================================================
                                         VIF1の各レジスタをまとめた構造体
[構造]
        typedef struct sceDevVif1Cnd {
        	u_int   row[4];
        	u_int   col[4];
        	u_int   mask;
        	u_int   code;
        	u_int   stat;
        	u_short itop,itops;
        	u_short base,offset;
        	u_short top,tops;
        	u_short mark;
        	u_short num;
        	u_char  error;
        	u_char  cl,wl;
        	u_char  cmod;
        	u_char  pad;
        }
        
[メンバ]
        row[4]		VIF1_R[0-3]レジスタ
        col[4]		VIF1_C[0-3]レジスタ
        mask		VIF1_MASKレジスタ
        code		VIF1_CODEレジスタ
        stat		VIF1_STATレジスタ
        itop,itops	VIF1_ITOPレジスタ、VIF1_ITOPSレジスタ
        base,offset	VIF1_BASEレジスタ、VIF1_OFFSETレジスタ
        top,tops		VIF1_TOPレジスタ、VIF1_TOPSレジスタ
        mark		VIF1_MARKレジスタ
        num		VIF1_NUMレジスタ
        error		VIF1_ERRレジスタ
        cl,wl		VIF1_CYCLEレジスタ
        cmod		VIF1_MODEレジスタ
        pad		パディング
        
[解説]
        VIF1の各レジスタをまとめた構造体です。
        

=========================================================================
sceDevVif0Cnd                                                    [構造体]
=========================================================================
                                         VIF0の各レジスタをまとめた構造体
[構造]
        typedef struct sceDevVif0Cnd {
        	u_int   row[4];
        	u_int   col[4];
        	u_int   mask;
        	u_int   code;
        	u_int   stat;
        	u_short itop,itops;
        	u_short mark;
        	u_short num;
        	u_char	error;
        	u_char  cl,wl;
        	u_char  cmod;
        	u_char  pad;
        }
        
[メンバ]
        row[4]		VIF0_R[0-3]レジスタ
        col[4]		VIF0_C[0-3]レジスタ
        mask		VIF0_MASKレジスタ
        code		VIF0_CODEレジスタ
        stat		VIF0_STATレジスタ
        itop,itops	VIF0_ITOPレジスタ、VIF0_ITOPSレジスタ
        mark		VIF0_MARKレジスタ
        num		VIF0_NUMレジスタ
        error		VIF0_ERRレジスタ
        cl,wl		VIF0_CYCLEレジスタ
        cmod		VIF0_MODEレジスタ
        pad		パディング
        
[解説]
        VIF0の各レジスタをまとめた構造体です。
        

=========================================================================
sceDevGifCnd                                                     [構造体]
=========================================================================
                                          GIFの各レジスタをまとめた構造体
[構造]
        typedef struct sceDevGifCnd {
        	u_long128 tag;
        	u_int stat;
        	u_int count;
        	u_int p3count;
        	u_int p3tag;
        	u_int pad;
        }
        
[メンバ]
        tag		直近に処理されたGIFtag
        stat		GIF_STATレジスタ
        count		GIF_CNTレジスタ
        p3count		GIF_P3CNTレジスタ
        p3tag		GIF_P3TAGレジスタ
        pad		パディング
        
[解説]
        GIFの各レジスタをまとめた構造体です。
        

=========================================================================
sceDevVu1Cnd                                                     [構造体]
=========================================================================
                                          VU1の各レジスタをまとめた構造体
[構造]
        typedef struct sceDevVu1Cnd {
        	u_long128 vf[32];
        	u_int status;
        	u_int mac;
        	u_int clipping;
        	u_int r,i,q,p;
        	u_short vi[16];
        }
        
[メンバ]
        vf[32]		浮動小数点レジスタVF00〜VF31
        status		statusフラグ
        mac		MACフラグ
        clipping		clippingフラグ
        r,i,q,p		Rレジスタ、Iレジスタ、Qレジスタ、Pレジスタ
        vi[16]		整数レジスタVI00〜VI15
        
[解説]
        VU1の各レジスタをまとめた構造体です。
        

=========================================================================
sceDevVu0Cnd                                                     [構造体]
=========================================================================
                                          VU0の各レジスタをまとめた構造体
[構造]
        typedef struct sceDevVu0Cnd {
        	u_long128 vf[32];
        	u_int status;
        	u_int mac;
        	u_int clipping;
        	u_int r,i,q;
        	u_short vi[16];
        }
        
[メンバ]
        vf[32]		浮動小数点レジスタVF00〜VF31
        status		statusフラグ
        mac		MACフラグ
        clipping		clippingフラグ
        r,i,q		Rレジスタ、Iレジスタ、Qレジスタ
        vi[16]		整数レジスタVI00〜VI15
        
[解説]
        VU0の各レジスタをまとめた構造体です。
        

 2 VIF1制御関数
================


=========================================================================
sceDevVif1Reset                                                    [関数]
=========================================================================
                                                           VIF1のリセット
[形式]
        void  sceDevVif1Reset( void )
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        VIF1全体をリセットします。
        VIF1-FIFOを含むエラーマスク(VIF1_ERRレジスタ)は、
        	iビット割り込み有効
        	DMAtag Mismatchエラー無視
        	VIFcodeエラー無視
        と設定されます。
        

=========================================================================
sceDevVif1Pause                                                    [関数]
=========================================================================
                                                           VIF1の一時停止
[形式]
        int sceDevVif1Pause(
        	int mode
        )
        
[引数]
        mode	0 : 即時停止(Force Break)
        	1 : 処理中のVIFcodeが終了してから停止
        
[返り値]
        0 : 停止失敗
        1 : 停止成功
        
[解説]
        VIF1を停止します。
        

=========================================================================
sceDevVif1Continue                                                 [関数]
=========================================================================
                                                           VIF1の停止解除
[形式]
        int sceDevVif1Continue( void )
        
[引数]
        なし
        
[返り値]
        0: 処理再開失敗
        1: 処理再開成功
        
[解説]
        sceDevVif1Pauseによって停止したVIF1の処理を再開します。
        

=========================================================================
sceDevVif1PutErr                                                   [関数]
=========================================================================
                                                       エラーマスクの設定
[形式]
        u_int sceDevVif1PutErr(
        	int interrupt,
        	int miss1,
        	int miss2
        )
        
[引数]
        interrupt	0 : iビット割り込み有効
        		1 : iビット割り込み無効
        miss1		0 : DMAtag Mismatch エラーでストール
        		1 : DMAtag Mismatch エラーを無視
        miss2		0 : VIFcode エラーでストール
        		1 : VIFcode エラーを無視
        
[返り値]
        VIF1_ERRレジスタに設定したビットパターン
        
[解説]
        VIF1のエラーマスクを設定します。
        

=========================================================================
sceDevVif1GetErr                                                   [関数]
=========================================================================
                                                       エラーマスクの取得
[形式]
        u_int sceDevVif1GetErr( void )
        
[引数]
        なし
        
[返り値]
        bit0		0 : 割り込みUNMASK
        		1 : 割り込みMASK
        bit1		0 : DMAtag Mismatch エラーでストール
        		1 : DMAtag Mismatch エラーを無視
        bit2		0 : VIFcode エラーでストール
        		1 : VIFcode エラーを無視
        
[解説]
        VIF１のエラーマスクを取得します。
        

=========================================================================
sceDevVif1GetCnd                                                   [関数]
=========================================================================
                                                         全レジスタの取得
[形式]
        int sceDevVif1GetCnd(
        	sceDevVif1Cnd *cnd
        )
        
[引数]
        cnd	取得した状態の入る構造体
        
[返り値]
        0: 状態を取得できなかった
        1: 状態を取得できた
        
[解説]
        VIF1の状態を調べます。
        VIFをSTALLさせた状態か、IDLEの状態でのみ、状態を取得可能です。
        

=========================================================================
sceDevVif1PutFifo                                                  [関数]
=========================================================================
                                                   FIFOへのデータ書き込み
[形式]
        int sceDevVif1PutFifo(
        	u_long128 *addr,
        	int n
        )
        
[引数]
        addr		書き込むデータの先頭番地
        n		書き込むデータ数(qword単位)
        
[返り値]
        書き込めたデータ数
        
[解説]
        VIF1-FIFOにデータをI/Oで書き込みます。
        

=========================================================================
sceDevVif1GetFifo                                                  [関数]
=========================================================================
                                                 FIFOからのデータ読み出し
[形式]
        int sceDevVif1GetFifo(
        	u_long128 *addr,
        	int n
        )
        
[引数]
        addr		読み出したデータを格納するアドレス
        n		読み出すデータ数(qword単位)
        
[返り値]
        読み出したデータ数
        
[解説]
        VIF1-FIFOからデータをI/Oで読み出します。
        

 3 VIF0の制御関数
==================


=========================================================================
sceDevVif0Reset                                                    [関数]
=========================================================================
                                                           VIF0のリセット
[形式]
        void sceDevVif0Reset( void )
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        VIF0-FIFOを含むVIF0全体をリセットします。
        エラーマスク(VIF0_ERRレジスタ)は、
        	iビット割り込み有効
        	DMAtag Mismatchエラー無視
        	VIFcodeエラー無視
        というように設定されます。
        

=========================================================================
sceDevVif0Pause                                                    [関数]
=========================================================================
                                                           VIF0の一時停止
[形式]
        int sceDevVif0Pause(
        	int mode
        )
        
[引数]
        mode	0 : 即時停止(ForceBreak)
        	1 : 処理中のVIFcodeが終了してから停止(Stop)
        
[返り値]
        0 : 停止失敗
        1 : 停止成功
        
[解説]
        VIF0を停止します。
        

=========================================================================
sceDevVif0Continue                                                 [関数]
=========================================================================
                                                           VIF0の停止解除
[形式]
        int sceDevVif0Continue( void )
        
[引数]
        なし
[返り値]
        0 : 処理再開失敗
        1 : 処理再開成功
        
[解説]
        sceDevVif0Pauseによって停止したVIF0の処理を再開します。
        

=========================================================================
sceDevVif0PutErr                                                   [関数]
=========================================================================
                                                       エラーマスクの設定
[形式]
        u_int sceDevVif0PutErr(
        	int interrupt,
        	int miss1,
        	int miss2
        )
        
[引数]
        interrupt	0 : iビット割り込み有効
        		1 : iビット割り込み無効
        miss1		0 : DMAtag Mismatch エラーでストール
        		1 : DMAtag Mismatch エラーを無視
        miss2		0 : VIFcodeエラーでストール
        		1 : VIFcodeエラーを無視
        
[返り値]
        設定したビットパターン
        
[解説]
        VIF0のエラーマスクを設定します。
        

=========================================================================
sceDevVif0GetErr                                                   [関数]
=========================================================================
                                                       エラーマスクの取得
[形式]
        u_int sceDevVif0GetErr( void )
        
[引数]
        なし
        
[返り値]
        VIF1_ERRレジスタの値
        
[解説]
        VIF0のエラーマスクを取得します。
        

=========================================================================
sceDevVif0GetCnd                                                   [関数]
=========================================================================
                                                         全レジスタの取得
[形式]
        int sceDevVif0GetCnd(
        	sceDevVif0Cnd *cnd
        )
        
[引数]
        cnd	取得した状態の入る構造体
        
[返り値]
        0 : 状態を取得できなかった
        1 : 状態を取得できた
        
[解説]
        VIF0の状態を調べます。
        VIFをSTALLさせた状態か、IDLEの状態でのみ状態を取得可能です。
        

=========================================================================
sceDevVif0PutFifo                                                  [関数]
=========================================================================
                                                   FIFOへのデータ書き込み
[形式]
        int sceDevVif0PutFifo(
        	u_long128 *addr,
        	int n
        )
        
[引数]
        addr		書き込むデータの先頭番地
        n		書き込むデータ数(qword単位)
        
[返り値]
        書き込めたデータ数
        
[解説]
        VIF0-FIFOにデータをI/Oで書き込みます。
        

 4 GIFの制御
=============


=========================================================================
sceDevGifReset                                                [GIFの制御]
=========================================================================
                                                            GIFのリセット
[形式]
        void sceDevGifReset( void )
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        GIF全体をリセットします。
        

=========================================================================
sceDevGifPause                                                [GIFの制御]
=========================================================================
                                                            GIFの一時停止
[形式]
        int sceDevGifPause( void )
        
[引数]
        なし
        
[返り値]
        0 : 一時停止 失敗
        1 : 一時停止 成功
        
[解説]
        GIFを一時停止させます。
        

=========================================================================
sceDevGifContinue                                             [GIFの制御]
=========================================================================
                                                            GIFの処理再開
[形式]
        int sceDevGifContinue( void )
        
[引数]
        なし
        
[返り値]
        0 : 再開失敗
        1 : 再開成功
        
[解説]
        sceDevGifPauseによって停止したGIFの処理を再開させます。
        

=========================================================================
sceDevGifPutImtMode                                           [GIFの制御]
=========================================================================
                                                    PATH3転送モードの設定
[形式]
        void  sceDevGifPutImtMode(
        	int mode
        )
        
[引数]
        mode	PATH3転送モード
        	0 : 連続転送モード(PATH3でのイメージデータ転送を連続して行う)
        	1 : 断続転送モード(PATH3でのイメージデータ転送を8qwordごとに区切
        り、
         	   他のデータ転送リクエストがあれば割り込ませて転送する)
        
[返り値]
        なし
        
[解説]
        PATH3転送モードの設定を行います。
        

=========================================================================
sceDevGifGetImtMode                                           [GIFの制御]
=========================================================================
                                                    PATH3転送モードの取得
[形式]
        u_int sceDevGifGetImtMode( void )
        
[引数]
        なし
        
[返り値]
        0 : 連続転送モード(PATH3でのイメージデータ転送を連続して行う)
        1 : 断続転送モード(PATH3でのイメージデータ転送を8qwordごとに区切
        り、
           他のデータ転送リクエストがあれば割り込ませて転送する)
        
[解説]
        PATH3転送モードを取得します。
        

=========================================================================
sceDevGifPutP3msk                                             [GIFの制御]
=========================================================================
                                                            PATH3のマスク
[形式]
        int sceDevGifPutP3msk(
        	int enable
        )
        
[引数]
        enable	PATH3マスクの設定値
        	0 : unmask
        	1 : mask
        
[返り値]
        0 : 設定失敗
        1 : 設定成功
        
[解説]
        PATH3をマスクします。
        GIF/VIF1がIDLEの時のみ設定可能です。
        

=========================================================================
sceDevGifGetP3msk                                             [GIFの制御]
=========================================================================
                                                    PATH3マスク状態の取得
[形式]
        int sceDevGifGetP3msk( void )
        
[引数]
        なし
        
[返り値]
        0 : PATH3 unmask
        1 : PATH3 mask
        
[解説]
        PATH3のマスク状態を取得します。
        

=========================================================================
sceDevGifGetCnd                                               [GIFの制御]
=========================================================================
                                                         全レジスタの取得
[形式]
        int sceDevGifGetCnd(
        	sceDevGifCnd *cnd
        )
        
[引数]
        cnd	取得した状態の入る構造体
        
[返り値]
        0 : 状態を取得できなかった
        1 : 状態を取得できた
        
[解説]
        GIFの状態を調べます。
        GIFをPAUSEさせた状態か、IDLEの状態でのみ状態を取得可能です。
        

=========================================================================
sceDevGifPutFifo                                              [GIFの制御]
=========================================================================
                                                   FIFOへのデータ書き込み
[形式]
        int sceDevGifPutFifo(
        	u_long128 *addr,
        	int n
        )
        
[引数]
        addr		書き込むデータの先頭番地
        n		書き込むデータ数(qword単位)
        
[返り値]
        書き込めたデータ数
        
[解説]
        GIF-FIFOにデータをI/Oで書き込みます。
        

 5 VU1の制御関数
=================


=========================================================================
sceDevVu1Reset                                                     [関数]
=========================================================================
                                                            VU1のリセット
[形式]
        void sceDevVu1Reset( void )
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        VU1をリセットします。
        

=========================================================================
sceDevVu1Pause                                                     [関数]
=========================================================================
                                                         VU1のForce Break
[形式]
        int sceDevVu1Pause( void )
        
[引数]
        なし
        
[返り値]
        0 : 中断失敗（すでにデバッグ停止中）
        1 : 中断成功
        
[解説]
        VU1をForce Breakします。
        

=========================================================================
sceDevVu1Continue                                                  [関数]
=========================================================================
                                                            VU1の処理再開
[形式]
        int sceDevVu1Continue( void )
        
[引数]
        なし
        
[返り値]
        0 : 再開失敗
        1 : 再開成功
        
[解説]
        sceDevVu1Pauseによって停止したVU1の処理を再開させます。
        

=========================================================================
sceDevVu1PutDbit                                                   [関数]
=========================================================================
                                                       デバッグ機能の設定
[形式]
        void sceDevVu1PutDbit(
        	int dbit
        )
        
[引数]
        dbit		0 : Dbit disable
        		1 : Dbit enable
        
[返り値]
        なし
        
[解説]
        VU1のDbitによる停止機能をEnable/Disableします。
        

=========================================================================
sceDevVu1PutTbit                                                   [関数]
=========================================================================
                                                       デバッグ機能の設定
[形式]
        void sceDevVu1PutTbit(
        	int tbit
        )
        
[引数]
        tbit		0 : Tbit disable
        		1 : Tbit enable
        
[返り値]
        なし
        
[解説]
        VU1のTbitによる停止機能をEnable / Disableします。
        

=========================================================================
sceDevVu1GetDbit                                                   [関数]
=========================================================================
                                                   デバッグ機能の状態取得
[形式]
        int sceDevVu1GetDbit( void )
        
[引数]
        なし
        
[返り値]
        0 : disable
        1 : enable
        
[解説]
        VU1の Dbitによる停止機能の設定状態を取得します。
        

=========================================================================
sceDevVu1GetTbit                                                   [関数]
=========================================================================
                                                   デバッグ機能の状態取得
[形式]
        int sceDevVu1GetTbit( void )
        
[引数]
        なし
        
[返り値]
        0 : disable
        1 : enable
        
[解説]
        VU1の Tbitによる停止機能の設定状態を取得します。
        

=========================================================================
sceDevVu1Exec                                                      [関数]
=========================================================================
                                               マイクロプログラムの再実行
[形式]
        void sceDevVu1Exec(
        	u_short addr
        )
        
[引数]
        addr		再実行するアドレス
        
[返り値]
        なし
        
[解説]
        VU1をaddrから再実行させます。
        

=========================================================================
sceDevVu1GetTpc                                                    [関数]
=========================================================================
                                                    TPCレジスタの読み出し
[形式]
        u_short  sceDevVu1GetTpc( void )
        
[引数]
        なし
        
[返り値]
        読み出したデータ
        
[解説]
        VU1のTPCレジスタを読み出します。
        

=========================================================================
sceDevVu1GetCnd                                                    [関数]
=========================================================================
                                                     全レジスタの読み出し
[形式]
        int  sceDevVu1GetCnd(
        	sceDevVu1Cnd *cnd
        )
        
[引数]
        cnd	読み出したデータを格納する構造体のアドレス
        
[返り値]
        0 : 取得失敗
        1 : 取得成功
        
[解説]
        VU1の各レジスタの内容を読み出します。
        

=========================================================================
sceDevVu1PutCnd                                                    [関数]
=========================================================================
                                                   全レジスタへの書き込み
[形式]
        int  sceDevVu1PutCnd(
        	sceDevVu1Cnd *cnd
        )
        
[引数]
        cnd	書き込むデータを与える構造体のアドレス
        
[返り値]
        0 : 書き込み失敗
        1 : 書き込み成功
        
[解説]
        VU1の各レジスタにデータを書き込みます。
        

 6 VU0の制御関数
=================


=========================================================================
sceDevVu0Reset                                                     [関数]
=========================================================================
                                                            VU0のリセット
[形式]
        void  sceDevVu0Reset( void )
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        VU0をリセットします。
        

=========================================================================
sceDevVu0Pause                                                     [関数]
=========================================================================
                                                         VU0のForce Break
[形式]
        int  sceDevVu0Pause( void )
        
[引数]
        なし
        
[返り値]
        0 : 中断失敗（すでにデバッグ停止中）
        1 : 中断成功
        
[解説]
        VU0をForce Breakします。
        

=========================================================================
sceDevVu0Continue                                                  [関数]
=========================================================================
                                                            VU0の処理再開
[形式]
        int  sceDevVu0Continue( void )
        
[引数]
        なし
        
[返り値]
        0 : 再開失敗
        1 : 再開成功
        
[解説]
        デバッグ停止またはsceDevVu0Pauseによる停止から復帰し、VU0の処理を
        再開させます。
        

=========================================================================
sceDevVu0PutDbit                                                   [関数]
=========================================================================
                                                       デバッグ機能の設定
[形式]
        void  sceDevVu0PutDbit(
        	int dbit,
        )
        
[引数]
        dbit	0 : Dbit disable
        	1 : Dbit enable
        
[返り値]
        なし
        
[解説]
        VU0のDbitによる停止機能をEnable / Disableします。
        

=========================================================================
sceDevVu0PutTbit                                                   [関数]
=========================================================================
                                                       デバッグ機能の設定
[形式]
        void  sceDevVu0PutTbit(
        	int tbit,
        )
        
[引数]
        tbit	0 : Tbit disable
        	1 : Tbit enable
        
[返り値]
        なし
        
[解説]
        VU0のTbitによる停止機能をEnable / Disableします。
        

=========================================================================
sceDevVu0GetDbit                                                   [関数]
=========================================================================
                                                   デバッグ機能の状態取得
[形式]
        int  sceDevVu0GetDbit( void )
        
[引数]
        なし
        
[返り値]
        0 : disable
        1 : enable
        
[解説]
        VU0のDbitによる停止機能の設定状態を取得します。
        

=========================================================================
sceDevVu0GetTbit                                                   [関数]
=========================================================================
                                                   デバッグ機能の状態取得
[形式]
        int  sceDevVu0GetTbit( void )
        
[引数]
        なし
        
[返り値]
        0 : disable
        1 : enable
        
[解説]
        VU0のTbitによる停止機能の設定状態を取得します。
        

=========================================================================
sceDevVu0Exec                                                      [関数]
=========================================================================
                                               マイクロプログラムの再実行
[形式]
        void  sceDevVu0Exec(
        	u_short addr
        )
        
[引数]
        addr	再実行するアドレス
        
[返り値]
        なし
        
[解説]
        VU0をaddrから再実行させます。
        

=========================================================================
sceDevVu0GetTpc                                                    [関数]
=========================================================================
                                                    TPCレジスタの読み出し
[形式]
        u_short  sceDevVu0GetTpc( void )
        
[引数]
        なし
        
[返り値]
        読み出したデータ
        
[解説]
        VU0のTPCレジスタを読み出します。
        

=========================================================================
sceDevVu0GetCnd                                                    [関数]
=========================================================================
                                                     全レジスタの読み出し
[形式]
        int  sceDevVu0GetCnd(
        	sceDevVu0Cnd *cnd
        )
        
[引数]
        cnd	読み出したデータを格納する構造体のアドレス
        
[返り値]
        0 : 取得失敗
        1 : 取得成功
        
[解説]
        VU0の各レジスタの内容を読み出します。
        

=========================================================================
sceDevVu0PutCnd                                                    [関数]
=========================================================================
                                                   全レジスタへの書き込み
[形式]
        int sceDevVu0PutCnd(
        	sceDevVu0Cnd *cnd
        )
        
[引数]
        cnd	書き込むデータを与える構造体のアドレス
        
[返り値]
        0 : 書き込み失敗
        1 : 書き込み成功
        
[解説]
        VU0の各レジスタにデータを書き込みます。
        

 7 擬似コンソールの制御関数
============================


=========================================================================
sceDevConsInit                                                     [関数]
=========================================================================
                                             コンソールライブラリを初期化
[形式]
        void  sceDevConsInit( void );
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        コンソールライブラリの内部変数を初期化します。１度だけ呼び出して
        ください。
        

=========================================================================
sceDevConsOpen                                                     [関数]
=========================================================================
                                                     コンソールをオープン
[形式]
        int  sceDevConsOpen(
        	u_int gs_x,
        	u_int gs_y,
        	u_int chr_w,
        	u_int chr_h
        );
        
[引数]
        gs_x	コンソールの描画X座標（GSのプリミティブ座標）
        gs_y	コンソールの描画Y座標（GSのプリミティブ座標）
        chr_w	コンソールの幅
        chr_h	コンソールの高さ
        
[返り値]
        コンソール識別子
        
[解説]
        コンソールをオープンします。同時にオープンできるコンソールは１つ
        だけで、メモリ確保などは行われません。
        chr_w, chr_hで指定できる最大サイズは80×40キャラクタです。
        

=========================================================================
sceDevConsClose                                                    [関数]
=========================================================================
                                                     コンソールをクローズ
[形式]
        void  sceDevConsClose(
        	int cd
        );
        
[引数]
        cd	コンソール識別子
        
[返り値]
        なし
        
[解説]
        コンソールをクローズします。
        

=========================================================================
sceDevConsRef                                                      [関数]
=========================================================================
                                   コンソールのイメージをパケットにつける
[形式]
        void sceDevConsRef(
        	int cd,
        	sceGifPacket* pPacket
        );
        
[引数]
        cd	コンソール識別子
        pPacket	初期化済みGIFパケット構造体
        
[返り値]
        なし
        
[解説]
        sceDevConsPrintf()などを用いて出力したコンソールのイメージを、GIF
        パケット中に構築します。１文字あたり約112qword必要です。
        

=========================================================================
sceDevConsDraw                                                     [関数]
=========================================================================
                                               コンソールのイメージを描画
[形式]
        void  sceDevConsDraw(
        	int cd
        );
        
[引数]
        cd	コンソール識別子
        
[返り値]
        なし
        
[解説]
        sceDevConsPrintf()などを用いて出力したコンソールのイメージを描画
        します。
        内部でパケットを構築しながら直接DMAキックするため、描画が終るまで
        処理は戻りません。

=========================================================================
sceDevConsDrawS                                                    [関数]
=========================================================================
                       コンソールのイメージを描画（スクラッチパッド使用）
[形式]
        void  sceDevConsDrawS(
        	int cd
        );
        
[引数]
        cd	コンソール識別子
        
[返り値]
        なし
        
[解説]
        sceDevConsPrintf()などを用いて出力したコンソールのイメージを描画
        します。
        内部でパケットを構築しながら直接DMAキックするため、描画が終るまで
        処理は戻りません。
        ワークエリアとしてスクラッチパッドを使用します。
        

=========================================================================
sceDevConsClear                                                    [関数]
=========================================================================
                                                         コンソールクリア
[形式]
        void  sceDevConsClear(
        	int cd
        );
        
[引数]
        cd	コンソール識別子
        
[返り値]
        なし
        
[解説]
        コンソールをクリアします。
        

=========================================================================
sceDevConsPrintf                                                   [関数]
=========================================================================
                                                     コンソールへ文字出力
[形式]
        u_int  sceDevConsPrintf(
        	int cd,
        	const char *str,
        	...
        );
        
[引数]
        cd	コンソール識別子
        str	フォーマット指定文字列
        ...	パラメーター
        
[返り値]
        出力した文字数
        
[解説]
        コンソールへ文字列を出力します。
        

=========================================================================
sceDevConsSetColor                                                 [関数]
=========================================================================
                                           フォントのカラーテーブルの変更
[形式]
        void  sceDevConsSetColor(
        	int cd,
        	u_char c,
        	u_char r,
        	u_char g,
        	u_char b
        );
        
[引数]
        cd	コンソール識別子
        c	カラーコード（0〜7）
        r	赤（0〜255）
        g	緑（0〜255）
        b	青（0〜255）
        
[返り値]
        なし
        
[解説]
        コンソールに出力する文字の色テーブルを変更します。
        デフォルトの色テーブルは下記のとおりです。
        	0, 0x00, 0x00, 0x00
        	1, 0x00, 0x00, 0xff
        	2, 0xff, 0x00, 0x00
        	3, 0xff, 0x00, 0xff
        	4, 0x00, 0xff, 0x00
        	5, 0x00, 0xff, 0xff
        	6, 0xff, 0xff, 0x00
        	7, 0xff, 0xff, 0xff
        

=========================================================================
sceDevConsLocate                                                   [関数]
=========================================================================
                                                       カーソル位置の変更
[形式]
        void  sceDevConsLocate(
        	int cd,
        	u_int lx,
        	u_int ly
        );
        
[引数]
        cd	コンソール識別子
        lx	カーソルX座標
        ly	カーソルY座標
        
[返り値]
        なし
        
[解説]
        コンソール上のカーソル位置を変更します。
        

=========================================================================
sceDevConsPut                                                      [関数]
=========================================================================
                                                 カーソル位置に１文字出力
[形式]
        void  sceDevConsPut(
        	int cd,
        	u_char c,
        	u_char a
        );
        
[引数]
        cd	コンソール識別子
        c	文字コード
        a	アトリビュート（色コード）
        
[返り値]
        なし
        
[解説]
        コンソール上のカーソル位置に１文字出力します。
        

=========================================================================
sceDevConsGet                                                      [関数]
=========================================================================
                                               カーソル位置から１文字取得
[形式]
        u_short  sceDevConsGet(
        	int cd
        );
        
[引数]
        cd	コンソール識別子
        
[返り値]
        下位８ビットに文字コード
        上位８ビットにアトリビュート
        
[解説]
        カーソル位置の文字コードとアトリビュート情報を取得します。
        

=========================================================================
sceDevConsAttribute                                                [関数]
=========================================================================
                                                   アトリビュート(色)変更
[形式]
        void  sceDevConsAttribute(
        	int cd,
        	u_char col
        );
        
[引数]
        cd	コンソール識別子
        col	アトリビュート（色コード）
        
[返り値]
        なし
        
[解説]
        コンソールへ出力する文字のデフォルトのアトリビュートを変更します。
        

=========================================================================
sceDevConsClearBox                                                 [関数]
=========================================================================
                                                           矩形領域クリア
[形式]
        void  sceDevConsClearBox(
        	int cd,
        	int x,
        	int y,
        	u_int w,
        	u_int h
        );
        
[引数]
        cd	コンソール識別子
        x	描画X座標
        y	描画Y座標
        w	幅
        h	高さ
        
[返り値]
        なし
        
[解説]
        コンソール上の矩形領域をクリア、つまりスペースで埋めつくします。
        

=========================================================================
sceDevConsMove                                                     [関数]
=========================================================================
                                                             矩形領域移動
[形式]
        void  sceDevConsMove(
        	int cd,
        	int dx,
        	int dy,
        	int sx,
        	int sy,
        	u_int w,
        	u_int h
        );
        
[引数]
        cd	コンソール識別子
        dx	転送先X座標
        dy	転送先Y座標
        sx	転送元X座標
        sy	転送元Y座標
        w	転送幅
        h	転送高さ
        
[返り値]
        なし
        
[解説]
        コンソール上の指定矩形領域を指定座標へ転送します。
        転送元と転送先が重なっていた場合の動作は不定です。
        

=========================================================================
sceDevConsRollup                                                   [関数]
=========================================================================
                                                             ロールアップ
[形式]
        void  sceDevConsRollup(
        	int cd,
        	u_int line
        );
        
[引数]
        cd	コンソール識別子
        line	ライン数
        
[返り値]
        なし
        
[解説]
        コンソールを指定ライン数だけロールアップします。
        

=========================================================================
sceDevConsMessage                                                  [関数]
=========================================================================
                                                     枠つきメッセージ表示
[形式]
        void  sceDevConsMessage(
        	int cd,
        	int x,
        	int y,
        	char const* str
        );
        
[引数]
        cd	コンソール識別子または-1
        x	文字の描画X座標またはフレームの描画GS座標
        y	文字の描画Y座標またはフレームの描画GS座標
        str	文字列
        
[返り値]
        なし
        
[解説]
        cdが指定された場合、指定されたコンソールの指定位置に文字列の左上
        がくるように描画されます。
        cdが-1の場合は、x, yはsceDevConsOpen()と同じくGSのプリミティブ座
        標となり、その位置に文字列を囲むフレームの左上がくるように描画さ
        れます。
        

=========================================================================
sceDevConsFrame                                                    [関数]
=========================================================================
                                                             フレーム描画
[形式]
        void  sceDevConsFrame(
        	int cd,
        	int x,
        	int y,
        	u_int w,
        	u_int h
        );
        
[引数]
        cd	コンソール識別子
        x	X座標
        y	Y座標
        w	幅
        h	高さ
        
[返り値]
        なし
        
[解説]
        コンソールの指定位置に指定サイズの矩形を描画します。
        
