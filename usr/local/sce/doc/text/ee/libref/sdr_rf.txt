[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                       低レベルサウンドライブラリ
                      ===========================

    

 1 関数
========

=========================================================================
sceSdCallBack                                                      [関数]
=========================================================================
                               ノンブロック実行時の終了コールバックの設定
[形式]
        sceSifEndFunc sceSdCallBack(
        	sceSifEndFunc end_func
        );
        
[引数]
        end_func		終了コールバック関数のアドレス
        
[返り値]
        直前に設定されていた終了コールバック関数のアドレス
        
[解説]
        sceSdRemote()をノンブロック実行するときのコールバック関数を設定し
        ます。コールバック関
        数は割り込みモードで実行されます。ブロック実行の場合、またはend_f
        uncにNULLを指定
        した場合は、コールバック関数は実行されません。初期値はNULLです。
        
        ノンブロック処理はEEの効率化のために行なうわけですが、EEに終了コ
        ールバックをかける
        ことは、コンテキストスイッチを起こすということであり、これもまた
        処理効率低下につながり
        ます。最も効率が良いのは、ノンブロック処理して、IOP側の終了はコー
        ルバックではなくポ
        ーリングで確認することです。バッチコマンドのSD_WRITE_EEやSD_RETUR
        N_EEが利用
        できます。(libsdを参照） これらはIOP側からSIF DMA転送をするだけな
        ので、EE側に割り込みは発生しません。
        
[備考]
        コールバック関数end_funcは割り込みハンドラとして実行されるため、
        プログラミングに際していくつか特別な注意が必要です。割り込みハン
        ドラの記述について、\overview\eekernelに注意事項が記載されていま
        すので参照してください。

=========================================================================
sceSdRemote                                                        [関数]
=========================================================================
                                              libsdコマンドのリモート実行
[形式]
        int sceSdRemote(
        	int is_block,
        	int command,
        	int arg,
        	...
        )
        
[引数]
        is_block  	IOP側の処理が終わるまでEE側をブロックするかどうかを見
        る。
        		1ならブロック。0ならノンブロック
        command	コマンド
        arg		コマンドに対する引数。可変長。
        
[返り値]
        そのコマンドの処理に相当する返値。ただしisBlockに 0 を指定した場
        合は常に 0。
        
[解説]
        commandによって、IOP上にあるlibsd.irxのAPIをEEからリモート実行し
        ます。
        commandには、libsdの関数の'sce'の代りに'r'を付けたものを指定しま
        す。詳細は
        iop/include/sdrcmd.h を参照してください。引数は可変長なので、その
        コマンド（関数）に必
        要な数だけ指定してください。
        
        	例： sceSdRemote( 1, rSdSetParam, SD_CORE_0|SD_P_MVOLL , 0x3fff )
        ;
        
        sceSdRemoteの返値が、そのコマンドの返値となります。ただしノンブロ
        ックを指定した場合
        は常に0になります。引数と返り値の型は常にintなので、適宜キャスト
        してください。
        
        ノンブロックを指定すると、IOP側の処理終了を待たずに関数からリター
        ンします。IOP側の
        処理の終了を知るには、終了コールバック関数をsceSdCallBack()を用い
        て設定してください。
        IOPの処理が終わらないうちに、次のコマンドを送ると誤動作することが
        あります。
        
        コマンドがrSdProcBatchとrSdProcBatchExの場合、パラメータのアドレ
        スはIOP側のアド
        レスです。別途、IOPに（またはIOPから）コマンド配列や返り値配列を
        転送する処理を行なってください。返り値配列の転送には、バッチコマ
        ンドのSD_RETURN_EEが利用できます
        （libsd参照）。
        
         rSdSetEffectAttrとrSdGetEffectAttrに関しては、libsdrの内部で転送
        を行ないますので、パ
        ラメータの構造体ポインタはEE上のアドレスをそのまま指定できます。l
        ibsdr概要の"転送データのメモリ配置について"も参照してください。
        
        コールバックを指定するコマンド、rSdSetTransCallback, rSdSetIRQCal
        lback, rSdSetTransIntrHandler, rSdSetSpu2IntrHandler ともEE上の関
        数をコールバックとして指
        定でき、その関数がスレッドとして呼び出されます。ただし、前もってs
        ceSdRemoteCallbackInit() を行なっておく必要があります。rSdSetTran
        sIntrHandler,
        rSdSetSpu2IntrHandler に渡すデータのポインタもEE上のアドレスです。
        
        コマンドがrSdChangeThreadPriority の場合、引数を２つ取り、順にIOP
        側で動作しているsdrdrv のメインスレッド、コールバックスレッドのプ
        ライオリティ値を指定します。
        デフォルトのスレッドプライオリティ値はどちらも24です。
        コールバックスレッドのプライオリティ値はメインスレッドのプライオ
        リティ値に対して同じか大きい値（プライオリティとしては低い）でな
        ければいけません。
        これらIOPスレッドプライオリティ値を変更する場合、他のモジュールの
        プライオリティに対して細心の注意を払う必要があります。そのため、
        安易にIOPスレッドプライオリティ値を変更する事はお勧めいたしません。

=========================================================================
sceSdRemoteCallbackInit                                            [関数]
=========================================================================
                                          libsdのコールバック環境の初期化
[形式]
        int sceSdRemoteCallbackInit(
        	int priority
        )
        
[引数]
        priority	コールバック用に起動されるEEスレッドのプライオリティ。
        	メインスレッドよりも高くする必要がある。
        
        
[返り値]
        コールバック用に起動されたEEスレッドのID。エラーがあったときは負
        の値。
        
[解説]
        sceSdRemoteのコマンドで、割り込みコールバックを指定する場合（rSdS
        etTransCallback,
        rSdSetIRQCallback）には、前もって１回だけ実行してください。IOP側
        のコールバック関数
        をEE側で受けるため、内部でスレッドを１つクリエイトします。したが
        って、コールバックは
        割り込みモードではなく、スレッドモードで動作します。１つのコール
        バックが動作している最
        中に他のコールバックが呼び出された場合は、キューに入って前のコー
        ルバックが終了するまで
        待ちます。
        
        スレッドIDを返すので、不要になったときはDeleteThread等の後処理を
        してください。
        
        sceSdCallBack()で指定するコールバックは、sceSdRemote()のノンブロ
        ック実行に関するもの
        で、ここで言うコマンドのコールバックとは別物ですので、このAPIによ
        る初期化は必要あり
        ません。
        

=========================================================================
sceSdRemoteInit                                                    [関数]
=========================================================================
                                                libsdリモート環境の初期化
[形式]
        int sceSdRemoteInit( void )
        
[引数]
        なし
        
[返り値]
        正常終了時には 0。エラーがあった場合は ?1が帰る。
        
[解説]
        libsdリモート環境の初期化を行います。
        

=========================================================================
sceSdTransToIOP                                                    [関数]
=========================================================================
                                       EE 上のバッファを IOP メモリに転送
[形式]
        int sceSdTransToIOP(
        	void *buff,
        	u_int sendAddr,
        	u_int size,
        	u_int isBlock
        )
        
[引数]
        buff		EE メモリ上の転送元位置
        sendAddr	IOP メモリ上の転送先位置
        size		サイズ
        isBlock  	IOP 側の処理が終わるまで EE 側をブロックするかどうか。
        		1 ならブロック。0 ならノンブロック
        
        
[返り値]
        正常終了時には 0。エラーがあった場合は -1。
        
[解説]
        EE メモリ上のデータを IOP メモリに転送します。
        
        	
        ノンブロックを指定すると、IOP側の処理終了を待たずに関数からリター
        ンします。IOP側の
        処理の終了を知るには、終了コールバック関数をsceSdCallBack()を用い
        て設定してください。
        IOPの処理が終わらないうちに、次のコマンドを送ると誤動作することが
        あります。
