[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                            DMA基本ライブラリ
                           ==================


 1 構造体
==========

=========================================================================
sceDmaChan                                                       [構造体]
=========================================================================
                                                     各チャネル固有の状態
[構造]
        typedef struct {
        	tD_CHCR	chcr;	u_int	p0[3];	// channel control
        	void	*madr;	u_int	p1[3];	// memory address
        	u_int	qwc;	u_int	p2[3];	// transfer count
        	sceDmaTag	*tadr;	u_int	p3[3];	// tag address
        	void	*as0;	u_int	p4[3];	// address stack
        	void	*as1;	u_int	p5[3];	// address stack
        	u_int	p6[4];			// pad
        	u_int	p7[4];			// pad
        	void	*sadr;	u_int	p8[3];	// spr address
        } sceDmaChan;
        
[メンバ]
        chcr	チャネル制御		Dn_CHCR
        madr	転送メモリアドレス	Dn_MADR
        qwc	転送サイズ		Dn_QWC
        tadr	転送タグアドレス		Dn_TADR
        as0	アドレススタック０	Dn_ASR0
        as1	アドレススタック１	Dn_ASR1
        sadr	SPRアドレス		Dn_SADR
        
[解説]
        各チャネルに固有の状態を設定／取得するための構造体です。各メンバ
        は、それぞれ右側に示したレジスタに対応します。
        sceDmaGetChan()関数で各チャネルに対応する構造体のアドレスを得るこ
        とができます。このアドレスは物理レジスタのアドレスですので、構造
        体の各メンバに値を設定するとただちにDMACのレジスタに反映されます。
        

=========================================================================
sceDmaEnv                                                        [構造体]
=========================================================================
                                                       チャネル共通の状態
[構造]
        typedef struct {
        	u_char	sts;		// stall source
        	u_char	std;		// stall drain
        	u_char	mfd;		// MFIFO drain
        	u_char	rcycle;		// release cycle
        	u_short	express;		// express channel mask
        	u_short	notify;		// notify channel mask
        	u_short	sqwc;		// Interleave skip qword count
        	u_short	tqwc;		// Interleave transfer qword count
        	void	*rbadr;		// MFIFO Ring buffer address
        	u_int	rbmsk;		// MFIFO Ring buffer mask
        } sceDmaEnv;
        
[メンバ]
        sts	ストール制御のsource側チャネル			D_CTRL.STS
        std	ストール制御のdrain側チャネル			D_CTRL.STD
        mfd	MFIFOのdrain側チャネル				D_CTRL.MFD
        rcycle	release cycle					D_CTRL.RCYC
        express	優先チャネルの設定（LSB=CH0）			D_PCR.CDE
        notify	終了をCOP0へ送信するチャネルの指定（LSB=CH0）	D_PCR.CPC
        sqwc	インターリーブモードでのスキップワード数		D_SQWC.SQWC
        tqwc	インターリーブモードでの転送ワード数		D_SQWC.TQWC
        rbadr	MFIFOリングバッファの先頭アドレス		D_RBOR.ADDR
        rbmsk	MFIFOリングバッファのサイズマスク		D_RBSR.RMSK
        
[解説]
        チャネルにまたがって共通の状態を設定／取得するための構造体です。
        各メンバは、それぞれ右側に示したレジスタに対応します。
        PutDEnv()およびGetDenv()関数を用いて値を設定／取得できます。

=========================================================================
sceDmatag                                                        [構造体]
=========================================================================
                                                                   DMAtag
[構造]
        typedef struct _sceDmaTag {
        	u_short	qwc;	// transfer count
        	u_char	mark;	// mark
        	u_char	id;	// tag ID
        	struct _sceDmaTag *next;	// next tag
        	u_int	p[2];	// padding
        } sceDmaTag __attribute__ ((aligned(16)));
        
[メンバ]
        qwc	パケットサイズ
        mark	マーク値
        id	タグIDおよびフラグ
        next	ADDRフィールド
        
[解説]
        DMAtagを記述するための構造体です。
        

 2 関数
========


=========================================================================
sceDmaAddCall                                                      [関数]
=========================================================================
                                                           CALLタグの追加
[形式]
        void *sceDmaAddCall(
        	sceDmaTag **tag,
        	int qwc,
        	void *ctag
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCALLタグに書き込むサイズ情報
        ctag	生成したCALLタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、呼び出し先アドレスctag・サイズqwcを持つCALLタ
        グを生成します。
        *tagは生成したCALLタグに続くタグ（＝ctag）を指すように更新される
        ので、続けて次のタグを生成することができます。
        返値は、生成したCALLタグによって転送されるデータのアドレスとなり
        ます。
        

=========================================================================
sceDmaAddCont                                                      [関数]
=========================================================================
                                                            CNTタグの追加
[形式]
        void *sceDmaAddCont(
        	sceDmaTag **tag,
        	int qwc
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCNTタグに書き込むサイズ情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、サイズqwcを持つCNTタグ(Source Chain用)を生成
        します。
        *tagは生成したCNTタグに続くタグのアドレス(＝パケットボディの次の
        アドレス)を指すように更新されるので、続けて次のタグを生成すること
        ができます。
        返値はCNTタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddDest                                                      [関数]
=========================================================================
                                                           DESTタグの追加
[形式]
        void *sceDmaAddDest(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCNTタグに書き込むサイズ情報
        addr	生成したCNTタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcを持つDestination Chai
        n用のCNTタグを生成します。
        返り値は、生成したCNTタグによって転送されるデータのアドレスとなり
        ます。
        *tagはパケットボディの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        

=========================================================================
sceDmaAddDests                                                     [関数]
=========================================================================
                                                          DESTSタグの追加
[形式]
        void *sceDmaAddDests(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCNTSタグに書き込むサイズ情報
        addr	生成したCNTSタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcを持つDestination Chai
        n用のCNTSタグを生成します。
        *tagはパケットボディの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        返り値は、生成したCNTSタグによって転送されるデータのアドレスとな
        ります。
        

=========================================================================
sceDmaAddEnd                                                       [関数]
=========================================================================
                                                            ENDタグの追加
[形式]
        void *sceDmaAddEnd(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したENDタグに書き込むサイズ情報
        addr	転送先アドレス(Destination Chain用)
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、サイズqwcを持つENDタグを生成します。Destinati
        on Chain用のENDタグを生成する場合は、addrに転送先のメモリアドレス
        を指定してください。
        *tagはパケットボディの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        返り値は、生成したENDタグによって転送されるデータのアドレスとなり
        ます。
        

=========================================================================
sceDmaAddExpress                                                   [関数]
=========================================================================
                                                           優先転送の指定
[形式]
        void sceDmaAddExpress(
        	sceDmatag *tag
        )
        
[引数]
        tag	対象のDMAtag
        
[返り値]
        なし
        
[解説]
        転送リストに登録されているDMAtagに優先転送属性を付加します。
        優先転送の詳細は「EE Use's Manual」でD_PCRレジスタの説明を参照し
        てください。
        

=========================================================================
sceDmaAddICall                                                     [関数]
=========================================================================
                                                           CALLタグの追加
[形式]
        void *sceDmaAddICall(
        	sceDmaTag **tag,
        	int qwc,
        	void *ctag
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCALLタグに書き込むサイズ情報
        ctag	生成したCALLタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、呼び出し先アドレスctag・サイズqwcを持つ割り込
        み発生付きCALLタグを生成します。
        *tagは生成したCALLタグに続くタグのアドレス（=ctag）を指すように更
        新されるので、続けて次のタグを生成することができます。
        返り値はCALLタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddICont                                                     [関数]
=========================================================================
                                                            CNTタグの追加
[形式]
        void *sceDmaAddICont(
        	sceDmaTag **tag,
        	int qwc
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCNTタグに書き込むサイズ情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、サイズqwcを持つ割り込み発生付きCNTタグを生成
        します。
        *tagは生成したCNTタグに続くタグのアドレス（＝パケットボディの次の
        アドレス）を指すように更新されるので、続けて次のタグを生成するこ
        とができます。
        返り値はCNTタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddIDest                                                     [関数]
=========================================================================
                                                          IDESTタグの追加
[形式]
        void *sceDmaAddIDest(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCNTタグに書き込むサイズ情報
        addr	生成したCNTタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcを持つDestination Chai
        n用の割り込み発生付きCNTタグを生成します。
        返り値は、生成したCNTタグによって転送されるデータのアドレスとなり
        ます。
        *tagはパケットボディの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        

=========================================================================
sceDmaAddIDests                                                    [関数]
=========================================================================
                                                         IDESTSタグの追加
[形式]
        void *sceDmaAddIDests(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したCNTSタグに書き込むサイズ情報
        addr	生成したCNTSタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcを持つDestination Chai
        n用の割り込み発生付きCNTSタグを生成します。
        返り値は、生成したCNTSタグによって転送されるデータのアドレスとな
        ります。
        *tagはパケットボディの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        

=========================================================================
sceDmaAddIEnd                                                      [関数]
=========================================================================
                                                            ENDタグの追加
[形式]
        void *sceDmaAddIEnd(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したENDタグに書き込むサイズ情報
        addr	転送先アドレス(Destination Chain用)
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、サイズqwcを持つ割り込み発生付きENDタグを生成
        します。Destination Chain用のENDタグを生成する場合は、addrに転送
        先のメモリアドレスを指定してください。返り値はENDタグによって転送
        されるデータのアドレスとなります。
        *tagはパケットボディの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        

=========================================================================
sceDmaAddINext                                                     [関数]
=========================================================================
                                                           NEXTタグの追加
[形式]
        void *sceDmaAddINext(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したNEXTタグに書き込むサイズ情報
        addr	生成したNEXTタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcを持つ割り込み発生付き
        NEXTタグを生成します。
        *tagは生成したNEXTタグに続くタグのアドレス（=addr）を指すように更
        新されるので、続けて次のタグを生成することができます。
        返り値はNEXTタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddIRef                                                      [関数]
=========================================================================
                                                            REFタグの追加
[形式]
        void *sceDmaAddIRef(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したREFタグに書き込むサイズ情報
        addr	生成したREFタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレス（=addr）を返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcのデータを参照する割り
        込み発生付きREFタグを生成します。
        *tagは生成したREFタグの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        返り値はREFタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddIRefe                                                     [関数]
=========================================================================
                                                           REFEタグの追加
[形式]
        void *sceDmaAddIRefe(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したREFEタグに書き込むサイズ情報
        addr	生成したREFEタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレス（=addr）を返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcのデータを参照する割り
        込み発生付きREFEタグを生成します。
        *tagは生成したREFEタグの次のアドレスを指すように更新されるので、
        続けて次のタグを生成することができます。
        返り値はREFEタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddIRefs                                                     [関数]
=========================================================================
                                                           REFSタグの追加
[形式]
        void *sceDmaAddIRefs(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したREFSタグに書き込むサイズ情報
        addr	生成したREFSタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレス（=addr）を返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcのデータを参照する割り
        込み発生付きREFSタグを生成します。
        *tagは生成したREFSタグの次のアドレスを指すように更新されるので、
        続けて次のタグを生成することができます。
        返り値はREFSタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddIRet                                                      [関数]
=========================================================================
                                                            RETタグの追加
[形式]
        void *sceDmaAddIRet(
        	sceDmaTag **tag,
        	int qwc
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したRETタグに書き込むサイズ情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、サイズqwcを持つ割り込み発生付きRETタグを生成
        します。
        *tagは生成したRETタグに続くタグのアドレスを指すように更新されるの
        で、続けて次のタグを生成することができます。
        返り値はRETタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddNext                                                      [関数]
=========================================================================
                                                           NEXTタグの追加
[形式]
        void *sceDmaAddNext(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したNEXTタグに書き込むサイズ情報
        addr	生成したNEXTタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、タグアドレスaddrサイズqwcを持つNEXTタグを生成
        します。
        *tagは生成したNEXTタグに続くタグを指すように更新されるので、続け
        て次のタグを生成することができます。
        返り値はNEXTタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddRef                                                       [関数]
=========================================================================
                                                            REFタグの追加
[形式]
        void *sceDmaAddRef(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したREFタグに書き込むサイズ情報
        addr	生成したREFタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレス（=addr）を返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcのデータを参照するREF
        タグを生成します。
        *tagは生成したREFタグの次のアドレスを指すように更新されるので、続
        けて次のタグを生成することができます。
        返り値はREFタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddRefe                                                      [関数]
=========================================================================
                                                           REFEタグの追加
[形式]
        void *sceDmaAddRefe(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したREFEタグに書き込むサイズ情報
        addr	生成したREFEタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレス（=addr）を返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcのデータを参照するREFE
        タグを生成します。
        *tagは生成したREFEタグの次のアドレスを指すように更新されるので、
        続けて次のタグを生成することができます。
        返り値は、生成されたREFEタグによって転送されるデータのアドレスと
        なります。
        

=========================================================================
sceDmaAddRefs                                                      [関数]
=========================================================================
                                                           REFSタグの追加
[形式]
        void *sceDmaAddRefs(
        	sceDmaTag **tag,
        	int qwc,
        	void *addr
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したREFSタグに書き込むサイズ情報
        addr	生成したREFSタグに書き込むアドレス情報
        
[返り値]
        パケットボディのアドレス（=addr）を返します。
        
[解説]
        *tagの指すメモリに、アドレスaddr・サイズqwcのデータを参照するREFS
        タグを生成します。
        *tagは生成したREFSタグの次のアドレスを指すように更新されるので、
        続けて次のタグを生成することができます。
        返り値はREFSタグによって転送されるデータのアドレスとなります。
        

=========================================================================
sceDmaAddRet                                                       [関数]
=========================================================================
                                                            RETタグの追加
[形式]
        void *sceDmaAddRet(
        	sceDmaTag **tag,
        	int qwc
        )
        
[引数]
        tag	タグポインタのアドレス
        qwc	生成したRETタグに書き込むサイズ情報
        
[返り値]
        パケットボディのアドレスを返します。
        
[解説]
        *tagの指すメモリに、サイズqwcを持つRETタグを生成します。
        *tagは生成したRETタグに続くタグを指すように更新されるので、続けて
        次のタグを生成することができます。
        返り値は、生成したRETタグによって転送されるデータのアドレスとなり
        ます。
        

=========================================================================
sceDmaDebug                                                        [関数]
=========================================================================
                                                     デバッグモードの設定
[形式]
        int sceDmaDebug(
        	int mode
        )
        
[引数]
        mode	デバッグモード
        	0 : デバッグOFF
        	1 : デバッグON
        
[返り値]
        直前のmodeの値
        
[解説]
        デバッグモードを設定します。1を指定するとデバッグONとなり、libdma
        の各関数で引数の整合性チェックが行われるようになります。
        

=========================================================================
sceDmaGetChan                                                      [関数]
=========================================================================
                                                     チャネル構造体の取得
[形式]
        sceDmaChan *sceDmaGetChan(
        	int id
        )
        
[引数]
        id	チャネル番号
        
[返り値]
        チャネル番号idに相当するsceDmaChan構造体のアドレスを返します。
        idの値が不正のときはエラーとして0を返します。
        
[解説]
        チャネル番号idに相当するsceDmaChan構造体のアドレスを返します。こ
        のアドレスはメモリにマップされたDMACレジスタのアドレスそのもので
        すので、返値をポインタとしてDMACのレジスタを直接読み書きすること
        ができます。
        また、DMA転送の開始／中断を指示する際には、対象のDMAチャネルを指
        定するのに、チャネル番号でなくこの関数が返す値を使用します。
        idとDMAチャネルの対応は次のとおりです。
        
        +--+-----------+
        |id DMAチャネル|
        +  +           +
        |0  VIF0       |
        |1  VIF1       |
        |2  GIF        |
        |3  fromIPU    |
        |4  toIPU      |
        |5  SIF0       |
        |6  SIF1       |
        |7  SIF2       |
        |8  fromSPR    |
        |9  toSPR      |
        +--+-----------+
[備考]
        IPUおよびSIFでのデータ転送にはさまざまな注意が必要となるため、fro
        mIPU/toIPUの制御はlibipuに、SIF0/SIF1/SIF2の制御はlibsifに、それ
        ぞれ委ねることが望ましいと言えます。
        メモリにマップされたレジスタへのアクセスはuncachedであり、通常の
        構造体のように使用すると処理速度の低下をきたすおそれもありますの
        で注意してください。
        

=========================================================================
sceDmaGetEnv                                                       [関数]
=========================================================================
                                               チャネル共通レジスタの取得
[形式]
        sceDmaEnv *sceDmaGetEnv(
        	sceDmaEnv *denv
        )
        
[引数]
        denv	レジスタの値を読み出す構造体のアドレス
        
[返り値]
        denvを返します。
        
[解説]
        DMACのチャネル共通レジスタの値を読み出し、denvで指定された構造体
        に格納します。
        

=========================================================================
sceDmaGetNextTag                                                   [関数]
=========================================================================
                                               転送リストの次のタグを取得
[形式]
        sceDmaTag *sceDmaGetNextTag(
        	sceDmaTag *tag
        )
        
[引数]
        tag	転送リスト中のタグアドレス
        
[返り値]
        次のタグアドレスを返します。tagが不正なタグを指している場合は0を
        返します。
        
[解説]
        tagに続いて転送されることになるDMAtagのアドレスを返します。
        

=========================================================================
sceDmaPause                                                        [関数]
=========================================================================
                                                        DMA転送の一時停止
[形式]
        int sceDmaPause(
        	sceDmaChan *d
        )
        
[引数]
        d	一時停止するDMAチャネル
        
[返り値]
        動作中だった場合は1、すでに停止中だった場合は0を返します。
        
[解説]
        指定したチャネルのDMA転送を一時中断します。
        sceDmaRestart()関数で再開することができます。
        

=========================================================================
sceDmaPutEnv                                                       [関数]
=========================================================================
                                               チャネル共通レジスタの設定
[形式]
        int sceDmaPutEnv(
        	sceDmaEnv *env
        )
        
[引数]
        env	レジスタに書き込む値
        
[返り値]
        正常終了のときは0、envの内容が不正のときは負の値を返します。
        
[解説]
        envの内容をそれぞれ対応するDMACのレジスタに設定します。
        システムの安定性を優先するため、共通レジスタの内容はいったんメモ
        リ上の構造体に設定値を用意しておき、この関数を用いて設定します。
        DMACのレジスタはスレッドの切り替えとは独立していますので、複数の
        スレッドが別個に設定を行うと資源の衝突を引き起こす危険があります。
        

=========================================================================
sceDmaPutStallAddr                                                 [関数]
=========================================================================
                                                   ストールアドレスの設定
[形式]
        void *sceDmaPutStallAddr(
        	void *addr
        )
        
[引数]
        addr	ストールするアドレス
        
[返り値]
        直前のストールアドレスを返します。
        
[解説]
        DMAストールアドレスを表すD_STADRレジスタにaddrの値を設定します。
        addrには通常正の値を指定しますが、-1を指定したときはストールアド
        レスの設定は行なわれず、現在設定されている値が返されます。
        

=========================================================================
sceDmaRecv                                                         [関数]
=========================================================================
                                  DMA転送の起動（Destination Chain Mode）
[形式]
        void sceDmaRecv(
        	sceDmaChan *d
        )
        
[引数]
        d	転送を行うDMAチャネル
        
[返り値]
        なし
        
[解説]
        Destination Chain Modeで、デバイスからメモリへのDMA転送を起動しま
        す。
        転送先のメモリアドレスは、デバイス側からタグ情報によって指定され
        ることになります。
        関数内部での処理はDMA転送の起動のみであり、転送処理はバックグラウ
        ンドで行われます。また、キューイングは行われず、ただちに実行され
        ます。
        

=========================================================================
sceDmaRecvI                                                        [関数]
=========================================================================
                            DMA転送の起動（Interleave Mode, SPR→メモリ）
[形式]
        void sceDmaRecvI(
        	sceDmaChan *d,
        	void *addr,
        	int size
        )
        
[引数]
        d	転送を行うDMAチャネル（fromSPR）
        addr	転送先のメモリアドレス
        size	転送するデータサイズ（qword）
        
[返り値]
        なし
        
[解説]
        Interleave Modeで、SPRからメモリへのDMA転送を起動します。dにはfro
        mSPR（id=8）を指定する必要があります。
        転送元のSPRアドレスはd->sadrで、転送先となるメモリアドレスはaddr
        で指定します。また、小矩形領域を表すパラメータを、あらかじめsceDm
        aEnv構造体のsqwcおよびtqwcを通じてDMACに設定しておく必要がありま
        す。
        関数内部での処理はDMA転送の起動のみであり、転送処理はバックグラウ
        ンドで行われます。また、キューイングは行われず、ただちに実行され
        ます。
        

=========================================================================
sceDmaRecvN                                                        [関数]
=========================================================================
                           DMA転送の起動（Normal Mode, デバイス→メモリ）
[形式]
        void sceDmaRecvN(
        	sceDmaChan *d,
        	void *addr,
        	int size
        )
        
[引数]
        d	転送を行うDMAチャネル
        addr	転送先のメモリアドレス
        size	転送するデータサイズ（qword）
        
[返り値]
        なし
        
[解説]
        Normal Modeで、デバイスからメモリへのDMA転送を起動します。転送先
        となるメモリアドレスはaddrで、転送するデータサイズはsizeで指定し
        ます。
        関数内部での処理はDMA転送の起動のみであり、転送処理はバックグラウ
        ンドで行われます。また、キューイングは行われず、ただちに実行され
        ます。
        

=========================================================================
sceDmaReset                                                        [関数]
=========================================================================
                                                           DMACのリセット
[形式]
        int sceDmaReset(
        	int mode
        )
        
[引数]
        mode	リセットモード
        	0 : disable
        	1 : enable
        
[返り値]
        直前のmodeの値
        
[解説]
        DMACをリセットします。
        すべてのDMA転送の終了を待った後、すべての転送終了ハンドラをクリア
        し、DMACを初期化して、modeに従ってDMACをenable / disableします。
        

=========================================================================
sceDmaRestart                                                      [関数]
=========================================================================
                                                一時停止したDMA転送の再開
[形式]
        int sceDmaRestart(
        	sceDmaChan *d
        )
        
[引数]
        d	転送再開するDMAチャネル
        
[返り値]
        停止中だった場合は0、すでに動作中だった場合は1を返します。
        
[解説]
        指定したDMAチャネルの転送処理を再開します。
        

=========================================================================
sceDmaSend                                                         [関数]
=========================================================================
                                       DMA転送の起動（Source Chain Mode）
[形式]
        void sceDmaSend(
        	sceDmaChan *d,
        	void *tag
        )
        
[引数]
        d	転送を行うDMAチャネル
        tag	転送リストの先頭アドレス
        
[返り値]
        なし
        
[解説]
        Source Chain ModeでメモリからデバイスへのDMA転送を起動します。転
        送するデータの先頭となるDMAtagをtagで、転送先のデバイス(DMAチャネ
        ル)をdで指定します。
        関数内部での処理はDMA転送の起動のみであり、転送処理はバックグラウ
        ンドで行われます。また、キューイングは行われず、ただちに実行され
        ます。
        

=========================================================================
sceDmaSendI                                                        [関数]
=========================================================================
                            DMA転送の起動（Interleave Mode, メモリ→SPR）
[形式]
        void sceDmaSendI(
        	sceDmaChan *d,
        	void *addr,
        	int size
        )
        
[引数]
        d	転送を行うDMAチャネル（toSPRのみ）
        addr	転送データのアドレス
        size	転送データのサイズ（qword）
        
[返り値]
        なし
        
[解説]
        Interleave ModeでメモリからSPRへのDMA転送を起動します。dにはtoSPR
        チャネル（id=9）のチャネル構造体アドレスを指定する必要があります。
        また、転送元の小矩形領域を表すパラメータを、あらかじめsceDmaEnv構
        造体のsqwcおよびtqwcを通じてDMACに設定しておく必要があります。転
        送先となるSPRアドレスはd->sadrで指定します。
        関数内部での処理はDMA転送の起動のみであり、転送処理はバックグラウ
        ンドで行われます。また、キューイングは行われず、ただちに実行され
        ます。
        

=========================================================================
sceDmaSendN                                                        [関数]
=========================================================================
                           DMA転送の起動（Normal Mode, メモリ→デバイス）
[形式]
        void sceDmaSendN(
        	sceDmaChan *d,
        	void *addr,
        	int size
        )
        
[引数]
        d	転送を行うDMAチャネル
        addr	転送開始アドレス
        size	転送するデータサイズ（qword）
        
[返り値]
        なし
        
[解説]
        Normal ModeでメモリからデバイスへのDMA転送を起動します。転送デー
        タの先頭アドレスをaddrで、データサイズをsizeで指定します。
        関数内部での処理はDMA転送の起動のみであり、転送処理はバックグラウ
        ンドで行われます。また、キューイングは行われず、ただちに実行され
        ます。
        

=========================================================================
sceDmaSync                                                         [関数]
=========================================================================
                                              DMA転送の終了待ち／状態検査
[形式]
        int sceDmaSync(
        	sceDmaChan *d,
        	int mode,
        	int timeout
        )
        
[引数]
        d	対象のDMAチャネル
        mode	ブロックモード
        	0 : ブロック
        	1 : ノンブロック
        timeout	最大待ち時間（Hsync単位）
        
[返り値]
        DMAが動作中であれば1、終了していれば0を返します。
        
[解説]
        dで指定するチャネルのDMA転送の終了を検出します。
        modeに0を指定した場合はブロックモードとなり、DMA転送が終了するま
        で関数からリターンしません。modeに1を指定した場合はノンブロックモ
        ードとなり、状態を調べてすぐにリターンします。
        ブロックモードの場合、待ち時間がtimeoutで指定された水平同期カウン
        ト数を越えるとタイムアウトとなります（現在のバージョンではこの機
        能は実装されていません）。
        

=========================================================================
sceDmaWatch                                                        [関数]
=========================================================================
                                         特定アドレスの転送待ち／状態検査
[形式]
        int sceDmaWatch(
        	sceDmaChan *d,
        	void *addr,
        	int mode,
        	int timeout
        )
        
[引数]
        d	対象のDMAチャネル
        addr	検査対象のメモリアドレス
        mode	ブロックモード
        	0 : ブロック
        	1 : ノンブロック
        timeout	最大待ち時間（Hsync単位）
        
[返り値]
        転送済みであれば1、そうでなければ0を返します。
        
[解説]
        dで指定するチャネルで、アドレスaddrのデータが転送済みかどうかを調
        べます。
        modeに0を指定した場合はブロックモードとなり、指定アドレスの転送が
        済むまで関数からリターンしません。modeに1を指定した場合はノンブロ
        ックモードとなり、状態を調べてすぐにリターンします。
        ブロックモードの場合、待ち時間がtimeoutで指定された水平同期カウン
        ト数を越えるとタイムアウトとなります（現在のバージョンではこの機
        能は実装されていません）。
