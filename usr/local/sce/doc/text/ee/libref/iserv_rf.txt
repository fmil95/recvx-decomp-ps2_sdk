[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                             標準IOPサービス
                            ================


 1 構造体
==========

=========================================================================
sceExecData                                                      [構造体]
=========================================================================
                                                 オブジェクトの実行データ
[構造]
        typedef struct {
        	unsigned int epc;
        	unsigned int gp;
        	unsigned int sp;
        	unsigned int dummy;
        } sceEexcData;
        
[メンバ]
        epc	オブジェクトエントリーポイント
        gp	オブジェクトグローバルポイント
        sp	オブジェクトスタックポイント
        dummy	未使用
        
[解説]
        sceSifLoadElf() や sceSifLoadElfPart() をつかってロードしたオブジ
        ェクトの実行情報を格納する構造体です。
        
[関連項目]
        sceSifLoadElf(), sceSifLoadElfPart()

 2 関数
========


=========================================================================
sceSifLoadModule	                                                  [関数]
=========================================================================
                                         IOP メモリへのモジュールのロード
[形式]
        int sceSifLoadModule (
        	char *module,
        	int  args,
        	char *argp
        )
        
[引数]
        module	ロードすべきモジュールのファイル名(最大251文字)
        args	argp のサイズ
        argp	モジュールのロード時に渡される引数(最大251文字)
        
[返り値]
        0 以上  ロード成功。モジュールの番号。
        < 0	ロード失敗
        -SCE_EBINDMISS	IOP側のモジュールへのバインド失敗
        -SCE_EVERSIONMISS	IOP側のモジュールのバージョンが合わない
        -SCE_ECALLMISS	IOP側への RPC が失敗
        上記以外       IOP側のLoadStartModule() の返り値
        
[解説]
        module で指定したファイル名をロードすべき IOP モジュールのファイ
        ル名として IOP 側に送り、 LoadStartModule() を実行します。args/ar
        gp は LoadStartModule() の引数args/argp としてそのまま与えられま
        す。
        argp は、NULL で区切られた複数の文字列が指定可能です。その複数の
        文字列の最初のものから順に、モジュールの初期化関数に	arg[1] .. ar
        g[n] として与えられます。
        詳しくは、IOP の	LoadStartModule() を参照してください。
        あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。

=========================================================================
sceSifLoadElf                                                      [関数]
=========================================================================
                                      EEメモリへのELFオブジェクトのロード
[形式]
        int sceSifLoadElf (
        	char *objfile,
        	sceExecData *data
        )
        
[引数]
        objfile	ロードすべきオブジェクトのファイル名(最大251文字)
        data    オブジェクトの実行情報
        
[返り値]
        0 	ロード成功
        < 0	ロード失敗
        -SCE_EBINDMISS	IOP側のモジュールへのバインド失敗
        -SCE_EVERSIONMISS	IOP側のモジュールのバージョンが合わない
        -SCE_ECALLMISS	IOP側への RPC が失敗
        -SCE_ELOADMISS	ロード失敗(ファイルがない、ELF形式ではないなど)
        
[解説]
        objfile で指定したファイル名をELF形式のファイルとして EE のメモリ
        上に転送します。
        あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。
        

=========================================================================
sceSifLoadElfPart                                                [関数]
=========================================================================
                                EEメモリへのELFオブジェクトの一部をロード
[形式]
        int sceSifLoadElfPart (
        	char *objfile,
        	char *secname,
        	sceExecData *data
        )
        
[引数]
        objfile		ロードすべきオブジェクトのファイル名(最大251文字)
        scename 		ロードすべきセクション名(最大251文字)
        data		オブジェクトの実行情報
        
[返り値]
        0 	ロード成功
        < 0     ロード失敗
        -SCE_EBINDMISS	IOP側のモジュールへのバインド失敗
        -SCE_EVERSIONMISS	IOP側のモジュールのバージョンが合わない
        -SCE_ECALLMISS	IOP側への RPC が失敗
        -SCE_ELOADMISS	ロード失敗(ファイルがない、ELF形式ではないなど)
        
[解説]
        objfile で指定したファイル名をELF形式のファイルとして EE のメモリ
        上に転送します。
        その際、secname で指定したセクション名(".text や".bss")のみロード
        します。
        あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。
        

=========================================================================
sceSifLoadFileReset                                                [関数]
=========================================================================
                         モジュールロードルサービスのバインド情報を無効に
[形式]
        int sceSifLoadFileReset( void )
        
[引数]
        なし
        
[返り値]
        現在は、必ず０を返します。
        
[解説]
        IOP 側をリセット後は、モジュールロードサービスの RPC BIND 情報が
        無効になるので必ずこの関数を呼んでください。
        

=========================================================================
sceSifInitIopHeap                                                  [関数]
=========================================================================
                                   IOP 側のヒープ領域を操作する準備をする
[形式]
        int sceSifInitIopHeap(void)
        
[引数]
        なし
        
[返り値]
        0	成功
        < 0	失敗
        
[解説]
        IOP 側のヒープ領域を操作するための初期化を行います。
        あらかじめsceSifInitRpc(0) を呼び出しておく必要があります。
        

=========================================================================
sceSifAllocIopHeap                                                 [関数]
=========================================================================
                                             IOP 側のヒープ領域を確保する
[形式]
        void *sceSifAllocIopHeap(
        	int size
        )
        
[引数]
        size	確保するサイズ(バイト単位)
        
[返り値]
        NULL		失敗
        NULL以外	IOP での AllocSysMemory() の返り値
        
[解説]
        IOP 側で AllocSysMemory(0,size,NULL) を行い、その取得アドレスを返
        します。
        あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。
        

=========================================================================
sceSifFreeIopHeap                                                  [関数]
=========================================================================
                                             IOP 側のヒープ領域を解放する
[形式]
        int sceSifFreeIopHeap(
        	void *addr
        )
        
[引数]
        addr	解放するアドレス(IOPのメモリアドレス)
        
[返り値]
        < 0	失敗
        0	成功
        
[解説]
        IOP 側で FreeSysMemory(addr) を行い、その返り値を返します。
        通常は sceSifAllocIopHeap() で取得したメモリヒープを解放するため
        に使用しますが、AllocSysMemory() で確保したエリアならどれでも解放
        することができます。
        あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。
        

=========================================================================
sceSifLoadIopHeap                                                  [関数]
=========================================================================
                                   IOP 側のメモリに指定ファイルを読み込む
[形式]
        int sceSifLoadIopHeap(
        	char *fname,
        	void *addr
        )
        
[引数]
        fname		読み込むファイル名(IOP で open() できる名前。最大252                        文字)
        addr		IOPのメモリアドレス
        
[返り値]
        < 0	失敗
        0	成功
        
[解説]
        IOP 側で指定ファイル名 fname で open() を行い、成功すればaddr の
        メモリアドレスへファイルの内容を読み込みます。
        あらかじめsceSifInitIopHeap() を呼び出しておく必要があります。
        
        

 3 iopのリブートとモジュールの書き換え関数
===========================================


=========================================================================
sceSifRebootIop                                                    [関数]
=========================================================================
                                                IOPシステムをリブートする
[形式]
        int sceSifRebootIop(
        	char *imgfile
        )
        
[引数]
        imgfile	置き換えモジュールのイメージファイル名(最大70文字)
        
[返り値]
        失敗すれば０
        成功すれば０以外
        
[解説]
        IOPシステムサービスをリブートして、デフォルトモジュールを置き換え
        る為の関数です。
        

=========================================================================
sceSifSyncIop                                                      [関数]
=========================================================================
                                              IOPが再起動したかを確認する
[形式]
        int sceSifSyncIop(void)
        
[引数]
        なし
        
[返り値]
        IOPシステムサービスのリブートが完了すれば１。それ以外は、０。
        
[解説]
        IOPシステムサービスをリブート完了を確認する為の関数です。
        
