[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                           パケットライブラリ
                          ===================


 1 構造体
==========

=========================================================================
sceDmaPacket                                                     [構造体]
=========================================================================
                                                     		パケットの管理情報
[構造]
        typedef struct _DMAPACKET{
        	u_int *pCurrent;
        	u_long128 *pBase;
        	u_long128 *pDmaTag;
        	u_int pad03;
        } sceDmaPacket;
        
[メンバ]
        pCurrent	パケットの最後尾アドレス
        pBase		パケットの領域の先頭アドレス
        pDmaTag	有効なDMAtagのアドレス
        
[解説]
        パケットの管理情報です。
        

=========================================================================
sceGifPacket                                                     [構造体]
=========================================================================
                                                       パケットの管理情報
[構造]
        typedef struct _{
        	u_int *pCurrent;
        	u_long128 *pBase;
        	u_long128 *pDmaTag;
        	u_long *pGifTag;
        } sceGifPacket;
        
[メンバ]
        pCurrent	パケットの最後尾アドレス
        pBase		パケット領域の先頭アドレス
        pDmaTag	有効なDMAtagのアドレス
        pGifTag		オープンされているGIFtag
        
[解説]
        パケットの管理情報です。
        

=========================================================================
sceVif0Packet                                                    [構造体]
=========================================================================
                                                       パケットの管理情報
[構造]
        typedef struct{
        	u_int *pCurrent;
        	u_long128 *pBase;
        	u_long128 *pDmaTag;
        	u_int *pVifCode;
        	u_int numlen;
        	u_int pad11;
        	u_int pad12;
        	u_int pad13;
        } sceVif0Packet;
        
[メンバ]
        pCurrent	パケットの最後尾アドレス
        pBase		パケット領域の先頭アドレス
        pDmaTag	有効なDMAtagのアドレス
        pVifCode		オープンされているVIFcodeのアドレス
        
[解説]
        パケットの管理情報です。
        

=========================================================================
sceVif1Packet                                                    [構造体]
=========================================================================
                                                       パケットの管理情報
[構造]
        typedef struct{
        	u_int *pCurrent;
        	u_long128 *pBase;
        	u_long128 *pDmaTag;
        	u_int *pVifCode
        	u_int numlen;
        	u_long *pGifTag;
        	u_int pad12;
        	u_int pad13;
        } sceVif1Packet;
        
[メンバ]
        pCurrent	パケットの最後尾アドレス
        pBase		パケット領域の先頭アドレス
        pDmaTag	有効なDMAtagのアドレス
        pVifCode		オープンされているVIFcodeのアドレス
        pGifTag		オープンされているGIFtagのアドレス
        
[解説]
        パケットの管理情報です。
        

 2 関数
========


=========================================================================
sceDmaPkAddData                                                    [関数]
=========================================================================
                                                             データの追加
[形式]
        void sceDmaPkAddData(
        	sceDmaPacket *pPacket,
        	u_long128 data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		パケットに追加するデータ
        
[返り値]
        なし
        
[解説]
        1qwordのデータをパケットの末尾に追加します。
        

=========================================================================
sceDmaPkAddDataN                                                   [関数]
=========================================================================
                                                         複数データの追加
[形式]
        void sceDmaPkAddDataN(
        	sceDmaPacket *pPacket,
        	u_long128* pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		パケットに追加するデータ列へのポインタ
        count		パケットに追加するデータの数(qword単位)
        
[返り値]
        なし
        
[解説]
        count個のqwordデータをパケットの末尾に追加します。
        

=========================================================================
sceDmaPkCall                                                       [関数]
=========================================================================
                                                           CALLタグの追加
[形式]
        void sceDmaPkCall(
        	sceDmaPacket *pPacket,
        	u_long128 *pCall,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pCall		次のDMAtagのアドレス
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CALLタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkCnt                                                        [関数]
=========================================================================
                                                            CNTタグの追加
[形式]
        void sceDmaPkCnt(
        	sceDmaPacket *pPacket,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CNTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkDump                                                       [関数]
=========================================================================
                                                     パケットのダンプ出力
[形式]
        void sceDmaPkDump(
        	sceDmaPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        登録されているパケットを標準出力に16進ダンプします。
        この関数はデバッグ用に用意されています。
        

=========================================================================
sceDmaPkEnd                                                        [関数]
=========================================================================
                                                            ENDタグの追加
[形式]
        void sceDmaPkEnd(
        	sceDmaPacket *pPacket,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        ENDタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkInit                                                       [関数]
=========================================================================
                                                         パケットの初期化
[形式]
        void sceDmaPkInit(
        	sceDmaPacket *pPacket,
        	u_long128 *pBase
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pBase		パケット領域の先頭アドレス
        
[返り値]
        なし
        
[解説]
        パケットを初期化します。
        パケット管理情報のうちpBase,pDmaTag,pCurrentが初期化されます。
        
[備考]
        パケット領域としては、あらかじめ充分なメモリを確保しておく必要が
        あります。
        

=========================================================================
sceDmaPkNext                                                       [関数]
=========================================================================
                                                           NEXTタグの追加
[形式]
        void sceDmaPkNext(
        	sceDmaPacket *pPacket,
        	u_long128 *pNext,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pNext		次のタグのアドレス
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
[返り値]
        なし
        
[解説]
        NEXTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkRef                                                        [関数]
=========================================================================
                                                            REFタグの追加
[形式]
        void sceDmaPkRef(
        	sceDmaPacket *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkRefe                                                       [関数]
=========================================================================
                                                           REFEタグの追加
[形式]
        void sceDmaPkRefe(
        	sceDmaPacket *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFEタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkRefs                                                       [関数]
=========================================================================
                                                           REFSタグの追加
[形式]
        void sceDmaPkRefs(
        	sceDmaPacket *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFSタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkReserve                                                    [関数]
=========================================================================
                                                         データ領域の追加
[形式]
        u_int *sceDmaPkReserve(
        	sceDmaPacket *pPacket,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        count		リザーブする大きさ(word単位)
        
[返り値]
        リザーブされた領域の先頭アドレス
        
[解説]
        パケット領域の末尾にcount(word単位)の領域をリザーブします。
        有効なDMAtagがあれば、リザーブした領域のサイズがそのDMAtagのサイ
        ズ情報に加えられます。
        

=========================================================================
sceDmaPkReset                                                      [関数]
=========================================================================
                                               パケット管理情報のリセット
[形式]
        void sceDmaPkReset(
        	sceDmaPacket *pPacket
        );
        
[引数]
        pPacket		リセットするパケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケット管理情報をリセットします。
        パケットの末尾を示すpCurrentにpBaseの値がコピーされます。
        

=========================================================================
sceDmaPkRet                                                        [関数]
=========================================================================
                                                            RETタグの追加
[形式]
        void sceDmaPkRet(
        	sceDmaPacket *pPacket,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        RETタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceDmaPkSize                                                       [関数]
=========================================================================
                                                 パケットの使用サイズ取得
[形式]
        u_int sceDmaPkSize(
        	sceDmaPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケット領域のサイズ（qword単位）を返します。
        式で表すとpCurrnet-pBaseです。
        

=========================================================================
sceDmaPkTerminate                                                  [関数]
=========================================================================
                                                   パケットのターミネート
[形式]
        u_long128 *sceDmaPkTerminate(
        	sceDmaPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        ターミネートされた次のアドレス
        
[解説]
        パケットをターミネートします。
        すなわち、そのとき有効なDMAtagのサイズ管理を終えます。
        

=========================================================================
sceGifPkAddGsAD                                                    [関数]
=========================================================================
                                         GS packed mode A+Dコマンドの追加
[形式]
        void sceGifPkAddGsAD(
        	sceGifPacket *pPacket,
        	u_int address,
        	u_long data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        address		追加するGSコマンド（レジスタアドレス）
        data		追加するGSコマンドのパラメータ
        
[返り値]
        なし
        
[解説]
        GSのpacked mode A+Dコマンドをパケットに追加します。
        GIFtagがpacked modeのA+Dでオープンされている必要があります。
        

=========================================================================
sceGifPkAddGsData                                                  [関数]
=========================================================================
                                                           GSデータの追加
[形式]
        void sceGifPkAddGsData(
        	sceGifPacket *pPacket,
        	u_long data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するデータ
        
[返り値]
        なし
        
[解説]
        GSのデータをパケットに追加します。
        GIFtagがオープンされている必要があります。
        

=========================================================================
sceGifPkAddGsDataN                                                 [関数]
=========================================================================
                                                           GSデータの追加
[形式]
        void sceGifPkAddGsDataN(
        	sceGifPacket *pPacket,
        	u_long* pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数(64bit単位)
        
[返り値]
        なし
        
[解説]
        GSのデータをパケットに追加します。
        GIFtagがオープンされている必要があります。
        

=========================================================================
sceGifPkAddGsPacked                                                [関数]
=========================================================================
                                               GS packed modeデータの追加
[形式]
        void sceGifPkAddGsPacked(
        	sceGifPacket *pPacket,
        	u_long128 data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するGSコマンドパラメータ
        
[返り値]
        なし
        
[解説]
        GSのpacked modeで転送するデータ（A+D以外のコマンド）をパケットに
        追加します。
        GIFtagがpacked modeでオープンされている必要があります。
        

=========================================================================
sceGifPkAddGsPackedN                                               [関数]
=========================================================================
                                               GS packed modeデータの追加
[形式]
        void sceGifPkAddGsPackedN(
        	sceGifPacket *pPacket,
        	u_long128 *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するGSコマンドパラメータのアドレス
        count		追加するGSコマンドパラメータの個数
        
[返り値]
        なし
        
[解説]
        GSのpacked modeで転送するデータ（A+D以外のコマンド）を複数個パケ
        ットに追加します。
        GIFtagがpacked modeでオープンされている必要があります。
        

=========================================================================
sceGifPkCall                                                       [関数]
=========================================================================
                                                           CALLタグの追加
[形式]
        void sceGifPkCall(
        	sceGifPacket *pPacket,
        	u_long128 *pCall,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pCall		次のDMAtagのアドレス
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CALLタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkCloseGifTag                                                [関数]
=========================================================================
                                                         GIFtagのクローズ
[形式]
        void sceGifPkCloseGifTag(
        	sceGifPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        GIFtagをクローズします。
        
[備考]
        パケットをターミネートする前にGIFtagをクローズしておく必要があり
        ます。
        

=========================================================================
sceGifPkCnt                                                        [関数]
=========================================================================
                                                            CNTタグの追加
[形式]
        void sceGifPkCnt(
        	sceGifPacket *pPacket,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CNTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkDump                                                       [関数]
=========================================================================
                                                     パケットのダンプ出力
[形式]
        void sceGifPkDump(
        	sceGifPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        登録されているパケットを標準出力に16進ダンプします。
        この関数はデバック用に用意されています。
        

=========================================================================
sceGifPkEnd                                                        [関数]
=========================================================================
                                                            ENDタグの追加
[形式]
        void sceGifPkEnd(
        	sceGifPacket *pPacket,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        ENDタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkInit                                                       [関数]
=========================================================================
                                                         パケットの初期化
[形式]
        void sceGifPkInit(
        	sceGifPacket *pPacket,
        	u_long128 *pBase
        );
        
[引数]
        pPacket		パケット構造体のポインタ
        pBase		パケット領域の先頭アドレス
        
[返り値]
        なし
        
[解説]
        パケットを初期化します。
        

=========================================================================
sceGifPkNext                                                       [関数]
=========================================================================
                                                           NEXTタグの追加
[形式]
        void sceGifPkNext(
        	sceGifPacket *pPacket,
        	u_long128 *pNext,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pNext		次のDMAtagのアドレス
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        Nextタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkOpenGifTag                                                 [関数]
=========================================================================
                                                   GIFtagのオープンと追加
[形式]
        void sceGifPkOpenGifTag(
        	sceGifPacket *pPacket,
        	u_long128 gifTag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        gifTag		追加するGIFtag
        		NLOOPフィールドは0に設定しておくこと。
        
[返り値]
        なし
        
[解説]
        GIFtagをオープンし、パケットの末尾に追加します。
        このあと、GIFtagがクローズされるまで、GIFtagのサイズ管理が行われ
        ます。
        
[備考]
        GIFtagをオープンする前に適切なDMAtagをオープンしておく必要があり
        ます。
        

=========================================================================
sceGifPkRef                                                        [関数]
=========================================================================
                                                            REFタグの追加
[形式]
        void sceGifPkRef(
        	sceGifPacket *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkRefe                                                       [関数]
=========================================================================
                                                           REFEタグの追加
[形式]
        void sceGifPkRefe(
        	sceGifPacket *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFEタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkRefLoadImage                                               [関数]
=========================================================================
                            REFタグおよびGSへ転送するイメージデータの追加
[形式]
        void sceGifPkRefLoadImage(
        	sceGifPacket *pPacket,
        	u_short bp,
        	u_char psm,
        	u_short bw,
        	u_long128 *image,
        	u_int size,
        	u_int x,
        	u_int y,
        	u_int w,
        	u_int h
        );
        
[引数]
        pPacket		パケット管理情報へのポインタ
        bp		転送先バッファの先頭アドレス
        		(bp x 64が実際のアドレスになる)
        psm		データフォーマット
        +---------------+--+------------+
        |定数            値 フォーマット|
        +               +  +            +
        |SCE_GS_PSMCT32  0  PSMCT32     |
        |SCE_GS_PSMCT24  1  PSMCT24     |
        |SCE_GS_PSMCT16  2  PSMCT16     |
        |SCE_GS_PSMCT16S 10 PSMCT16S    |
        |SCE_GS_PSMT8    19 PSMT8       |
        |SCE_GS_PSMT4    20 PSMT4       |
        |SCE_GS_PSMT8H   27 PSMT8H      |
        |SCE_GS_PSMT4HL  36 PSMT4HL     |
        |SCE_GS_PSMT4HH  44 PSMT4HH     |
        |SCE_GS_PSMZ32   48 PSMZ32      |
        |SCE_GS_PSMZ24   49 PSMZ24      |
        |SCE_GS_PSMZ16   50 PSMZ16      |
        |SCE_GS_PSMZ16S  58 PSMZ16S     |
        +---------------+--+------------+
        bw		転送先バッファ幅
        		(bw x 64が実際の幅になる)
        image		転送するデータの先頭アドレス
        size		転送するデータのサイズ	qword単位
        x, y		転送先領域の左上端点
        w, h		転送領域の幅、高さ
        
[返り値]
        なし
        
[解説]
        GSのローカルメモリに転送するイメージデータをパケットに追加します。
        サイズが大きいと自動的に分割して転送します。
        
[備考]
        テクスチャデータをGSに転送したときには、テクスチャページバッファ
        の無効化を行う必要があります。
        

=========================================================================
sceGifPkRefs                                                       [関数]
=========================================================================
                                                           REFSタグの追加
[形式]
        void sceGifPkRefs(
        	sceGifPacket *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFSタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkReserve                                                    [関数]
=========================================================================
                                                         データ領域の追加
[形式]
        u_int *sceGifPkReserve(
        	sceGifPacket *pPacket,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        count		リザーブする大きさ(word単位)
        
[返り値]
        リザーブされた領域の先頭アドレス
        
[解説]
        パケットの末尾にcount(word単位)の領域をリザーブします。
        リザーブされた領域のサイズは、有効なDMAtag,オープンされているGIFt
        agがあれば、それぞれのサイズ情報(qwc,NLOOP)に加算されます。
        

=========================================================================
sceGifPkReset                                                      [関数]
=========================================================================
                                               パケット管理情報のリセット
[形式]
        void sceGifPkReset(
        	sceGifPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケットをリセットします。
        パケットに登録されている内容は破棄されます。
        

=========================================================================
sceGifPkRet                                                        [関数]
=========================================================================
                                                            RETタグの追加
[形式]
        void sceGifPkRet(
        	sceGifPacket *pPacket,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        RETタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceGifPkSize                                                       [関数]
=========================================================================
                                                 パケットの使用サイズ取得
[形式]
        u_int sceGifPkSize(
        	sceGifPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケットのサイズ（qword単位）を返します。
        式で表すとpCurrnet-pBaseです。
        

=========================================================================
sceGifPkTerminate                                                  [関数]
=========================================================================
                                                   パケットのターミネート
[形式]
        u_long128 *sceGifPkTerminate(
        	sceGifPacket *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        ターミネートされた次のアドレス
        
[解説]
        パケットをターミネートします。
        つまり、そのとき有効なDMAtagのサイズ管理を終えます。
        
[備考]
        パケットをターミネートする前に、オープンしているGIFtagがあればク
        ローズする必要があります。
        

=========================================================================
sceVif0PkAddCode                                                   [関数]
=========================================================================
                                                          VIFコードの追加
[形式]
        void sceVif0PkAddCode(
        	sceVif0Packet *pPacket,
        	u_int code
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        code		追加するVIFcode
        
[返り値]
        なし
        
[解説]
        VIFコードをパケットの末尾に追加します。
        

=========================================================================
sceVif0PkAddData                                                   [関数]
=========================================================================
                                                          VIFデータの追加
[形式]
        void sceVif0PkAddData(
        	sceVif0Packet *pPacket,
        	u_int data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するデータ
        
[返り値]
        なし
        
[解説]
        VIFデータをパケットの末尾に追加します。
        

=========================================================================
sceVif0PkAddDataN                                                  [関数]
=========================================================================
                                                          VIFデータの追加
[形式]
        void sceVif0PkAddDataN(
        	sceVif0Packet *pPacket,
        	u_int* pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        パケットの末尾にVIFデータを追加します。
        

=========================================================================
sceVif0PkAddUpkData128                                             [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif0PkAddUpkData128(
        	sceVif0Packet *pPacket,
        	u_long128 data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		データ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに128bitデータを追加します。
        

=========================================================================
sceVif0PkAddUpkData128N                                            [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif0PkAddUpkData128N(
        	sceVif0Packet *pPacket,
        	u_long128 *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに複数個の128bitデータを追加
        します。
        

=========================================================================
sceVif0PkAddUpkData32                                              [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif0PkAddUpkData32(
        	sceVif0Packet *pPacket,
        	u_int data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		データ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに32bitデータを追加します。
        

=========================================================================
sceVif0PkAddUpkData32N                                             [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif0PkAddUpkData32N(
        	sceVif0Packet *pPacket,
        	u_int *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに複数個の32bitデータを追加し
        ます。
        

=========================================================================
sceVif0PkAddUpkData64                                              [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif0PkAddUpkData64(
        	sceVif0Packet *pPacket,
        	u_long data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		データ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに64bitデータを追加します。
        

=========================================================================
sceVif0PkAddUpkData64N                                             [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif0PkAddUpkData64N(
        	sceVif0Packet *pPacket,
        	u_long *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに複数個の64bitデータを追加し
        ます。
        

=========================================================================
sceVif0PkAlign                                                     [関数]
=========================================================================
                                              VIFコードのアライメント調整
[形式]
        void sceVif0PkAlign(
        	sceVif0Packet *pPacket,
        	u_int bit,
        	u_int pos
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        bit		アラインの単位
        		0 : 32bit
        		1 : 64bit
        		2 : 128bit
        pos		アラインの位置
        		0- 3 (32bit単位)
        
[返り値]
        なし
        
[解説]
        アライメント調整のために必要な個数のVIF NOPを、パケットの末尾に追
        加します。VIF MPGコマンドをパケットに追加する際には、直前にこの関
        数を使用してアライメント調整を行う必要があります。bit,posはアライ
        メント調整の条件を指定するパラメータで、次のように指定します。
        
        次のVIFcode	bit	pos
        MPG		1	1
        そのほか		アライメント調整不要

=========================================================================
sceVif0PkCall                                                      [関数]
=========================================================================
                                                           CALLタグの追加
[形式]
        void sceVif0PkCall(
        	sceVif0Packet *pPacket,
        	u_long128 *pCall,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pCall		次のDMAtagのアドレス
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CALLタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkCloseUpkCode                                              [関数]
=========================================================================
                                             VIF UNPACKパケットのクローズ
[形式]
        void sceVif0PkCloseUpkCode(
        	sceVif0Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        VIF UNPACKコマンドをクローズします。
        

=========================================================================
sceVif0PkCnt                                                       [関数]
=========================================================================
                                                            CNTタグの追加
[形式]
        void sceVif0PkCnt(
        	sceVif0Packet *pPacket,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CNTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkDump                                                      [関数]
=========================================================================
                                                     パケットのダンプ出力
[形式]
        void sceVif0PkDump(
        	sceVif0Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        登録されているパケットを標準出力に16進ダンプします。
        この関数はデバッグ用に用意されています。
        

=========================================================================
sceVif0PkEnd                                                       [関数]
=========================================================================
                                                            ENDタグの追加
[形式]
        void sceVif0PkEnd(
        	sceVif0Packet *pPacket,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        ENDタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkInit                                                      [関数]
=========================================================================
                                                         パケットの初期化
[形式]
        void sceVif0PkInit(
        	sceVif0Packet *pPacket,
        	u_long128 *pBase
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pBase		パケット領域の先頭アドレス
        
[返り値]
        なし
        
[解説]
        パケットを初期化します。
        

=========================================================================
sceVif0PkNext                                                      [関数]
=========================================================================
                                                           NEXTタグの追加
[形式]
        void sceVif0PkNext(
        	sceVif0Packet *pPacket,
        	u_long128 *pNext,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pNext		次のDMAtagのアドレス
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        NEXTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkOpenUpkCode                                               [関数]
=========================================================================
                                             VIF UNPACKパケットのオープン
[形式]
        void sceVif0PkOpenUpkCode(
        	sceVif0Packet *pPacket,
        	u_short vuaddr,
        	u_int upkcmd,
        	u_int cl,
        	u_int wl
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        vuaddr		データ転送先のVU Mem0アドレス
        upkcmd		UNPACKのコマンドコード(8bit)
        cl		サイクルレジスタ(cl)の数
        wl		サイクルレジスタ(wl)の数
        
[返り値]
        なし
        
[解説]
        VIF UNPACKコマンドをオープンし、パケットの末尾に追加します。
        これ以降sceVif0PkCloseUpkCode()によってクローズするまでVIFcodeのN
        UMフィールドは管理され、sceVif0PkAddUpkData32()などを用いてデータ
        をパケットに追加すればそのサイズに基づいて適切に設定されるように
        なります。
        
[備考]
        あらかじめ適切なDMAtagをパケットに追加しておく必要があります。

=========================================================================
sceVif0PkRef                                                       [関数]
=========================================================================
                                                            REFタグの追加
[形式]
        void sceVif0PkRef(
        	sceVif0Packet *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkRefe                                                      [関数]
=========================================================================
                                                           REFEタグの追加
[形式]
        void sceVif0PkRefe(
        	sceVif0Packet *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFEタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkRefMpg                                                    [関数]
=========================================================================
                                    REFタグおよびマイクロプログラムの追加
[形式]
        void sceVif0PkRefMpg(
        	sceVif0Packet *pPacket,
        	u_short vuaddr,
        	u_long128 *pMicro,
        	u_int size,
        	u_int opt1
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        vuaddr		転送先のμMem0アドレス(64bit単位)
        pMicro		転送元アドレス
        size		マイクロプログラムのサイズ(64bit単位)
        opt1		空き領域に入れるVIFcode。通常はVIF NOPを入れる。
        
[返り値]
        なし
        
[解説]
        指定されたマイクロプログラムをMicroMem0へロードします。
        REFタグを生成し、パケットの末尾に追加します。
        

=========================================================================
sceVif0PkRefs                                                      [関数]
=========================================================================
                                                           REFSタグの追加
[形式]
        void sceVif0PkRefs(
        	sceVif0Packet *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFSタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkReserve                                                   [関数]
=========================================================================
                                                         データ領域の追加
[形式]
        u_int *sceVif0PkReserve(
        	sceVif0Packet *pPacket,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        count		リザーブするデータの数(word単位)
        
[返り値]
        リザーブされた領域の先頭アドレス
        
[解説]
        パケットの末尾にcount(word単位)の領域をリザーブします。
        リザーブされた領域のサイズは、有効なDMAtagおよびオープンされてい
        るVIF UNPACKコマンドがあれば、それぞれのサイズ情報(qwc,NUM)に反映
        されます。
        

=========================================================================
sceVif0PkReset                                                     [関数]
=========================================================================
                                               パケット管理情報のリセット
[形式]
        void sceVif0PkReset(
        	sceVif0Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケット管理情報をリセットします。
        パケットの末尾を示すpCurrentにpBaseの値がコピーされます。
        

=========================================================================
sceVif0PkRet                                                       [関数]
=========================================================================
                                                            RETタグの追加
[形式]
        void sceVif0PkRet(
        	sceVif0Packet *pPacket,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        RETタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif0PkSize                                                      [関数]
=========================================================================
                                                 パケットの使用サイズ取得
[形式]
        u_int sceVif0PkSize(
        	sceVif0Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケットに登録されているデータのサイズ(qword単位)を返します。
        式で表すとpCurrent-pBaseです。
        

=========================================================================
sceVif0PkTerminate                                                 [関数]
=========================================================================
                                                   パケットのターミネート
[形式]
        u_long128 *sceVif0PkTerminate(
        	sceVif0Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        ターミネートされた次のアドレス
        
[解説]
        パケットをターミネートします。
        つまり、そのとき有効なDMAtagのサイズ管理を終えます。
        
[備考]
        パケットをターミネートする前に、VIF UNPACKコードがオープンされて
        いればクローズしなければなりません。
        

=========================================================================
sceVif1PkAddCode                                                   [関数]
=========================================================================
                                                          VIFコードの追加
[形式]
        void sceVif1PkAddCode(
        	sceVif1Packet *pPacket,
        	u_int code
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        code		追加するVIFcode
        
[返り値]
        なし
        
[解説]
        VIFコードをパケットの末尾に追加します。
        

=========================================================================
sceVif1PkAddData                                                   [関数]
=========================================================================
                                                          VIFデータの追加
[形式]
        void sceVif1PkAddData(
        	sceVif1Packet *pPacket,
        	u_int data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するデータ
        
[返り値]
        なし
        
[解説]
        パケットの末尾にVIFデータを追加します。
        

=========================================================================
sceVif1PkAddDataN                                                  [関数]
=========================================================================
                                                          VIFデータの追加
[形式]
        void sceVif1PkAddDataN(
        	sceVif1Packet *pPacket,
        	u_int* pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        パケットの末尾に複数個のVIFデータを追加します。
        

=========================================================================
sceVif1PkAddDirectData                                             [関数]
=========================================================================
                                                       DIRECTデータの追加
[形式]
        void sceVif1PkAddDirectData(
        	sceVif1Packet *pPacket,
        	u_long128 data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するデータ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF DIRECTコマンドにデータを追加します。
        

=========================================================================
sceVif1PkAddDirectDataN                                            [関数]
=========================================================================
                                                       DIRECTデータの追加
[形式]
        void sceVif1PkAddDirectDataN(
        	sceVif1Packet *pPacket,
        	u_long128* pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF DIRECTコマンドに複数個のデータを追加します。
        

=========================================================================
sceVif1PkAddGsAD                                                   [関数]
=========================================================================
                                         GS packed mode A+Dコマンドの追加
[形式]
        void sceVif1PkAddGsAD(
        	sceVif1Packet *pPacket,
        	u_int address,
        	u_long data
        );
        
[引数]
        pPacket		パケット管理情報へのポインタ
        address		GSのコマンド番号
        data		GSのコマンドパラメータ
        
[返り値]
        なし
        
[解説]
        GSのpacked mode A+Dコマンドをパケットに追加します。
        GIFtagがpacked modeのA+Dでオープンされている必要があります。
        

=========================================================================
sceVif1PkAddGsData                                                 [関数]
=========================================================================
                                                           GSデータの追加
[形式]
        void sceVif1PkAddGsData(
        	sceVif1Packet *pPacket,
        	u_long data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するデータ
        
[返り値]
        なし
        
[解説]
        GSのデータをパケットに追加します。
        GIFtagがオープンされている必要があります。
        

=========================================================================
sceVif1PkAddGsDataN                                                [関数]
=========================================================================
                                                           GSデータの追加
[形式]
        void sceVif1PkAddGsDataN(
        	sceVif1Packet *pPacket,
        	u_long* pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数(64bit単位)
        
[返り値]
        なし
        
[解説]
        GSのデータを複数個パケットに追加します。
        GIFtagがオープンされている必要があります。
        

=========================================================================
sceVif1PkAddGsPacked                                               [関数]
=========================================================================
                                               GS packed modeデータの追加
[形式]
        void sceVif1PkAddGsPacked(
        	sceVif1Packet *pPacket,
        	u_long128 data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		追加するGSコマンドパラメータ
        
[返り値]
        なし
        
[解説]
        GSのpacked modeで転送するデータ（A+D以外のコマンド）をパケットに
        追加します。
        GIFtagがpacked modeでオープンされている必要があります。
        

=========================================================================
sceVif1PkAddGsPackedN                                              [関数]
=========================================================================
                                               GS packed modeデータの追加
[形式]
        void sceVif1PkAddGsPackedN(
        	sceVif1Packet *pPacket,
        	u_long128 *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するGSコマンドパラメータのアドレス
        count		追加するGSコマンドパラメータの個数
        
[返り値]
        なし
        
[解説]
        GSのpacked modeで転送するデータ（A+D以外のコマンド）を複数個パケ
        ットに追加します。
        GIFtagがpacked modeでオープンされている必要があります。
        

=========================================================================
sceVif1PkAddUpkData128                                             [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif1PkAddUpkData128(
        	sceVif1Packet *pPacket,
        	u_long128 data,
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		データ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに128bitデータを追加します。
        

=========================================================================
sceVif1PkAddUpkData128N                                            [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif1PkAddUpkData128N(
        	sceVif1Packet *pPacket,
        	u_long128 *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに複数個の128bitデータを追加
        します。
        

=========================================================================
sceVif1PkAddUpkData32                                              [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif1PkAddUpkData32(
        	sceVif1Packet *pPacket,
        	u_int data
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		データ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに32bitデータを追加します。
        

=========================================================================
sceVif1PkAddUpkData32N                                             [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif1PkAddUpkData32N(
        	sceVif1Packet *pPacket,
        	u_int *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに複数個の32bitデータを追加し
        ます。
        

=========================================================================
sceVif1PkAddUpkData64                                              [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif1PkAddUpkData64(
        	sceVif1Packet *pPacket,
        	u_long data,
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        data		データ
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに64bitデータを追加します。
        

=========================================================================
sceVif1PkAddUpkData64N                                             [関数]
=========================================================================
                                                       UNPACKデータの追加
[形式]
        void sceVif1PkAddUpkData64N(
        	sceVif1Packet *pPacket,
        	u_long *pData,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pData		追加するデータの先頭アドレス
        count		追加するデータの数
        
[返り値]
        なし
        
[解説]
        オープンされているVIF UNPACKコマンドに複数個の64bitデータを追加し
        ます。
        

=========================================================================
sceVif1PkAlign                                                     [関数]
=========================================================================
                                              VIFコードのアライメント調整
[形式]
        void sceVif1PkAlign(
        	sceVif1Packet *pPacket,
        	u_int bit,
        	u_int pos
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        bit		アラインの単位
        		0 : 32bit
        		1 : 64bit
        		2 : 128bit
        pos		アラインの位置
        		0- 3 (32bit単位)
        
[返り値]
        なし
        
[解説]
        アライメント調整のために必要な個数のVIF NOPを、パケットの末尾に追
        加します。
        VIF MPG / VIF DIRECT / VIF DIRECTHLをパケットに追加する際には、そ
        の直前にこの関数を用いてアライメント調整を行う必要があります。ア
        ライメント調整の条件はVIFcodeによって異なりますので、bit,posで次
        のように指定します。
        
        次のVIFcode	bit	pos
        MPG		1	1
        DIRECT		2	3
        DIRECTHL	2	3
        そのほか		アライメント調整不要
        

=========================================================================
sceVif1PkCall                                                      [関数]
=========================================================================
                                                           CALLタグの追加
[形式]
        void sceVif1PkCall(
        	sceVif1Packet *pPacket,
        	u_long128 *pCall,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pCall		次のDMAtagのアドレス
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CALLタグを追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkCloseDirectCode                                           [関数]
=========================================================================
                                             VIF DIRECTパケットのクローズ
[形式]
        void sceVif1PkCloseDirectCode(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        VIF DIRECTコマンドをクローズします。
        
[備考]
        この関数を用いてVIF DIRECTコマンドをクローズする前に、オープンさ
        れているGIFtagがあればクローズしておく必要があります。
        

=========================================================================
sceVif1PkCloseDirectHLCode                                         [関数]
=========================================================================
                                           VIF DIRECTHLパケットのクローズ
[形式]
        void sceVif1PkCloseDirectHLCode(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        VIF DIRECTHLコマンドをクローズします。
        
[備考]
        この関数を用いてVIF DIRECTHLコマンドをクローズする前に、オープン
        されているGIFtagがあればクローズしておく必要があります。
        

=========================================================================
sceVif1PkCloseGifTag                                               [関数]
=========================================================================
                                                         GIFtagのクローズ
[形式]
        void sceVif1PkCloseGifTag(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        GIFtagをクローズします。
        

=========================================================================
sceVif1PkCloseUpkCode                                              [関数]
=========================================================================
                                             VIF UNPACKパケットのクローズ
[形式]
        void sceVif1PkCloseUpkCode(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        VIF UNPACKコマンドをクローズします。
        

=========================================================================
sceVif1PkCnt                                                       [関数]
=========================================================================
                                                            CNTタグの追加
[形式]
        void sceVif1PkCnt(
        	sceVif1Packet *pPacket,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        CNTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkDump                                                      [関数]
=========================================================================
                                                     パケットのダンプ出力
[形式]
        void sceVif1PkDump(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        登録されているパケットを標準出力に16進ダンプします。
        この関数はデバッグ用に用意されています。
        

=========================================================================
sceVif1PkEnd                                                       [関数]
=========================================================================
                                                            ENDタグの追加
[形式]
        void sceVif1PkEnd(
        	sceVif1Packet *pPacket,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        ENDタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkInit                                                      [関数]
=========================================================================
                                                         パケットの初期化
[形式]
        void sceVif1PkInit(
        	sceVif1Packet *pPacket,
        	u_long128 *pBase
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pBase		パケット領域の先頭アドレス
        
[返り値]
        なし
        
[解説]
        パケットを初期化します。
        

=========================================================================
sceVif1PkNext                                                      [関数]
=========================================================================
                                                           NEXTタグの追加
[形式]
        void sceVif1PkNext(
        	sceVif1Packet *pPacket,
        	u_long128 *pNext,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pNext		次のDMAtagのアドレス
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        NEXTタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkOpenDirectCode                                            [関数]
=========================================================================
                                             VIF DIRECTパケットのオープン
[形式]
        void sceVif1PkOpenDirectCode(
        	sceVif1Packet *pPacket,
        	int stall
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        stall		割り込み制御ビット(iビット)の設定
        		0:割り込みなし(i=0)
        		1:割り込み発生(i=1)
        
[返り値]
        なし
        
[解説]
        アライメント調整のうえVIF DIRECTコマンドをオープンし、パケットの
        末尾に追加します。
        これ以降sceVif1PkCloseDirectCode()でクローズするまで、VIFcodeのNU
        Mフィールドは管理され、sceVif1PkAddDirectData()などを用いて追加し
        たデータのサイズに基づいて、適切に設定されるようになります。
        

=========================================================================
sceVif1PkOpenDirectHLCode                                          [関数]
=========================================================================
                                           VIF DIRECTHLパケットのオープン
[形式]
        void sceVif1PkOpenDirectHLCode(
        	sceVif1Packet *pPacket,
        	int stall
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        stall		割り込み制御ビット(iビット)の設定
        		0:割り込みなし(i=0)
        		1:割り込み発生(i=1)
        
[返り値]
        なし
        
[解説]
        アライメント調整のうえVIF DIRECTHLコマンドをオープンし、パケット
        の末尾に追加します。
        これ以降sceVif1PkCloseDirectHLCode()でクローズするまで、VIFcodeの
        NUMフィールドは管理され、sceVif1PkAddDirectData()などを用いて追加
        したデータのサイズに基づいて、適切に設定されるようになります。
        

=========================================================================
sceVif1PkOpenGifTag                                                [関数]
=========================================================================
                                                         GIFtagのオープン
[形式]
        void sceVif1PkOpenGifTag(
        	sceVif1Packet *pPacket,
        	u_long128 gifTag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        gifTag		追加するGIFtag
        
[返り値]
        なし
        
[解説]
        GIFtagをオープンし、すでにオープンされているVIF DIRECTコマンドに
        追加します。
        これ以降sceVif1PkCloseGifTag()でクローズするまで、GIFtagのqwcフィ
        ールドは管理され、sceVif1PkAddGsData()などを用いて追加したデータ
        サイズに基づいて適切に設定されます。
        

=========================================================================
sceVif1PkOpenUpkCode                                               [関数]
=========================================================================
                                             VIF UNPACKパケットのオープン
[形式]
        void sceVif1PkOpenUpkCode(
        	sceVif1Packet *pPacket,
        	u_short vuaddr,
        	u_int upkcmd,
        	u_int cl,
        	u_int wl
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        vuaddr		データ転送先のVU Mem1アドレス
        upkcmd		UNPACKのコマンドコード(8bit)
        cl		サイクルレジスタ(cl)の数
        wl		サイクルレジスタ(wl)の数
        
[返り値]
        なし
        
[解説]
        VIF UNPACKコマンドをオープンし、パケットの末尾に追加します。
        これ以降sceVif1PkCloseUpkCode()によってクローズするまでVIFcodeのN
        UMフィールドは管理され、sceVif1PkAddUpkData32()などを用いてデータ
        をパケットに追加すればそのサイズに基づいて適切に設定されるように
        なります。
        
[備考]
        あらかじめ適切なDMAtagをパケットに追加しておく必要があります。

=========================================================================
sceVif1PkRef                                                       [関数]
=========================================================================
                                                            REFタグの追加
[形式]
        void sceVif1PkRef(
        	sceVif1Packet *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkRefe                                                      [関数]
=========================================================================
                                                           REFEタグの追加
[形式]
        void sceVif1PkRefe(
        	sceVif1Packet *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFEタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkRefLoadImage                                              [関数]
=========================================================================
                            REFタグおよびGSへ転送するイメージデータの追加
[形式]
        void sceVif1PkRefLoadImage(
        	sceVif1Packet *pPacket,
        	u_short bp,
        	u_char psm,
        	u_short bw,
        	u_long128 *image,
        	u_int size,
        	u_int x,
        	u_int y,
        	u_int w,
        	u_int h
        );
        
[引数]
        pPacket		パケット管理情報へのポインタ
        bp		転送先バッファの先頭アドレス
        		(bp x 64が実際のアドレスになる)
        psm		データフォーマット
        		定数			値	フォーマット
        		SCE_GS_PSMCT32	0	PSMCT32
        		SCE_GS_PSMCT24	1	PSMCT24
        		SCE_GS_PSMCT16	2	PSMCT16
        		SCE_GS_PSMCT16S	10	PSMCT16S
        		SCE_GS_PSMT8		19	PSMT8
        		SCE_GS_PSMT4		20	PSMT4
        		SCE_GS_PSMT8H	27	PSMT8H
        		SCE_GS_PSMT4HL	36	PSMT4HL
        		SCE_GS_PSMT4HH	44	PSMT4HH
        		SCE_GS_PSMZ32		48	PSMZ32
        		SCE_GS_PSMZ24		49	PSMZ24
        		SCE_GS_PSMZ16		50	PSMZ16
        		SCE_GS_PSMZ16S	58	PSMZ16S
        bw		転送先バッファ幅
        		(bw x 64が実際の幅になる)
        image		転送するデータの先頭アドレス
        size		転送するデータのサイズ	qword単位
        x, y		転送先領域の左上端点
        w, h		転送領域の幅、高さ
        
[返り値]
        なし
        
[解説]
        GSのローカルメモリに転送するイメージデータをREFタグとともにパケッ
        トに追加します。
        サイズが大きいと自動的に分割して転送します。
        
[備考]
        テクスチャデータをGSに転送したときには、テクスチャページバッファ
        の無効化を行う必要があります。
        

=========================================================================
sceVif1PkRefMpg                                                    [関数]
=========================================================================
                                    REFタグおよびマイクロプログラムの追加
[形式]
        void sceVif1PkRefMpg(
        	sceVif1Packet *pPacket,
        	u_short vuaddr,
        	u_long128 *pMicro,
        	u_int size,
        	u_int opt1
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        vuaddr		転送先のμMem1アドレス(64bit単位)
        pMicro		転送元アドレス
        size		マイクロプログラムのサイズ(64bit単位)
        opt1		空き領域に入れるVIFcode。通常はVIF NOPを入れる。
        
[返り値]
        なし
        
[解説]
        指定されたマイクロプログラムをMicroMem1へロードします。
        REFタグを生成し、パケットの末尾に追加します。
        

=========================================================================
sceVif1PkRefs                                                      [関数]
=========================================================================
                                                           REFSタグの追加
[形式]
        void sceVif1PkRefs(
        	sceVif1Packet *pPacket,
        	u_long128 *pRef,
        	u_int size,
        	u_int opt1,
        	u_int opt2,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        pRef		転送データのアドレス
        size		転送データのサイズ(qword単位)
        opt1		DMAtag上位（bit95-64）に入れるデータ
        opt2		DMAtag上位（bit127-96）に入れるデータ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        REFSタグをパケットの末尾に追加します。
        opt1,opt2はDMAtagの上位64bitに入れるデータです。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkReserve                                                   [関数]
=========================================================================
                                                         データ領域の追加
[形式]
        u_int *sceVif1PkReserve(
        	sceVif1Packet *pPacket,
        	u_int count
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        count		リザーブするデータの数(word単位)
        
[返り値]
        リザーブされた領域の先頭アドレス
        
[解説]
        リザーブされた領域のサイズは、有効なDMAtagやオープンしているVIFco
        de/GIFtagがあればそれぞれのサイズ情報に反映されます。
        

=========================================================================
sceVif1PkReset                                                     [関数]
=========================================================================
                                               パケット管理情報のリセット
[形式]
        void sceVif1PkReset(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケット管理情報をリセットします。
        パケットの末尾を示すpCurrentにpBaseの値がコピーされます。
        

=========================================================================
sceVif1PkRet                                                       [関数]
=========================================================================
                                                            RETタグの追加
[形式]
        void sceVif1PkRet(
        	sceVif1Packet *pPacket,
        	u_int flag
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        flag		IRQ,PCEを指定するビットパターン
        
[返り値]
        なし
        
[解説]
        RETタグをパケットの末尾に追加します。
        これ以後パケットに追加するデータのサイズはカウントされ、サイズ情
        報（QWCフィールド）に反映されます。
        flagは、bit31でIRQ、bit26-27でPCEを指定します。DMAtagの下位32bit
        にOr-setされるので、その他のビットは0にしておかなければなりません。
        

=========================================================================
sceVif1PkSize                                                      [関数]
=========================================================================
                                                 パケットの使用サイズ取得
[形式]
        u_int sceVif1PkSize(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        なし
        
[解説]
        パケットに追加されているサイズ(qword単位)を返します。
        式で表すとpCurrnet-pBaseです。
        

=========================================================================
sceVif1PkTerminate                                                 [関数]
=========================================================================
                                                   パケットのターミネート
[形式]
        u_long128 *sceVif1PkTerminate(
        	sceVif1Packet *pPacket
        );
        
[引数]
        pPacket		パケット管理情報のポインタ
        
[返り値]
        ターミネートされた次のアドレス
        
[解説]
        パケットをターミネートします。
        つまり、そのとき有効なDMAtagのサイズ管理を終えます。
        
[備考]
        パケットをターミネートする前に、オープンされているVIFcodeやGIFtag
        があればクローズしておかなければなりません。
