[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C)  2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

                              EE Kernel API
                             ==============


 1 構造体
==========

=========================================================================
SemaParam                                                        [構造体]
=========================================================================
                                                                 セマフォ
[構造]
        struct SemaParam {
        	int	currentCount;
        	int	maxCount;
        	int	initCount;
        	int	numWaitThreads;
        	int	attr;
        	u_int	option;
        }
        
[メンバ]
        currentCount		セマフォ現在値
        maxCount		セマフォ資源数の最大値
        initCount		セマフォ資源数の初期値
        numWaitThreads		セマフォ待ちスレッド数
        attr			セマフォ属性
        option			ユーザ定義の付加情報
        
[解説]
        セマフォの構造体です。
        optionはEE Kernelが関知しないメンバで、ユーザプログラムで任意に意
        味付けして使用することができます。
[備考]
        現在のバージョンでは、maxCountが正しく処理されません。
        

=========================================================================
ThreadParam                                                      [構造体]
=========================================================================
                                                           スレッドの属性
[構造]
        struct ThreadParam {
        	int	status;
        	void	(*entry)(void *);
        	void	*stack;
        	int	stackSize;
        	void	*gpReg;
        	int	initPriority;
        	int	currentPriority;
        	u_int	attr;
        	u_int	option;
        	int	waitType;
        	int	waitId;
        	int	wakeupCount;
        };
        
[メンバ]
        status		スレッド状態
        entry		実行開始アドレス (*)
        stack		スレッドの使用するスタック領域のアドレス (*)
        		（16byteアライメント）
        stackSize	スタックサイズ（バイト単位：16の倍数） (*)
        gpReg		GP（Global Pointer）レジスタの値 (*)
        initPriority	優先度 初期値 (0〜128) (*)
        currentPriority	優先度 現在値 (0〜128)
        attr		System Reserved（値は任意）
        option		ユーザ定義の付加情報 (*)
        waitType	WAIT要因
        waitId		WAIT要因がセマフォの時セマフォID
        wakeupCount	Wakup要求数
        
        (*) スレッド生成時に必要な情報
        
[解説]
        スレッドの属性を保持する構造体です。
        statusはスレッドの状態を次の定数で示します。
        
        +---------------+----+----------------+
        |定数            値   状態            |
        +               +    +                +
        |THS_RUN         0x01 RUN状態         |
        |THS_READY       0x02 READY状態       |
        |THS_WAIT        0x04 WAIT状態        |
        |THS_SUSPEND     0x08 SUSPEND状態     |
        |THS_WAITSUSPEND 0x0c WAIT-SUSPEND状態|
        |THS_DORMANT     0x10 DORMANT状態     |
        +---------------+----+----------------+
        
        optionはEE Kernelが関知しないメンバで、ユーザプログラムで任意に意
        味付けして使用することができます。
        
        waitTypeはWAIT要因を次の値で表します。
        
        +--+--------------+
        |値 要因          |
        +  +              +
        |0  WAIT状態でない|
        |1  WAKUP要求待ち |
        |2  セマフォ待ち  |
        +--+--------------+
        

 2 関数
========


=========================================================================
AddDmacHandler                                                     [関数]
=========================================================================
                                                DMA割り込みハンドラの設定
[形式]
        int AddDmacHandler(
        	int channel,
        	int (*handler)(int ch),
        	int next
        );
        
[引数]
        channel	チャネル番号
        	定数			DMAチャネル
        	DMAC_VIF0	VIF0	DIR:to	GP:A
        	DMAC_VIF1	VIF1	DIR:both	GP:C
        	DMAC_GIF	GIF	DIR:to	GP:C
        	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
        	DMAC_TO_IPU	to IPU	DIR:to	GP:C
        	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
        	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        handler	ハンドラ関数
        next	すでに登録されているハンドラのハンドラID
        	0 :先頭に登録する
        	-1:最後に登録する
        
[返り値]
        ハンドラID	正常終了
        -1		エラー終了
[解説]
        DMAチャネルごとにDMA割り込みハンドラを設定します。
        channelはDMAチャネルの番号、handlerはDMA割り込み時に呼び出される
        ハンドラのアドレスで、handlerの引数chはDMAチャネルの番号です。nex
        tはすでに登録されているDMA割り込みハンドラのアドレスで、handlerは
        nextの前に呼び出されることになります。ただしnextに0を指定するとha
        ndlerが先頭の割り込みハンドラとして、-1を指定すると最後の割り込み
        ハンドラとして登録されます。
        
[備考]
        DMA割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセー
        ブされ、ハンドラの実行を終えるとリストアされます。一方、FPUレジス
        タはセーブ／リストアが行われませんので注意してください。
        割り込みハンドラの作成にあたっては、割り込み禁止状態であること、
        使用できるAPIが異なることなど、いくつか特別な注意が必要です。\ove
        rview\eekernelに注意事項が記載されていますので参照してください。
        割り込みハンドラが-1を返した場合、それ以降に登録されている割り込
        みハンドラは呼び出されません。
        

=========================================================================
AddDmacHandler2                                                    [関数]
=========================================================================
                                                DMA割り込みハンドラの設定
[形式]
        int AddDmacHandler2(
        	int channel,
        	int (*handler)(int ch, void *arg, void *addr),
        	int next,
        	void *arg
        );
        
[引数]
        channel	チャネル番号
        	定数			DMAチャネル
        	DMAC_VIF0	VIF0	DIR:to	GP:A
        	DMAC_VIF1	VIF1	DIR:both	GP:C
        	DMAC_GIF	GIF	DIR:to	GP:C
        	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
        	DMAC_TO_IPU	to IPU	DIR:to	GP:C
        	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
        	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        handler	ハンドラ関数
        next	すでに登録されているハンドラのハンドラID
        	0 :先頭に登録する
        	-1:最後に登録する
        arg	ハンドラへ渡す引数
        
[返り値]
        ハンドラID	正常終了
        -1		エラー終了
[解説]
        DMAチャネルごとにDMA割り込みハンドラを設定します。割り込みハンド
        ラに渡される引数がAddDmacHandler()と異なります。
        channelはDMAチャネルの番号、handlerはDMA割り込み時に呼び出される
        ハンドラのアドレスです。handlerの引数chはDMAチャネルの番号、argは
        ハンドラへ渡す引数、addrは割り込みが発生した時のプログラムカウン
        タの値です。nextはすでに登録されているDMA割り込みハンドラのアドレ
        スで、handlerはnextの前に呼び出されることになります。ただしnextに
        0を指定するとhandlerが先頭の割り込みハンドラとして、-1を指定する
        と最後の割り込みハンドラとして登録されます。
        
[備考]
        DMA割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセー
        ブされ、ハンドラの実行を終えるとリストアされます。一方、FPUレジス
        タはセーブ／リストアが行われませんので注意してください。
        割り込みハンドラの作成にあたっては、割り込み禁止状態であること、
        使用できるAPIが異なることなど、いくつか特別な注意が必要です。\ove
        rview\eekernelに注意事項が記載されていますので参照してください。
        割り込みハンドラが-1を返した場合、それ以降に登録されている割り込
        みハンドラは呼び出されません。
        
        

=========================================================================
AddIntcHandler                                                     [関数]
=========================================================================
                                               INTC割り込みハンドラの設定
[形式]
        int AddIntcHandler(
        	int cause,
        	int (*handler)(int ca),
        	int next
        );
        
[引数]
        cause	割り込み要因
        	定数			割り込み要因
        	INTC_GS		GS
        	INTC_SBUS		SBUS
        	INTC_VBLANK_S	V-blank start
        	INTC_VBLANK_E	V-blank end
        	INTC_VIF0		VIF0
        	INTC_VIF1		VIF1
        	INTC_VU0		VU0
        	INTC_VU1		VU1
        	INTC_IPU		IPU
        	INTC_TIM0		Timer0
        	INTC_TIM1		Timer1
        handler	ハンドラ関数
        next		すでに登録されているハンドラのハンドラID
        		0 :先頭に登録する
        		-1:最後に登録する
        
[返り値]
        ハンドラID	正常終了
        -1		エラー終了
        
[解説]
        INTCの割り込み要因ごとにハンドラを登録します。
        causeは割り込み要因、handlerは割り込み発生時に呼び出されるハンド
        ラのアドレス、handlerの引数caは割り込み要因です。nextはすでに登録
        されている割り込みハンドラのハンドラIDで、handlerはnextの前に呼び
        出されることになります。ただしnextに0を指定するとhandlerが先頭の
        割り込みハンドラとして、-1を指定すると最後の割り込みハンドラとし
        て登録されます。
        
[備考]
        外部割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセー
        ブされ、ハンドラの実行を終えるとGPRはリストアされます。FPUレジス
        タのセーブ／リストアは行われませんので注意してください。
        割り込みハンドラの作成にあたっては、割り込み禁止状態であること、
        使用できるAPIが異なることなど、いくつか特別な注意が必要です。\ove
        rview\eekernelに注意事項が記載されていますので参照してください。
        割り込みハンドラが-1を返した場合、それ以降に登録されている割り込
        みハンドラは呼び出されません。
        
        

=========================================================================
AddIntcHandler2                                                    [関数]
=========================================================================
                                               INTC割り込みハンドラの設定
[形式]
        int AddIntcHandler2(
        	int cause,
        	int (*handler)(int ca, void *arg, void *addr),
        	int next
        	void *arg
        );
        
[引数]
        cause	割り込み要因
        	定数			割り込み要因
        	INTC_GS		GS
        	INTC_SBUS		SBUS
        	INTC_VBLANK_S	V-blank start
        	INTC_VBLANK_E	V-blank end
        	INTC_VIF0		VIF0
        	INTC_VIF1		VIF1
        	INTC_VU0		VU0
        	INTC_VU1		VU1
        	INTC_IPU		IPU
        	INTC_TIM0		Timer0
        	INTC_TIM1		Timer1
        handler	ハンドラ関数
        next		すでに登録されているハンドラのハンドラID
        		0 :先頭に登録する
        		-1:最後に登録する
        arg	ハンドラへ渡す引数
[返り値]
        ハンドラID	正常終了
        -1		エラー終了
        
[解説]
        INTCの割り込み要因ごとにハンドラを登録します。AddIntcHandler()と
        はハンドラへ渡す引数が異なります。
        causeは割り込み要因、handlerは割り込み発生時に呼び出されるハンド
        ラのアドレス、handlerの引数caは割り込み要因、argはハンドラへ渡す
        引数、addrは割り込みが発生した時のプログラムカウンタの値です。nex
        tはすでに登録されている割り込みハンドラのハンドラIDで、handlerはn
        extの前に呼び出されることになります。ただしnextに0を指定するとhan
        dlerが先頭の割り込みハンドラとして、-1を指定すると最後の割り込み
        ハンドラとして登録されます。
        
[備考]
        外部割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセー
        ブされ、ハンドラの実行を終えるとリストアされます。一方、FPUレジス
        タはセーブ／リストアが行われませんので注意してください。
        割り込みハンドラの作成にあたっては、割り込み禁止状態であること、
        使用できるAPIが異なることなど、いくつか特別な注意が必要です。\ove
        rview\eekernelに注意事項が記載されていますので参照してください。
        割り込みハンドラが-1を返した場合、それ以降に登録されている割り込
        みハンドラは呼び出されません。
        

=========================================================================
AddSbusIntcHandler                                                 [関数]
=========================================================================
                                               SBUS割り込みハンドラの設定
[形式]
        int AddSbusIntcHandler(
        	int cause,
        	void (*handler)(int ca)
        );
        
[引数]
        cause		割り込み要因
        handler		ハンドラ関数
        
[返り値]
        cause	正常終了
        -1	エラー終了
        
[解説]
        IOPからの割り込みであるSBUS割り込みのハンドラを登録します。
        causeは割り込み要因で、ユーザー定義の0から15までの値を指定します。
        最大16個までのハンドラを登録することができ、その中で、IOP側で割り
        込みをかける際に指定された要因の値を持つものが呼び出されます。た
        とえばIOPから0を指定して割り込みをかけると、causeに0を指定して登
        録されたハンドラが呼び出され、それ以外のハンドラは呼び出されませ
        ん。
        handlerは割り込み発生時に呼び出されるハンドラのアドレス、handler
        の引数caは割り込み要因です。
        
[備考]
        外部割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセー
        ブされ、ハンドラの実行を終えるとGPRはリストアされます。FPUレジス
        タのセーブ／リストアは行われませんので注意してください。
        割り込みハンドラの作成にあたっては、割り込み禁止状態であること、
        使用できるAPIが異なることなど、いくつか特別な注意が必要です。\ove
        rview\eekernelに注意事項が記載されていますので参照してください。
        SBUS割り込みは常に許可されており、禁止することはできません。
        

=========================================================================
CancelWakeupThread / iCancelWakeupThread                           [関数]
=========================================================================
                                               起床要求回数の取得とCancel
[形式]
        int CancelWakeupThread(
        	int tid
        );
        int iCancelWakeupThread(
        	int tid
        );
        
[引数]
        tid	スレッドID
        
[返り値]
        起床要求回数	正常終了
        
[解説]
        tidスレッドの起床要求回数を読み出し、クリアして、起床要求をすべて
        無効にします。
        

=========================================================================
ChangeThreadPriority / iChangeThreadPriority                       [関数]
=========================================================================
                                                     スレッドの優先度変更
[形式]
        int ChangeThreadPriority(
        	int tid,
        	int prio
        );
        int iChangeThreadPriority(
        	int tid,
        	int prio
        );
        
[引数]
        tid	スレッドID
        prio	スレッドの優先度
        
[返り値]
        優先度		正常終了
        
[解説]
        tidスレッドの優先度をprioに変更します。該当する優先度のレディーキ
        ューの最後に登録されます。変更した優先度はExitによって終了するま
        で有効です。
        

=========================================================================
CreateSema                                                         [関数]
=========================================================================
                                                           セマフォの作成
[形式]
        int CreateSema(
        	struct SemaParam *sema
        );
        
[引数]
        sema->initCount	セマフォの初期値
        sema->maxCount	セマフォの最大値
        sema->option	セマフォに関する付加情報。この値は、ReferSemaStatus()
        で参照できる。
        		マルチスレッドマネージャはこの値を関知しないので、適宜意味付け
        して利
        		用してよい。
        
[返り値]
        セマフォID	正常終了
        
[解説]
        計数セマフォを作成します。
        

=========================================================================
CreateThread                                                       [関数]
=========================================================================
                                                     新しいスレッドの生成
[形式]
        int CreateThread(
        	struct ThreadParam *param
        );
        
[引数]
        param->entry		実行を開始する関数のアドレス
        param->stack		スレッドが使用するスタック領域
        			(16byteアラインメント)
        param->stackSize		スタックサイズ(バイト単位:16の倍数)
        param->gpReg		GP(Global Pointer)レジスタの値
        param->initPriority	優先度(0〜63)
        param->option		ユーザ定義の情報
        
[返り値]
        スレッドID	正常終了
        
[解説]
        新しいスレッドの生成(TCBの割り付けとその初期設定)を行い、スレッド
        IDを返します。
        この関数が呼び出された時点では生成されたスレッドは実行されず、DOR
        MANT状態になります。
        
[備考]
        コンパイルオプションに-fno-commonを指定してください。
        
        スタック領域を16byteアライメントに揃えるには、次の例のように変数
        宣言します。
        	char stack[STACK_SIZE] __attribute__ ((aligned(16)));
        
        param->gpRegには、グローバル変数_gpのアドレスを代入してください。
        	param->gpReg = &_gp;

=========================================================================
DeleteSema                                                         [関数]
=========================================================================
                                                           セマフォの削除
[形式]
        int DeleteSema(
        	int sid
        );
        
[引数]
        sid	セマフォID
        
[返り値]
        セマフォID	正常終了
        
[解説]
        sidセマフォを削除します。セマフォの待ちキューに登録されていたスレ
        ッドにはエラーが返ります。
        

=========================================================================
DeleteThread                                                       [関数]
=========================================================================
                                                           スレッドの削除
[形式]
        int DeleteThread(
        	int tid
        );
        
[引数]
        tid	削除するスレッドのID
        
[返り値]
        スレッドID	正常終了
        
[解説]
        tidスレッドを削除し、TCBを解放します。対象とするスレッドはDORMANT
        状態でなければなりません。
        
[備考]
        自スレッドを削除する場合は、ExitDeleteThread()を使用します。
        

=========================================================================
DI                                                                 [関数]
=========================================================================
                                                             割り込み禁止
[形式]
        DI( void );
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        CPUの割り込み許可ビットを0にします。
        割り込み許可ビットはスレッドのコンテキストに含まれません。
        この機能は、細かい単位で割り込みを制御するため、たとえばVU0をマク
        ロ命令で制御する場合などのために用意されたものです。実行権の制御
        にはスレッドの優先順位、排他制御にはセマフォを使用してください。
        
[備考]
        DI()を呼び出した後の割り込み禁止状態では、printf()は使用できませ
        ん。scePrintf()を使用してください。
        

=========================================================================
DisableDmac / iDisableDmac                                         [関数]
=========================================================================
                                                          DMA割り込み停止
[形式]
        int DisableDmac(
        	int channel
        );
        int iDisableDmac(
        	int channel
        );
        
[引数]
        channel	チャネル番号
        	定数			DMAチャネル
        	DMAC_VIF0	VIF0	DIR:to	GP:A
        	DMAC_VIF1	VIF1	DIR:both	GP:C
        	DMAC_GIF	GIF	DIR:to	GP:C
        	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
        	DMAC_TO_IPU	to IPU	DIR:to	GP:C
        	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
        	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        
[返り値]
        0	すでに停止状態にある
        1	停止状態に移行
        
[解説]
        channelのDMA終了割り込みを停止します。
        

=========================================================================
DisableIntc / iDisableIntc                                         [関数]
=========================================================================
                                                         INTC割り込み停止
[形式]
        int DisableIntc(
        	int cause
        );
        int iDisableIntc(
        	int cause
        );
        
[引数]
        cause	割り込み要因
        	定数			割り込み要因
        	INTC_GS		GS
        	INTC_SBUS		SBUS
        	INTC_VBLANK_S	V-blank start
        	INTC_VBLANK_E	V-blank end
        	INTC_VIF0		VIF0
        	INTC_VIF1		VIF1
        	INTC_VU0		VU0
        	INTC_VU1		VU1
        	INTC_IPU		IPU
        	INTC_TIM0		Timer0
        	INTC_TIM1		Timer1
        
[返り値]
        0	すでに停止状態にある
        1	停止状態に移行
        
[解説]
        causeを要因とする割り込みを停止します。

=========================================================================
EI                                                                 [関数]
=========================================================================
                                                             割り込み許可
[形式]
        EI( void );
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        CPUの割り込み許可ビットを1にします。
        割り込み許可ビットはスレッドのコンテクストに含まれません。
        この機能は、細かい単位で割り込みを制御するため、たとえばVU0をマク
        ロ命令で制御する場合などのために用意されたものです。実行権の制御
        にはスレッドの優先順位、排他制御にはセマフォを使用してください。
        

=========================================================================
EnableDmac / iEnableDmac                                           [関数]
=========================================================================
                                                          DMA割り込み開始
[形式]
        int EnableDmac(
        	int channel
        );
        int iEnableDmac(
        	int channel
        );
        
[引数]
        channel	チャネル番号
        	定数		DMAチャネル
        	DMAC_VIF0	VIF0	DIR:to	GP:A
        	DMAC_VIF1	VIF1	DIR:both	GP:C
        	DMAC_GIF	GIF	DIR:to	GP:C
        	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
        	DMAC_TO_IPU	to IPU	DIR:to	GP:C
        	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
        	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        
[返り値]
        0	すでに開始状態にある
        1	開始状態に移行
        
[解説]
        channelのDMA終了割り込みを開始します。
        

=========================================================================
EnableIntc / iEnableIntc                                           [関数]
=========================================================================
                                                         INTC割り込み開始
[形式]
        int EnableIntc(
        	int cause
        );
        int iEnableIntc(
        	int cause
        );
        
[引数]
        cause	割り込み要因
        	定数			割り込み要因
        	INTC_GS		GS
        	INTC_SBUS		SBUS
        	INTC_VBLANK_S	V-blank start
        	INTC_VBLANK_E	V-blank end
        	INTC_VIF0		VIF0
        	INTC_VIF1		VIF1
        	INTC_VU0		VU0
        	INTC_VU1		VU1
        	INTC_IPU		IPU
        	INTC_TIM0		Timer0
        	INTC_TIM1		Timer1
        
[返り値]
        0	すでに許可状態にある
        1	許可状態に移行
        
[解説]
        causeを要因とする割り込みを開始します。

=========================================================================
ExitDeleteThread                                                   [関数]
=========================================================================
                                                   自スレッドの終了と削除
[形式]
        void ExitDeleteThread( void );
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        自スレッドを終了し、さらに削除します。本システムコールは、呼び出
        し元に戻ることはないので返値はありません。
        
        スレッドが終了する際に、セマフォ等の資源を自動的に解放することは
        ありません。
        

=========================================================================
ExitThread                                                         [関数]
=========================================================================
                                                         自スレッドの終了
[形式]
        void ExitThread( void );
        
[引数]
        なし
        
[返り値]
        なし
        
[解説]
        自スレッドを終了し、DORMANT状態に移行します。本システムコールは、
        呼び出し元に戻ることはないので返値はありません。
        
        スレッドが終了する際に、セマフォ等の資源を自動的に解放することは
        ありません。

=========================================================================
ExpandScratchPad                                                   [関数]
=========================================================================
                                             スクラッチパットの擬似的拡張
[形式]
        int ExpandScratchPad(
        	u_int	page
        );
        
[引数]
        page		4Kbyteにアラインメントされた8Kbyteの連続したメモリ領域
        
[返り値]
        TLB index	正常終了
        -1		エラー終了
        
[解説]
        スクラッチパッド(0x70000000 - 0x70003fff)の直後の論理アドレスに、
        引数pageで指定されるメモリ領域を cached 領域としてマップする。引
        数 page が 0 のとき、マップされている領域を解除する。
        

=========================================================================
FlushCache / iFlushCache                                           [関数]
=========================================================================
                                                       キャッシュ掃き出し
[形式]
        void FlushCache(
        	int operation
        );
        void iFlushCache(
        	int operation
        );
        
[引数]
        operation   キャッシュに対する命令
                    0x0 WRITEBACK_DCACHE : データキャッシュの内容をすべて
        書き戻す
                    0x1 INVALIDATE_DCACHE : データキャッシュの内容をすべ
        て無効にする
                    0x2 INVALIDATE_ICACHE : 命令キャッシュの内容をすべて
        無効にする
                    0x3 INVALIDATE_CACHE : 命令/データキャッシュの内容を
        すべて無効にする
        
[返り値]
        なし
        
[解説]
        キャッシュの掃き出し処理を行います。キャッシュの内容をメモリに書
        き戻すか、破棄するかを選ぶことができます。
[関連項目]
        SyncDCache(), iSyncDCache()

=========================================================================
GetCop0 / iGetCop0                                                 [関数]
=========================================================================
                                                       COP0レジスタの取得
[形式]
        u_int GetCop0(
        	int id
        );
        u_int iGetCop0(
        	int id
        );
        
[引数]
        id	レジスタ番号(0〜31)
        
[返り値]
        レジスタ値	正常終了
        
[解説]
        COP0のid番レジスタの値を参照します。
        

=========================================================================
GetThreadId                                                        [関数]
=========================================================================
                                                       自スレッドIDの取得
[形式]
        int GetThreadId( void );
        
[引数]
        なし
        
[返り値]
        スレッドID	正常終了
        
[解説]
        自スレッドのスレッドIDを取得します。
        

=========================================================================
InitThread                                                         [関数]
=========================================================================
                                                         スレッドの初期化
[形式]
        int InitThread (void);
        
[引数]
        なし
        
[返り値]
        スレッドID	正常終了
        -1		初期化失敗
        
[解説]
        スケジューリング用スレッドを生成し、そのスレッドIDを返します。
        本システムコールを呼び出したスレッドの優先度 が 0 であれば、1 に
        します。スケジューリング用スレッドの優先度は 0 です。
        
        本関数は、iWakeupThread()ならびにiRotateThreadReadyQueue()が、正
        しくスケジューリングされない不具合に対応するために用意されたもの
        で、両機能を使用しないプログラムは、呼び出す必要はありません。ま
        た、セマフォを1つ使用します。
        
        スケジューリング用スレッドはiWakeupThread()、iRotateThreadReadyQu
        eue()が、呼び出されない限り起動することはありません。
        
[関連項目]
        iWakeupThread(), iRotateThreadReadyQueue()

=========================================================================
Interrupt2Iop                                                      [関数]
=========================================================================
                                                          IOPへの割り込み
[形式]
        int Interrupt2Iop(
        	int cause
        );
        
[引数]
        cause	割り込み要因
        
[返り値]
        cause	正常終了
        -1	エラー終了
        
[解説]
        IOPに対してcauseを要因とする割り込みをかけます。causeには、ユーザ
        ー定義の0から15までの値を指定することができます。
        

=========================================================================
InvalidDCache / iInvalidDCache                                     [関数]
=========================================================================
                                                         キャッシュ無効化
[形式]
        void InvalidDCache(
        	void *begin,
        	void *end
        );
        void iInvalidDCache(
        	void *begin,
        	void *end
        );
        
[引数]
        begin	先頭アドレス
        end	後尾アドレス
        
[返り値]
        なし
        
[解説]
        論理アドレスbeginからendまでのメモリの内容がD-cache上に存在すれば、
        cache上の値を無効化します。
        

=========================================================================
ReferSemaStatus / iReferSemaStatus                                 [関数]
=========================================================================
                                                       セマフォ状態の取得
[形式]
        int ReferSemaStatus(
        	int sid,
        	SemaParam *sema
        );
        int iReferSemaStatus(
        	int sid,
        	SemaParam *sema
        );
        
[引数]
        sid	参照するセマフォIDを指定する。
        sema	セマフォの状態を受け取る構造体変数へのポインタを指定する。
        
[返り値]
        セマフォID		正常終了
        
        sema->currentCount	セマフォ現在値
        sema->initCount		セマフォの初期値
        sema->maxCount		セマフォの最大値
        sema->numWaitThreads	セマフォ待ちスレッド数
        sema->option	セマフォに関する付加情報。この値は、CreateSema()で設
        定されたもの。
        
[解説]
        sidセマフォの状態を参照します。
        

=========================================================================
ReferThreadStatus / iReferThreadStatus                             [関数]
=========================================================================
                                                       スレッド状態の取得
[形式]
        int ReferThreadStatus(
        	int tid,
        	ThreadParam *info
        );
        int iReferThreadStatus(
        	int tid,
        	ThreadParam *info
        );
        
[引数]
        tid	参照するスレッドIDを指定する。
        info	スレッドの状態を受け取る構造体変数へのポインタを指定する。
        	戻り値のみ必要な場合はNULLを指定する。
        
[返り値]
        スレッド状態を表す定数	正常終了
        
        info->currentPriority	スレッドの現在の優先度
        info->status		スレッドの状態を以下の定数で表す
        
        	0x01 THS_RUN			RUN状態
        	0x02 THS_READY		READY状態
        	0x04 THS_WAIT			WAIT状態
        	0x08 THS_SUSPEND		SUSPEND状態
        	0x0c THS_WAITSUSPEND	WAIT-SUSPEND状態
        	0x10 THS_DORMANT		DORMANT状態
        
        info->option	スレッドに関する付加情報。この値は、CreateThread()で
        設定されたもの。
[解説]
        tidスレッドの状態を参照します。
        
[備考]
        このシステムコールはデバッグのために用意されています。デバッグ以
        外の目的で使用するのは推奨しません。
        

=========================================================================
ReleaseAlarm / iReleaseAlarm                                       [関数]
=========================================================================
                                                           アラームの解除
[形式]
        int ReleaseAlarm(
        	int id
        );
        int iReleaseAlarm(
        	int id
        );
        
[引数]
        id	解除するアラームのID
        
[返り値]
        アラーム設定後の経過時間 (Hsync count)
        解除に失敗した場合は-1
        
[解説]
        アラームを解除します。
        

=========================================================================
ReleaseWaitThread / iReleaseWaitThread                             [関数]
=========================================================================
                                         WAIT状態にあるスレッドの強制解除
[形式]
        int ReleaseWaitThread(
        	int tid
        );
        int iReleaseWaitThread(
        	int tid
        );
        
[引数]
        tid	スレッドID
        
[返り値]
        スレッドID	正常終了
        
[解説]
        WAIT状態にあるtidスレッドを強制解除します。
        

=========================================================================
RemoveDmacHandler                                                  [関数]
=========================================================================
                                                DMA割り込みハンドラの削除
[形式]
        int RemoveDmacHandler(
        	int channel,
        	int hid
        );
        
[引数]
        channel	チャネル番号
        	定数			DMAチャネル
        	定数			DMAチャネル
        	DMAC_VIF0	VIF0	DIR:to	GP:A
        	DMAC_VIF1	VIF1	DIR:both	GP:C
        	DMAC_GIF	GIF	DIR:to	GP:C
        	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
        	DMAC_TO_IPU	to IPU	DIR:to	GP:C
        	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
        	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        hid	ハンドラID
        
[返り値]
        ハンドラ登録数	正常終了
        
[解説]
        channelのDMA割り込みハンドラから、hidハンドラを削除します。hidハ
        ンドラが登録されていない場合はエラーを返します。
        

=========================================================================
RemoveIntcHandler                                                  [関数]
=========================================================================
                                                   割り込みハンドラの削除
[形式]
        int RemoveIntcHandler(
        	int cause,
        	int hid
        );
        
[引数]
        cause	割り込み要因
        	定数			割り込み要因
        	INTC_GS		GS
        	INTC_SBUS		SBUS
        	INTC_VBLANK_S	V-blank start
        	INTC_VBLANK_E	V-blank end
        	INTC_VIF0		VIF0
        	INTC_VIF1		VIF1
        	INTC_VU0		VU0
        	INTC_VU1		VU1
        	INTC_IPU		IPU
        	INTC_TIM0		Timer0
        	INTC_TIM1		Timer1
        hid	ハンドラID
        
[返り値]
        ハンドラ登録数	正常終了
        
[解説]
        causeを要因とする割り込みハンドラから、hidハンドラを削除します。h
        idハンドラが登録されていない場合はエラーを返します。

=========================================================================
RemoveSbusIntcHandler                                              [関数]
=========================================================================
                                               SBUS割り込みハンドラの削除
[形式]
        int RemoveSbusIntcHandler(
        	int cause
        );
        
[引数]
        cause	割り込み要因
        
[返り値]
        cause	正常終了
        -1	エラー終了
        
[解説]
        causeを要因とするSBUS割り込みハンドラを削除します。ハンドラが登録
        されていない場合はエラーを返します。
        

=========================================================================
ResumeThread / iResumeThread                                       [関数]
=========================================================================
                                         SUSPEND状態からREADY状態への移行
[形式]
        int ResumeThread(
        	int tid
        );
        int iResumeThread(
        	int tid
        );
        
[引数]
        tid	スレッドID
        
[返り値]
        スレッドID	正常終了
        
[解説]
        SUSPEND状態にあるtidスレッドをREADY状態にします。
        
[備考]
        自スレッドを指定することはできません。
        

=========================================================================
RotateThreadReadyQueue / iRotateThreadReadyQueue                   [関数]
=========================================================================
                                                     レディーキューの回転
[形式]
        int RotateThreadReadyQueue(
        	int prio
        );
        int iRotateThreadReadyQueue(
        	int prio
        );
        
[引数]
        prio	操作したいキューの優先度
        
[返り値]
        優先度		正常終了
        
[解説]
        優先度prioのレディーキューを回転します。
        
[備考]
        スレッドスケジューリングの不具合を回避するため制限事項です。
         ・iRotateThreadReadyQueue() を呼び出す前にInitThread()を呼び出す
         ・全てのスレッドの優先度を 1-127 の範囲に設定する。
        
[関連項目]
        InitThread()

=========================================================================
SetAlarm / iSetAlarm                                               [関数]
=========================================================================
                                                           アラームの設定
[形式]
        int SetAlarm(
        	u_short time,
        	void *cbfunc(int, u_short, void *),
        	void *arg
        );
        int iSetAlarm(
        	u_short time,
        	void *cbfunc(int, u_short, void *),
        	void *arg
        );
        
[引数]
        time	時間(Hsync単位)
        cbfunc	コールバック関数のアドレス
        	void cbfunc(int id, u_short time, void *arg)
        		id	: アラームID
        		time	: タイムアウト時のHsync count
        		arg	: SetAlarmの第3引数
        arg	cbfuncに渡す引数
        
[返り値]
        セットしたアラームのID
        アラームをセットできなかった場合は-1
        
[解説]
        SetAlarm()を呼び出してからtime時間内にReleaseAlarm()が呼ばれない
        場合、cbfuncが呼び出されます（この時点でそのアラームは解除されま
        す）。同時に設定できるアラームは64個以内です。
        なお、HSync Timerはカーネルで1本リザーブしています(TIMER 3)。
        

=========================================================================
SetDebugHandler                                                    [関数]
=========================================================================
                                                       例外ハンドラの設定
[形式]
        void *SetDebugHandler(
        	int code,
        	int (*handler)(u_int stat, u_int cause, u_int epc, u_int bva, u_
        int bpa,
        		 u_long128 *gpr)
        );
        
[引数]
        code	例外番号
        	1	TLB変更例外
        	2	TLB不一致例外（ロードまたは命令フェッチ）
        	3	TLB不一致例外（ストア）
        	4	アドレスエラー例外（ロードまたは命令フェッチ）
        	5	アドレスエラー例外（ストア）
        	6	バスエラー例外（命令フェッチ）
        	7	バスエラー例外（データロードまたはストア）
        	8	システムコール例外
        	9	ブレークポイント例外
        	10	予約命令例外
        	11	コプロセッサ不使用例外
        	12	算術オーバーフロー例外
        	13	Trap例外
        handler	ハンドラ関数
        
[返り値]
        以前に登録されていたハンドラのアドレス	正常終了
        -1					エラー終了
[解説]
        CPUの例外が発生した場合に呼び出される例外ハンドラを設定します。呼
        び出されたハンドラから復帰することはできません。
        codeは例外番号、handlerは例外発生時に呼び出されるハンドラのアドレ
        スで、handlerの引数は例外発生時の状態を表します。引数statはCOP0の
        statusレジスタ、引数causeはCOP0のcauseレジスタ、引数epcは例外が発
        生したプログラムカウンタ値、引数bvaはメモリアクセスや分岐アドレス
        不正時の論理アドレス値、引数bpaはバスエラー時の物理アドレス値、引
        数gprはサイズが32個の配列でGPRの値です。
        
[備考]
        この関数はデバッグ用の機能です。例外が起きたときに例外の内容を画
        面に表示する場合などに使用してください。
        

=========================================================================
SignalSema / iSignalSema                                           [関数]
=========================================================================
                                                         セマフォ資源返却
[形式]
        int SignalSema(
        	int sid
        );
        int iSignalSema(
        	int sid
        );
        
[引数]
        sid	セマフォID
        
[返り値]
        セマフォID	正常終了
        
[解説]
        セマフォ資源を返却します。
        
        sidセマフォの値が0でセマフォ待ちキューが空でない場合は、セマフォ
        待ちキューの先頭のスレッドを解除しREADY状態にします。それ以外の場
        合、セマフォの値をインクリメントします。
        正常終了の場合はセマフォIDを、無効なsidを指定した場合はTHREAD_ERR
        ORを返します。
        

=========================================================================
SleepThread                                                        [関数]
=========================================================================
                                                         WAIT状態への移行
[形式]
        int SleepThread( void );
        
[引数]
        なし
        
[返り値]
        自スレッドID	正常終了
        
[解説]
        自スレッドをWAIT状態にします。ただし起床要求回数が1以上の場合は、
        それをデクリメントするのみで、スレッドの状態は変化しません。
        WAIT状態のスレッドはWakeupThread()またはReleaseWaitThread()によっ
        て、WAIT解除されます。
        

=========================================================================
StartThread                                                        [関数]
=========================================================================
                                                           スレッドの起動
[形式]
        int StartThread(
        	int tid,
        	void *arg
        );
        
[引数]
        tid	起動するスレッドのID
        arg	引数
        
[返り値]
        スレッドID	正常終了
        
[解説]
        tidスレッドを起動し、スタックの初期化を行います。対象とするスレッ
        ドはDORMANT状態でなければなりません。
        

=========================================================================
SuspendThread / iSuspendThread                                     [関数]
=========================================================================
                                                      SUSPEND状態への移行
[形式]
        int SuspendThread(
        	int tid
        );
        int iSuspendThread(
        	int tid
        );
        
[引数]
        tid	スレッドID
        
[返り値]
        スレッドID	正常終了
        
[解説]
        tidスレッドをSUSPEND状態に移し、スレッドの実行を中断します。
        SUSPEND状態は、ResumeThread()システムコールによって解除されます。
        SuspendThread(), ResumeThread()による状態遷移は以下のとおりです。
        
         ・対象スレッドが既にWAIT状態にあった場合は、WAIT状態とSUSPEND状態
           が複合したWAIT-SUSPEND状態になる。
         ・WAIT-SUSPEND状態のときWAIT解除の条件が満たされた場合は、SUS
           SUSPEND状態に移行する。
         ・WAIT-SUSPEND状態のスレッドに対してResumeThread()が発行された場
           合はWAIT状態に戻る。
        
[備考]
        SUSPEND状態は、他スレッドの発行したシステムコールによる中断状態を
        意味するものであり、本システムコールで自スレッドを指定することは
        できません。
        
        本システムコールは、主にデバッグ用途に使用されることを想定してい
        ます。
        

=========================================================================
SyncDCache / iSyncDCache                                           [関数]
=========================================================================
                                                       キャッシュ掃き出し
[形式]
        void SyncDCache(
        	void *begin,
        	void *end
        );
        void iSyncDCache(
        	void *begin,
        	void *end
        );
        
[引数]
        begin	先頭アドレス
        end	後尾アドレス
        
[返り値]
        なし
        
[解説]
        論理アドレスbeginからendまでのメモリの内容がD-cache上に存在すれば、
        cache上の値をメモリに書き戻します。
[関連項目]
        FlushCache(), iFlushCache()

=========================================================================
TerminateThread / iTerminateThread                                 [関数]
=========================================================================
                                                     他スレッドの強制終了
[形式]
        int TerminateThread(
        	int tid
        );
        int iTerminateThread(
        	int tid
        );
        
[引数]
        tid	強制終了させるスレッドのID
        
[返り値]
        スレッドID	正常終了
        
[解説]
        tidスレッドを強制終了し、DORMANT状態に移行させます。終了が成功す
        ればtidを返します。
        
        対象スレッドがREADY状態ではなくWAIT状態やSUSPEND状態であっても、
        待ちを解除し終了します。すでにDORMANT状態の場合はエラーになります。
        
[備考]
        自スレッドは終了できません。
        

=========================================================================
WaitSema / PollSema / iPollSema                                    [関数]
=========================================================================
                                                         セマフォ資源獲得
[形式]
        int WaitSema(
        	int sid
        );
        int PollSema(
        	int sid
        );
        int iPollSema(
        	int sid
        );
        
[引数]
        sid	セマフォID
        
[返り値]
        セマフォID	正常終了
        
[解説]
        sidセマフォの値が1より大きい場合、セマフォの値をデクリメントし、
        ただちに正常終了します。セマフォの値がゼロの場合、別のスレッドがS
        ignalSema()を発行してセマフォの値がインクリメントされるまでWAIT状
        態になり、そのセマフォの待ちキューにつながれます。
        PollSema()システムコールは、WaitSema()からWAIT状態に入る機能を取
        り除いたシステムコールで、WaitSema()と異なり対象セマフォの値が0の
        場合エラーを返します。
        

=========================================================================
WakeupThread / iWakeupThread                                       [関数]
=========================================================================
                                           WAIT状態にあるスレッドのWAKEUP
[形式]
        int WakeupThread(
        	int tid
        );
        int iWakeupThread(
        	int tid
        );
        
[引数]
        tid	スレッドID
        
[返り値]
        スレッドID	正常終了
        
[解説]
        WAIT状態にあるtidスレッドをREADY状態にします。対象スレッドがWAIT
        状態でない場合は起床要求回数がカウントアップされ、次にそのスレッ
        ドがSleepThread()を呼び出してもWAIT状態には移らないようになります。
        
[備考]
        スレッドスケジューリングの不具合を回避するため制限事項です。
         ・iWakeupThread()を呼び出す前にInitThread()を呼び出す
         ・全てのスレッドの優先度を 1-127 の範囲に設定する。
        
[関連項目]
        InitThread()

 3 プログラムの起動/終了関数
=============================


=========================================================================
LoadExecPS2                                                        [関数]
=========================================================================
                                                         プログラムの起動
[形式]
        void LoadExecPS2(
        	char *file,
        	int n,
        	char **args);
        );
        
[引数]
        file	ファイル名
        n	引数の個数 (n <= 15)
        args	引数の配列
        
[返り値]
        なし
        
[解説]
        fileで指定されたプログラムを起動します。
        起動されたプログラムのmain関数の引数にはファイル名も含まれます。
        
        プログラム例)
        	char *args[] = { "arg1", "arg2" };
        	LoadExecPS2("cdrom0:\\program.elf", 2, args);
        
        上記のコードの場合、起動されるプログラムのmain関数に渡される引数
        は
        	argc = 3
        	argv = { "cdrom0:\\program.elf", "arg1", "arg2" }
        となります。
        
[備考]
        ファイル名とすべての引数の文字列を合わせて256バイト以下でなければ
        なりません。

=========================================================================
Exit                                                               [関数]
=========================================================================
                                                         プログラムの終了
[形式]
        void Exit(
        	int n
        );
        
[引数]
        n	プログラムの実行環境(現時点ではデバッガ）に渡す終了コード
        
[返り値]
        なし
        
[解説]
        プログラムを終了します。
        
[備考]
        この関数はあくまでデバッグ用です。マスターディスクに含まれるプロ
        グラムでは、一切使用を禁止します。
