[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

EE Kernel API
==============


 1 ライブラリ概要
------------------


  1.1 概要

    EE Kernelは、EE上で動作するオペレーティングシステムです。アプリケーシ
    ョンとは独立したアドレス空間で実行され、優先度ベースのマルチスレッド
    スケジューリング機能、セマフォによるスレッド間通信機能、例外ハンドラ
    の管理機能、COP0の制御機能などをシステムコールとして提供します。
    また、コントローラやホストファイルに対する入出力サービスはEE Kernelの
    拡張部分として提供されています。

  1.2 関連ファイル

    EE Kernel APIを利用するのに必要なファイルは次のとおりです。
    
    +--------------+----------+
    |カテゴリ       ファイル名|
    +              +          +
    |ヘッダファイル eekernel.h|
    +--------------+----------+
    

 2 解説
--------


  2.1 スレッドの概要

    スレッドとは、並行処理の観点から見たプログラムの論理的な単位です。
    ひとつのアプリケーションプログラムの処理内容を複数のスレッドに分け、
    それらを同時並行的に動作させることができます。並行といってもCPUはひと
    つしかありませんから、ある短い時間内で見ると、実行されているスレッド
    はひとつだけです。実行されるスレッドは、各スレッドの持つ優先度によっ
    て決められます。優先度は絶対的であり、優先度の高いスレッドが実行中で
    あればそのスレッドが待ち状態に入るか割り込みハンドラ中で状態が変更さ
    れない限り、それより優先度の低いスレッドが実行されることはありません。
    複数のタスク（またはプロセス）を切り替えながらまんべんなく実行しよう
    とするTSS（Time Sharing System）とはこの点で異なっています。
    スレッドは互いに並行的に実行されますが、入出力装置やメモリ上の特定の
    ワークエリアなどの資源は、スレッド間で排他的に使用するように調整しな
    ければなりません。EE Kernelはスレッド間の同期機能としてセマフォを提供
    しています。
    なお、スレッドと割り込みハンドラは明確に区別されます。スレッドはユー
    ザプログラムの一部分として実行されますが、割り込みハンドラは（ユーザ
    が作成したものであっても）システムプログラムの一部分として実行されま
    す。

  2.2 スレッドの状態と動作

    EE Kernelの管理するスレッドは、以下の7つ（大きく見ると５つ）の状態を
    もちます。
    
    +------------+------------------------------------------------------+
    |状態         説明                                                  |
    +            +                                                      +
    |RUN          実行状態。CPUがそのスレッドを実行中の状態             |
    |READY        実行可能な状態。CPUが他のスレッドを実行中であるため   |
    |             待機している状態                                      |
    |WAIT         待ち状態。ある条件が成立するまで、自ら待ちに入った状態|
    |SUSPEND      強制待ち状態。他のスレッドが発行したシステムコールに  |
    |             よって強制的に待ちに入れられた状態                    |
    |WAIT-SUSPEND 2重待ち状態。WAIT状態であったときに他のスレッドから   |
    |             強制的に待ちに入れられた状態                          |
    |DORMANT      休止状態。スレッドが生成されてまだ起動されていない状態|
    |             、または終了してから削除されるまでの状態              |
    |NON-EXISTENT 未登録状態。スレッドが生成されていない、または        |
    |             削除された後の仮想的な状態                            |
    +------------+------------------------------------------------------+
    
    
         ・RUN：実行状態
           CPUがそのスレッドを実行中であるという状態です。ある瞬間につい
           て見れば、この状態のスレッドはひとつしかありません。
         ・READY：実行可能状態
           そのスレッドは実行できる条件が整っているが、より優先度の高い（
           あるいは同じ）スレッドが実行中であるために待機している状態です。
           実行可能状態のスレッドが複数個ある場合、それらのスレッドはCPU
           が空くのを待って待ち行列を作ります。これをレディキューと呼びま
           す。
         ・WAIT：待ち状態／SUSPEND：強制待ち状態／WAIT-SUSPEND：2重待ち状
           態
           そのスレッドが実行できる条件が整わないため実行を止められている、
           実行保留状態です。WAITは自スレッドの発行したシステムコールによ
           って実行が止まっている状態、SUSPENDは他のスレッドから強制的に
           止められている状態、WAIT-SUSPENDはWAIT中にさらに他スレッドによ
           って止められた状態です。
           待ち状態からの実行再開は、実行を中断した場所から行われ、プログ
           ラムカウンタやレジスタなどプログラムの実行状態を表現する情報（
           コンテキスト）はそのまま復元されます。
         ・DORMANT：休止状態
           スレッドがまだ起動されていない状態、または終了した状態。スレッ
           ドを生成するとまずこの状態になります。
         ・NON-EXISTENT：未登録状態
           スレッドが作成される前、または削除されたあとの、仮想的な状態で
           す。
           生成されたスレッドはまずDORMANT状態になり、起動されることによ
           ってREADY状態となってレディキューに入ります。レディキューの並
           び順は優先度の高い順で、同一優先度のスレッドどうしは早くREADY
           状態になった順に並び、レディキューの先頭にあるスレッドが実行さ
           れてRUN状態となります。RUN状態のスレッドは、セマフォ待ちまたは
           イベントフラグ待ちによってWAIT状態に移り、待ち条件が成立すると
           READY状態に戻ります。

  2.3 スレッドのスケジューリング（優先度）

    スレッドは優先度ごとにレディキューで管理され、レディキューによって実
    行がスケジューリングされます。
    たとえば次のように、優先度1のスレッドA、優先度3のスレッドB、C、D、優
    先度5のスレッドE、Fがレディキューに存在するとします。
    
    
    レディキューにあるもっとも優先度の高いスレッドはスレッドAなので、スレ
    ッドAが実行されます（実行状態のスレッドもレディキューに含まれると考え
    ます）。スレッドAの実行中に、暗黙のうちに他のスレッドに実行が移ること
    はありません。
    スレッドAがSleepThread()を呼び出し、WAIT状態になったとすると、その時
    点でレディキューは下図のようになり、スレッドBが実行されます。
    
    
    この状態で割り込みが発生すると、制御は割り込みハンドラに移り、割り込
    みハンドラからリターンする時点で再度スケジューリングが行われますが、
    割り込みがあっただけではスレッドBから実行権がうばわれることはありませ
    ん。割り込みハンドラ内でスレッドAを実行可能状態に移したりスレッドBの
    優先度を下げたりする処理が行われない限り、割り込みハンドラから戻った
    あともやはりスレッドBが実行されます。
    割り込みハンドラ内でスレッドAが実行可能状態に移されると、リターンした
    時点でスレッドAが実行状態になり、スレッドBは実行状態から実行可能状態
    に移ります。これを「スレッドBがプリエンプト（preempt）された」と言い
    ます。この場合でもレディキューでのスレッドBの位置は変わらないので、ス
    レッドAがレディキューから外れれば再びスレッドBが実行されます。
    
    スレッドの優先度は、ユーザプログラム起動時に0に設定され、Kernel APIの
    ChangeThreadPriority()によって0-127の範囲で変更することができます。
    また、レディキューを回転させるRotateReadyQueue()によって、優先度の同
    じスレッドどうしの優先順序を変更することができます。たとえば優先度3を
    RotateReadyQueue()によって回転すると、先頭のスレッドが最後尾に移ってC,
    D,Bの順となります。
    なお、実行保留状態のスレッドが実行可能状態に移った場合は、そのスレッ
    ドは該当優先度のレディキューの最後尾につきます。

  2.4 セマフォ

    複数のスレッドが同じデバイスやバッファ領域などを使用する場合に、使用
    状況を他のスレッドに知らせ同期を取るために用意されているのがセマフォ
    （信号機）機能です。
    デバイス等を使用したいスレッドはWaitSema()を実行してセマフォ資源を取
    得し、つまり使用中フラグを立てることで使用権を取得してから使用します。
    使い終われば、SignalSema()を実行してセマフォ資源をシステムに返却しま
    す。
    
    WaitSema()を実行したときにもし他のスレッドがデバイス等を使用中であれ
    ば、セマフォ資源は取得できず、そのスレッドはWAIT状態になってセマフォ
    待ち行列に入ります。デバイス等を使い終わったスレッドがSignalSema()を
    実行してセマフォ資源をシステムに返却すると、返却されたセマフォ資源が
    セマフォ待ち行列の先頭のスレッドに与えられ、そのスレッドはREADY状態に
    戻り、優先度によるスケジューリングにしたがって実行され、デバイス等を
    使用できるようになります。
    
    セマフォ資源の個数はセマフォ作成時に指定することができるため、上記の
    ような排他制御のほかに、複数のスレッドがデータを供給する共有バッファ
    の有効データ数を表すような使いかたも可能です。データ供給側のスレッド
    は、共有バッファにデータを格納したときにSignalSema()を実行して有効デ
    ータが増えたことを示します。それに対してデータ消費側のスレッドは、共
    有バッファからデータを取り出そうとするときにWaitSema()を実行して、セ
    マフォ資源が取得できれば共有バッファ中のデータを処理し、取得できなけ
    ればWAIT状態になってデータが供給されるのを待つことになります。

  2.5 割り込みの取り扱い

    EEにはINTCとDMACの２つの割り込みコントローラがあります。
    
    +--------------------+-------------------------------------+
    |割り込みコントローラ 割り込み要因                         |
    +                    +                                     +
    |INTC                 GS                                   |
    |INTC                 SBUS                                 |
    |INTC                 V-blank start                        |
    |INTC                 V-blank end                          |
    |INTC                 VIF0                                 |
    |INTC                 VIF1                                 |
    |INTC                 VU0                                  |
    |INTC                 VU1                                  |
    |INTC                 IPU                                  |
    |INTC                 Timer 0                              |
    |INTC                 Timer 1                              |
    |DMAC                 DMAチャネルch-0（VIF0,DIR:to,GP:A）  |
    |DMAC                 DMAチャネルch-1（VIF1,DIR:both,GP:C）|
    |DMAC                 DMAチャネルch-2（GIF,DIR:to,GP:C）   |
    |DMAC                 DMAチャネルch-3（IPU,DIR:from,GP:C） |
    |DMAC                 DMAチャネルch-4（IPU,DIR:to,GP:C）   |
    |DMAC                 DMAチャネルch-8（SPR,DIR:from,GP:C） |
    |DMAC                 DMAチャネルch-9（SPR,DIR:to,GP:C）   |
    +--------------------+-------------------------------------+
    
    EE Kernelには、割り込み要因ごとに割り込みハンドラを登録する機能が用意
    されています。割り込み発生を受けてアプリケーションが行う処理があれば
    関数として記述し、その関数を割り込みハンドラとして登録してください。
    ひとつの割り込み要因に対して複数の割り込みハンドラを登録することがで
    きます。またその場合に、割り込みハンドラが呼び出される順序を指定する
    こともできます。
    割り込みを使用したプログラム例として、sce/ee/sample/mpeg/ezmpeg、sce/
    ee/sample/ipu/ezcube3がありますので参照してください。

  2.6 アラーム機能の概要

    EE Kernelのサービスとして、Hsync単位のタイマを64個用意してあります。
    SetAlarm()を用いて、これらのタイマに対する割り込みハンドラとそれが呼
    び出される時間を指定することができます。設定した時間が経過すると割り
    込みハンドラが呼び出されます。
    ReleaseAlarm()を呼び出すと、設定されている割り込みハンドラが解除され
    ます。

  2.7 メモリマップ

    EE Kernelのメモリマップを次に示します。
    

    EE Kernel

      0x00000000 - 0x000fffffはEE Kernelが使用する空間で、アプリケーショ
      ンプログラムからはアクセスできません。

    Uncached

         ・readは、cacheを経由しない。
         ・writeは、write back bufferを経由する。
           (128バイト以下の連続するストアをまとめて行う)

    Uncached accelerated

         ・readは、Uncached accelerated bufferを経由する
           (まとめて128バイト読み込む)
         ・writeは、write back bufferを経由する
           (128バイト以下の連続するストアをまとめて行う)
    
    Uncached acceleratedは、連続したメモリアクセスをキャッシュを汚さず、
    高速化するものです。
    メモリに連続してアクセスする場合は、Uncacheに比べて有利になりますが、
    メモリをランダムにアクセスするような処理は、Uncacheより遅くなりますの
    で注意してください。

  2.8 スタック領域・ヒープ領域の設定

    アプリケーションプログラムのメモリマップ、つまりスタートアドレス（エ
    ントリポイント）・スタック領域・ヒープ領域などの設定は、リンカスクリ
    プトファイル（.cmd）で設定します。リンカスクリプトファイルでの設定に
    したがって、スタートアップルーチン（crt0.s）の中でメモリが確保されま
    す。
    サンプルプログラム等では、リンカスクリプトファイル/usr/local/sce/ee/
    lib/app.cmdを使用して、主に以下の情報を設定しています。
         ・スタック領域に関する情報（_stack / _stack_size）
         ・ヒープ領域に関する情報（_heap_size）
         ・エントリポイント（0x00100000）
         ・各セクションの配置および構成に関する情報
         ・ユーザプログラムの最後尾（end, _end）
    スタック領域・ヒープ領域は、_stack, _stack_size, _end, _heap_sizeによ
    って次のように決定されます。
    
    +-----------+---------------------------------------------------------+
    |シンボル    内容                                                     |
    +           +                                                         +
    |_stack      スタック領域の先頭アドレス                               |
    |            -1 を指定すると、メモリの最終アドレスから                |
    |            _stack_size + 0x100(4Kb)を引いたアドレスとみなされます。 |
    |            最後の 4kbyte は、システムデバッグ時作業領域として       |
    |            利用しています。-1 以外の場合この領域は存在しません。    |
    |_stack_size スタック領域の大きさ                                     |
    |_end        プログラム領域の末尾アドレス＝ヒープ領域の直前の         |
    |            アドレス                                                 |
    |_heap_size  ヒープ領域の大きさ                                       |
    |            -1を指定すると、_stackから_endを引いた大きさとみなさ     |
    |            れる(スタック領域の直前まですべてヒープ領域となる)       |
    +-----------+---------------------------------------------------------+
    ※スタックポインタはスタック領域の最終アドレスから先頭へ向かって移動
    します。
    
    必要に応じて、/usr/local/sce/ee/lib/app.cmdをローカルディレクトリにコ
    ピーし、カスタマイズして使用してください。なおこのとき、書き換えたapp.
    cmdがリンクされるように、MakefileのLCFILEをローカルディレクトリに設定
    してください。

    設定例

        _stack_size = 0x00200000;
        _stack = 0x1d00000;
        _heap_size = 0x00080000;
      この場合、スタック領域は0x01d00000 - 0x01efffff、ヒープ領域は(_end)
       - (_end+0x7ffff)となります。

  2.9 キャッシュ制御の概要

    EEのデータキャッシュはライトバック方式であり、明示的にメモリへ書き戻
    す処理が必要になる場合があります。このため、EE Kernelはデータキャッシ
    ュを書き戻すシステムコールを用意しています。
    
    +----------------------------+------------------------------+
    |システムコール               機能                          |
    +                            +                              +
    |FlushCache() / iFlushCache() データキャッシュ全体を書き戻す|
    |SyncDCache() / iSyncDCache() 指定領域を書き戻す            |
    +----------------------------+------------------------------+
    

   (1) DMA転送とキャッシュ制御

    キャッシュ領域にバッファ変数を設けてDMA転送を行う際には、データキャッ
    シュの書き戻しが必要です。書き戻すタイミングはDMA転送の方向によって異
    なり、それぞれ次の順序になります。
    

    メモリからペリフェラルへのDMA転送

         (1) データをバッファ変数に書き込む（キャッシュに書き込まれる）
         (2) キャッシュをメモリに書き戻す
         (3) DMA転送を行う
      
      (2)で書き戻しを行わないと、(1)でバッファに書き込んだデータではなく
      それ以前にメモリにあったデータが(3)でペリフェラルへ転送されることに
      なってしまいます。

    ペリフェラルからメモリへのDMA転送

         (1) キャッシュを書き戻す（無効化する）
         (2) DMA転送を行う
         (3) メモリからデータを読む
      
      (1)で無効化を行わないと、(2)でペリフェラルから転送したデータではな
      くそれ以前にキャッシュにあったデータを(3)で読むことになってしまいま
      す。
    
    バッファ変数の読み書きをアンキャッシュ領域を通して行えば、上記のよう
    なキャッシュ書き戻しは不要になります。

   (2) キャッシュ制御とアライメント

    キャッシュからメモリへの書き戻しは、キャッシュラインのサイズである
    64byteを単位として行われます。したがって、書き戻したいデータと同じ
    64byteバウンダリに他のデータがある場合は、そのデータも暗黙のうちに書
    き戻されることになります。これが予期しない影響を引き起こすことがあり
    ますので、データの64byteアライメントに注意してください。

  2.10 ファイル操作の概要

    CD/DVD-ROM上のファイルおよび開発用コンピュータ上のファイルに対する入
    出力サービスは、EE Kernelの拡張部分としてSIF RPC Interfaceを使用して
    実装されています。詳しくは「入出力サービス」ドキュメントを参照してく
    ださい。

  2.11 IOP制御機能の概要

    EE側のアプリケーションからIOPを制御するAPIとして、IOPシステムのリブー
    トを行う関数と、リブート後の起動完了を待つ関数が用意されています。リ
    ブートの際には、IOP側でROMからロードされて動作しているデフォルトモジ
    ュールを置き換えることができます。
    また、EE - IOP相互に協調して行う処理をサポートするために、図のような3
    階層のAPIが用意されています。
    
    詳しくは「SIFシステム」ドキュメントを参照してください。

  2.12 スクラッチパッドの擬似的拡張

    スクラッチパッド(0x70000000 - 0x70003fff)の直後の論理アドレスにメイン
    メモリの一部をマップし、スクラッチパッドの領域を見かけ上増やします。
    ただし、拡張した領域にDMA転送はできません。
    
    +------------------+----------------------------+
    |システムコール     機能                        |
    +                  +                            +
    |ExpandScratchPad() スクラッチパッドの擬似的拡張|
    +------------------+----------------------------+
    

 3 注意事項
------------


  3.1 予約タイマー

    EEが持つ4本のタイマーのうち、TIMER2とTIMER3はEE Kernelが占有します。
    アプリケーションでは使用しないでください。

  3.2 レジスタの保存

    割り込みおよびスレッド切り替えの際に、カーネル側でセーブされるレジス
    タは次のとおりです。
    
    +----------+--------------+------------------+
    |レジスタ   割り込み発生時 スレッド切り替え時|
    +          +              +                  +
    |$1 - $25   セーブする     セーブする        |
    |$28 - $31  セーブする     セーブする        |
    |HI/LO/SA   セーブする     セーブする        |
    |$f0 - $f31 セーブしない   セーブする        |
    +----------+--------------+------------------+
    
    汎用レジスタ$26 / $27はEE Kernelが占有します。アプリケーションで使用
    することはできません。
    また、VU0のレジスタはコプロセッサ命令でアクセスできますが、EE Kernel
    は管理しません。
    

  3.3 割り込みハンドラの記述

    さまざまな割り込みに対して、ユーザが作成した割り込み処理ルーチン（コ
    ールバック関数）を登録することができますが、その割り込み処理ルーチン
    がどのような状態で実行されるかを意識してプログラミングする必要があり
    ます。多くの場合、割り込み処理ルーチンは割り込みハンドラとして実行さ
    れますが、一部にはスレッドとして実行されるものもあります。割り込み処
    理ルーチンを登録するシステムコールやライブラリ関数によって異なります
    ので注意してください。
    割り込みハンドラとスレッドは、それぞれ異なるシステム状態のもとで実行
    されます。割り込みハンドラのプログラミングに際しては、以下の点に注意
    してください。

   (1) APIの区別

    割り込みハンドラでは「自スレッド」の概念が存在しないので、待ち状態に
    入るシステムコールや暗黙に自スレッドを指定するシステムコールなどを呼
    び出すことは原理的に不可能です。また、実装上の都合で、スレッドから呼
    び出すシステムコールと割り込みハンドラから呼び出すシステムコールでは
    カーネル内の処理が異なる場合もあります。
    EE-Kernelでは、割り込みハンドラから呼び出せるシステムコールの数を制限
    し、スレッドから呼び出すシステムコールとは異なるエントリ名を用意して
    あります。原則として割り込みハンドラから呼ぶシステムコールは、システ
    ムコール名の先頭に「i」(英小文字)をつけた名称を使用します。たとえば、
    スレッドの起床を行うシステムコールWakeupThreadは、割り込みハンドラか
    ら発行する場合は、iWakeupThreadとして呼び出します。

   (2) スタックの区別

    割り込みハンドラは通常のスレッド部とは別に、専用のスタックを持ってい
    ます。スタックサイズは4KBですので、より大きなスタックを利用したい場合
    はユーザプログラムでメモリを確保してください。

   (3) 終了処理

    割り込みハンドラを終了して通常の処理に戻る前に、ExitHandler()を呼び出
    してください。ExitHandler()はEEのライトバックバッファに保持されている
    命令をすべて書き出す働きを持ちます。
    

  3.4 DI / EIによる割り込み制御

    EE Kernelは、割り込みの禁止／許可を軽い処理で実現するために、割り込み
    が禁止されているかどうかの情報をスレッドのコンテキストにあえて含めて
    いません。そのため、割り込みが禁止されているときにスレッドを切り替え
    たり、DI / EIがネストする処理を行ったりすると、不都合が生じることがあ
    ります。
    アプリケーションでむやみにDI / EIを使用することは避け、メモリにマップ
    されたレジスタ群にアトミックにアクセスするような場合に限ってください。
    共有バッファなどソフトウエアで実現されている資源の排他制御は、セマフ
    ォを利用して行うことができます。
