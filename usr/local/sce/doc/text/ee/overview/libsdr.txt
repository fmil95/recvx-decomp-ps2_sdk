[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

低レベルサウンドライブラリ
===========================


 1 ライブラリ概要
------------------


  1.1 概要

    libsdrは、IOPに接続されているSPU2をEE側でリモート制御する低レベルサウ
    ンドライブラリです。libsdrのルーチンはIOP側にあるドライバモジュールと
    協調して動作し、IOP用の低レベルサウンドライブラリlibsdと同等の機能を
    EEアプリケーションに提供します。処理の本体はIOP側のドライバモジュール
    で実行されますので、EE側ではコマンドを発行してただちにリターンする、
    ノンブロック処理が可能になっています。
    
    

  1.2 関連ファイル

    libsdrを使用するには次のファイルが必要です。
    
    +--------------------+----------+
    |カテゴリ             ファイル名|
    +                    +          +
    |ライブラリ           libsdr.a  |
    |ヘッダファイル       libsdr.h  |
    |ランタイムモジュール sdrdrv.irx|
    |(IOP側)              libsd.irx |
    +--------------------+----------+

 2 機能解説
------------


  2.1 libsd関数一覧

    libsdrを通じて呼び出せるlibsdの関数一覧を次に示します。
    呼び出し方法についてはsceSdRemote()の説明、各関数の機能詳細については
    libsdのドキュメントを参照してください。
    
    +------------------------+----------------------------------------+
    |libsd関数名              機能                                    |
    +                        +                                        +
    |sceSdInit                サウンドデバイスの初期化                |
    |sceSdSetParam            基本パラメータレジスタへの書き込み      |
    |sceSdGetParam            基本パラメータレジスタの読み出し        |
    |sceSdSetSwitch           ボイス制御パラメータレジスタへの書き込み|
    |sceSdGetSwitch           ボイス制御パラメータの読み出し          |
    |sceSdSetAddr             アドレス値レジスタへの書き込み          |
    |sceSdGetAddr             アドレス値レジスタの読み出し            |
    |sceSdSetCoreAttr         コア設定擬似レジスタへの書き込み        |
    |sceSdGetCoreAttr         コア設定擬似レジスタの読み出し          |
    |sceSdProcBatch           バッチ処理                              |
    |sceSdProcBatchEx         バッチ処理 ボイス一括処理付き           |
    |sceSdVoiceTrans          SPU2ローカルメモリへの転送              |
    |sceSdBlockTrans          入出力ブロックへの転送                  |
    |sceSdVoiceTransStatus    ボイス転送の状態取得                    |
    |sceSdBlockTransStatus    入出力ブロック転送の状態取得            |
    |sceSdSetTransCallback    転送の割り込みコールバックの設定        |
    |sceSdSetIRQCallback      IRQの割り込みコールバックの設定         |
    |sceSdSetEffectAttr       エフェクト属性の設定                    |
    |sceSdGetEffectAttr       エフェクト属性の取得                    |
    |sceSdClearEffectWorkArea エフェクトワークエリアのクリア          |
    |sceSdNote2Pitch          ノート値からピッチ値への変換            |
    |sceSdPitch2Note          ピッチ値からノート値への変換            |
    +------------------------+----------------------------------------+
    

  2.2 バッチコマンド一覧

    sceSdProcBatch()およびsceSdProcBatchEx()を使用すると、一連のバッチコ
    マンドをまとめてIOP側へ指示し実行させることができます。バッチコマンド
    の一覧を次に示します。それぞれの詳細はlibsdのドキュメントを参照してく
    ださい。
    
    +--------------+------------------------+
    |バッチコマンド 機能                    |
    +              +                        +
    |SD_BSET_PARAM  sceSdSetParam()を実行   |
    |SD_BGET_PARAM  sceSdGetParam()を実行   |
    |SD_BSET_SWITCH sceSdSetSwitch()を実行  |
    |SD_BGET_SWITCH sceSdGetSwitch()を実行  |
    |SD_BSET_ADDR   sceSdSetAddr()を実行    |
    |SD_BGET_ADDR   sceSdGetAddr()を実行    |
    |SD_BSET_CORE   sceSdSetCoreAttr()を実行|
    |SD_BGET_CORE   sceSdGetCoreAttr()を実行|
    |SD_WRITE_IOP   IOPメモリへの書き込み   |
    |SD_WRITE_EE    EEメモリへの書き込み    |
    |SD_RETURN_EE   returnsをEEメモリに転送 |
    +--------------+------------------------+
    

  2.3 レジスタマクロ一覧

    libsdrではSPU2の各レジスタを指定するために、libsdで定義されているレジ
    スタマクロを使用します。レジスタマクロの一覧を次に示します。詳細は
    libsdおよびSPU2のドキュメントを参照してください。

   (1) 基本パラメータレジスタマクロ

    +--------------+---------+-----------+-------------------------------+
    |レジスタマクロ コア指定  ボイス指定  機能                           |
    +              +         +           +                               +
    |SD_VP_VOLL     SD_CORE_? SD_VOICE_?? ボイスボリューム（左）         |
    |SD_VP_VOLR     SD_CORE_? SD_VOICE_?? ボイスボリューム（右）         |
    |SD_VP_PITCH    SD_CORE_? SD_VOICE_?? 発音時のピッチ                 |
    |SD_VP_ADSR1    SD_CORE_? SD_VOICE_?? エンベロープ                   |
    |SD_VP_ADSR2    SD_CORE_? SD_VOICE_?? エンベロープ（２）             |
    |SD_VP_ENVX     SD_CORE_? SD_VOICE_?? エンベロープ現在値             |
    |SD_VP_VOLXL    SD_CORE_? SD_VOICE_?? ボリューム現在値（左）         |
    |SD_VP_VOLXR    SD_CORE_? SD_VOICE_?? ボリューム現在値（右）         |
    |SD_P_MMIX      SD_CORE_? ---         ボイスミキシング後の出力指定   |
    |SD_P_MVOLL     SD_CORE_? ---         マスターボリューム（左）       |
    |SD_P_MVOLR     SD_CORE_? ---         マスターボリューム（右）       |
    |SD_P_EVOLL     SD_CORE_? ---         エフェクトリターンボリューム   |
    |                                     （左）                         |
    |SD_P_EVOLR     SD_CORE_? ---         エフェクトリターンボリューム   |
    |                                     （右）                         |
    |SD_P_AVOLL     SD_CORE_? ---         コア外部入力のボリューム（左） |
    |SD_P_AVOLR     SD_CORE_? ---         コア外部入力のボリューム（右） |
    |SD_P_BVOLL     SD_CORE_? ---         サウンドデータ入力のボリューム |
    |                                     （左）                         |
    |SD_P_BVOLR     SD_CORE_? ---         サウンドデータ入力のボリューム |
    |                                     （右）                         |
    |SD_P_MVOLXL    SD_CORE_? ---         マスターボリュームの現在値 (左)|
    |SD_P_MVOLXR    SD_CORE_? ---         マスターボリュームの現在値 (右)|
    +--------------+---------+-----------+-------------------------------+
    
    

   (2) ボイス制御パラメータレジスタマクロ

    +--------------+---------+----------+--------------------------+
    |レジスタマクロ コア指定  ボイス指定 機能                      |
    +              +         +          +                          +
    |SD_S_PMON      SD_CORE_? ---        ピッチ変調の指定          |
    |SD_S_NON       SD_CORE_? ---        ノイズ発生器への割り当て  |
    |SD_S_KON       SD_CORE_? ---        キーオン（ボイス発音開始）|
    |SD_S_KOFF      SD_CORE_? ---        キーオフ（ボイス発音終了）|
    |SD_S_ENDX      SD_CORE_? ---        エンドポイント通過フラグ  |
    |SD_S_VMIXL     SD_CORE_? ---        ボイス出力のミキシング指定|
    |                                    （Dry 左）                |
    |SD_S_VMIXR     SD_CORE_? ---        ボイス出力のミキシング指定|
    |                                    （Dry 右）                |
    |SD_S_VMIXEL    SD_CORE_? ---        ボイス出力のミキシング指定|
    |                                    （Wet 左）                |
    |SD_S_VMIXER    SD_CORE_? ---        ボイス出力のミキシング指定|
    |                                    （Wet 右）                |
    +--------------+---------+----------+--------------------------+

   (3) アドレス値レジスタマクロ

    +--------------+---------+-----------+------------------------------+
    |レジスタマクロ コア指定  ボイス指定  機能                          |
    +              +         +           +                              +
    |SD_VA_SSA      SD_CORE_? SD_VOICE_?? 波形データの先頭アドレス      |
    |SD_VA_LSAX     SD_CORE_? SD_VOICE_?? ループポイントのアドレス      |
    |SD_VA_NAX      SD_CORE_? SD_VOICE_?? 次に読みこまれるべき波形データ|
    |                                     のアドレス                    |
    |SD_A_ESA       SD_CORE_? ---         エフェクト処理用作業領域の    |
    |                                     先頭アドレス                  |
    |SD_A_EEA       SD_CORE_? ---         エフェクト処理用作業領域の    |
    |                                     終端アドレス                  |
    |SD_A_TSA       SD_CORE_? ---         転送開始アドレス              |
    |SD_A_IRQA      SD_CORE_? ---         割り込みアドレスの指定        |
    +--------------+---------+-----------+------------------------------+

   (4) エントリ（擬似レジスタマクロ）

    +------------------+---------+----------+-------------------------+
    |マクロ             コア指定  ボイス指定 機能                     |
    +                  +         +          +                         +
    |SD_C_EFFECT_ENABLE SD_CORE_? ---        エフェクト領域への       |
    |                                        書き込み許可             |
    |SD_C_IRQ_ENABLE    SD_CORE_? ---        IRQ割り込み許可          |
    |SD_C_MUTE_ENABLE   SD_CORE_? ---        ミュート                 |
    |SD_C_NOISE_CLK     SD_CORE_? ---        ノイズ発生器のM系列シフト|
    |                                        周波数                   |
    |SD_C_SPDIF_MODE    ---       ---        SPDIFの設定（マスク）    |
    +------------------+---------+----------+-------------------------+

  2.4 スレッドプライオリティの変更

    IOP側で動作するドライバモジュールsdrdrv.irxのスレッドプライオリティを
    変更することができます。変更方法は
         (1) ソースコードを改変する
         (2) モジュールロード時に指定する
         (3) 実行中に変更する
    の３通りがあります。
    ソースコードを改変する場合は、sdrdrvのソースコードにおいてsdd_main.c
    （メインスレッド）およびsdd_com.c（コールバックスレッド）内のスレッド
    を作成している部分で、param.initPriorityに指定している値を変更してく
    ださい。
    モジュールロード時に指定するには、sceSifLoadModule()の引数として、次
    のようにスレッドプライオリティ値を指定します。
        char arg[] = "thpri=24,24";
        sceSifLoadModule( "host0:/usr/local/sce/iop/modules/sdrdrv.irx",
          strlen( arg ) + 1, arg );
    sdrdrv.irxのスレッドは２つあり、最初に指定するのがメインスレッドに設
    定されるプライオリティ値、２番目に指定するのがコールバックスレッドに
    設定されるプライオリティ値です。デフォルト値はどちらも24です。コール
    バックスレッドのプライオリティ値はメインスレッドのプライオリティ値と
    同じか大きい値（つまり、より低いプライオリティ）でなければいけません。
    実行中に変更するには、sceSdRemote()にてコマンド
    rSdChangeThreadPriorityを指定して呼び出します。この場合も２つのスレッ
    ドプライオリティをモジュールロード時と同じ順序で引数として指定し、同
    時に変更します。詳しくは関数リファレンスを参照してください。
    
    スレッドプライオリティ値を変更する場合は、他のモジュールのプライオリ
    ティに対して細心の注意を払う必要があります。安易にIOPスレッドプライオ
    リティ値を変更することはお勧めいたしません。
    

 3 注意事項
------------


  3.1 ノンブロッキング処理とコールバック

    libsdの関数を呼び出すsceSdRemote()は、ブロッキング処理とノンブロッキ
    ング処理を引数で指定することができます。ブロッキング処理の場合、
    sceSdRemote()はIOP側ドライバモジュールに対してコマンドを発行してから、
    その処理が終わるまで待ち、結果を返値として返します。ノンブロッキング
    処理の場合は、コマンドを発行するとIOP側の処理を待たず、返値は0として
    ただちにリターンします。
    IOP側の処理が終わらないうちに、次のコマンドを送ると誤動作することがあ
    ります。ノンブロッキング処理の場合にIOP側の処理終了を知るには、
    sceSdRemoteCallBack()を用いて終了コールバック関数を設定するか、バッチ
    コマンドのSD_WRITE_EEやSD_RETURN_EEを用いてポーリングしてください。終
    了コールバックを使用するとコンテキストスイッチを起こすことになります
    ので、EEの処理効率を重視するのであればポーリングが有利です。

  3.2 複数スレッドからの呼び出し（再入）

    libsdrは再入可能（re-entrant）ではありません。複数のスレッドから非同
    期にlibsdrの関数を呼び出す場合は、お互いの呼び出しが重ならないように
    注意する必要があります。
    RPCの再入について「SIFシステム」ドキュメントに解説がありますので、再
    入の起こるしくみや防止法など参考にしてください。

  3.3 転送データのメモリ配置

    sceSdRemote()でエフェクト属性を設定 / 取得する場合、またEEメモリへの
    書き込みを伴うバッチコマンド（SD_WRITE_EE / SD_RETURN_EE）を実行する
    場合は、libsdr内部でSIF DMA転送を使用するため、DMA転送に関する一般的
    な注意事項を意識する必要があります。
    まず、転送するメモリのアライメントに注意してください。EE側は16byte、
    IOP側は4byte境界に合わせるように、コンパイラのattribute機能で設定しな
    ければなりません。
    もうひとつ、メインメモリとキャッシュとの整合性にも注意してください。
    EEにはバススヌープ機能がないため、IOPからEEにDMA転送が行われた後EE側
    で同じキャッシュライン上の他の変数にアクセスがあると、DMA転送した領域
    がライトバックによって書きつぶされてしまうケースがあります。そうなら
    ないようにメモリ配置を計画してください。EEのキャッシュラインのサイズ
    は64byteなので、64byteアライメントに合わせれば（メモリの利用効率は落
    ちますが）安全です。
