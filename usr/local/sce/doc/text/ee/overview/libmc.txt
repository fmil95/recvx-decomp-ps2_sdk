[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

メモリーカード概要
===================


 1 ライブラリの概要
--------------------


  1.1 概要

    EE上でメモリーカードを制御するためのライブラリとして、libmcが提供され
    ています。
    libmcはメモリーカードのハードウェアの違いを吸収し、メモリーカードを介
    してのデータアクセスを支援します。
    メモリーカードへのアクセスはシリアル通信によって行われ、処理内容にも
    よりますが数フレーム〜数十フレームの時間を要します。このため、libmcの
    ほとんどの関数は非同期処理を行います。関数が呼び出されたときには処理
    の登録のみを行って直ちにリターンし、処理の終了確認・ステータスの取得
    は別途sceMcSync()を呼び出して行うしくみになっています。

  1.2 関連ファイル

    libmcに必要なファイルは次のとおりです。
    
    +------------------+--------------------------------------+
    |カテゴリ           ファイル名                            |
    +                  +                                      +
    |ライブラリファイル libmc.a                               |
    |ヘッダファイル     libmc.h                               |
    |モジュールファイル sio2man.irx                           |
    |                   mtapman.irx（マルチタップ使用時のみ） |
    |                   mcserv.irx                            |
    |                   mcman.irx                             |
    +------------------+--------------------------------------+

  1.3 サンプルプログラム

    libmcを使用するサンプルプログラムとして、次のものがあります。
    ee/sample/mc/basic
    メモリーカードライブラリの基本機能確認サンプル
    ee/sample/mc/icon
    3D アイコン生成のための Linux 上で動くツール

 2 ファイルシステムの概要
--------------------------


  2.1 メモリーカードの互換性

    "PlayStation 2"では従来のメモリーカードおよびポケットステーションに加
    えて、"PlayStation 2"専用メモリーカード(8MB)を扱うことができます。そ
    れぞれの互換性は次のとおりです。
    
    +--------------+-------------+--------------+----------+--------------+
    |メモリーカード PS2用ゲーム   メモリーカード PS用ゲーム メモリーカード|
    |種別           タイトル      ブラウザ       タイトル   管理画面      |
    |                             (PS2本体)                 (PS本体)      |
    +              +             +              +          +              +
    |メモリーカード ○            ○             ×         ×            |
    |(PS2)                                                                |
    |ポケット       ポケットステ  PSファイル     ○         ○            |
    |ステーション   ーション対応  形式データの                            |
    |               アプリケーシ  双方向コピー                            |
    |               ョン保有時の  のみ可                                  |
    |               みアクセス可                                          |
    |メモリーカード ×            PSファイル     ○         ○            |
    |                             形式データの                            |
    |                             双方向コピー                            |
    |                             のみ可                                  |
    +--------------+-------------+--------------+----------+--------------+
    ※以下、"PlayStation 2"専用メモリーカード(8MB)をメモリーカード(PS2)と
    略記します。また、"PlayStation 2"専用メモリーカード(8MB)上に
    "PlayStation 2"専用ファイルとしてセーブする形式を「"PlayStation 2"フ
    ァイル形式」、"PlayStation"用データフォーマットでセーブする形式を「
    "PlayStation"ファイル形式」と呼びます。
    
    ポケットステーションへのアクセスは、ポケットステーション対応アプリケ
    ーションを保有しているときのみ許可されています。ポケットステーション
    の機能を"PlayStation 2"用ゲームタイトルから利用するためにはlibmcxを利
    用してください。
    従来のメモリーカードへは、"PlayStation 2"用ゲームタイトルからデータの
    リード／ライトを行ってはいけません。
    "PlayStation 2"本体の機能であるメモリーカードブラウザ画面では、従来の
    メモリーカードまたはポケットステーションとメモリーカード(PS2)との双方
    向で、"PlayStation"ファイル形式データをコピーすることができます。この
    ようにしてメモリーカード(PS2)にコピーした"PlayStation"ファイル形式デ
    ータには、"PlayStation 2"用ゲームタイトルからアクセスすることができま
    す。
    なお、"PlayStation 2"ファイル形式はメモリーカード(PS2)専用であり、
    "PlayStation 2"ファイル形式のデータファイルをメモリーカードブラウザ画
    面でポケットステーションまたは従来のメモリーカードにコピーすることは
    できません。

  2.2 ファイルシステムの特徴

    メモリーカード(PS2)で採用している"PlayStation 2"専用メモリーカードフ
    ァイルシステムの主な特徴は次のとおりです。
         ・階層ディレクトリをサポート
         ・1KB単位でのファイル管理
         ・"PlayStation 2"ファイル形式データ、"PlayStation"ファイル形式デ
           ータ（ポケットステーション用拡張ファイルヘッダ付）、
           "PlayStation"ファイル形式データ（メモリーカードファイルヘッダ
           付）に対応

  2.3 クラスタ

    メモリーカード(PS2)上のファイルは、「クラスタ」を単位として管理されま
    す。クラスタのサイズは1024byteで、1byteのデータも1024byteのデータも同
    じく１クラスタを使用することになります。データのバイト数からクラスタ
    数を求める計算式は次のとおりです。
    
    	クラスタ数＝（バイト数＋1023）/ 1024	（除算の余りは切り捨て）
    
    フォーマット直後の（空の）メモリーカード(PS2)は、8000クラスタの容量を
    持っています。"PlayStation 2"本体のメモリーカードブラウザ画面では「
    7998キロバイト」と表示されますが、これは、後で述べるディレクトリエン
    トリ等の所要量を見込んで2クラスタ少ない値を表示する仕様となっているた
    めです。

  2.4 ファイルエントリ

    各ファイルのファイル名や属性、作成日などの管理情報を記録したデータ構
    造をファイルエントリと呼びます。ファイルはメモリーカード上では、ファ
    イルエントリとデータの実体とで構成されていることになります。次にファ
    イル構造の概念図を示します。
    
    ファイルエントリのうちユーザがアクセスできる部分は、sceMcGetDir()を用
    いて読み出すことができます。
    ファイルエントリ自体のサイズは512byteで、2つごとに１クラスタを消費し
    ます。

  2.5 ファイル属性

    ファイルエントリには、ファイルの形式や読み書き許可などを表す16bitのフ
    ァイル属性が記録されています。有効なビットは次のとおりです。
    
    +-------------------+----------+------------------------+
    |属性                ビット位置 マクロ                  |
    +                   +          +                        +
    |読み出し許可        bit 0      sceMcFileAttrReadable   |
    |書き込み許可        bit 1      sceFileAttrWriteable    |
    |実行許可            bit 2      sceMcFileAttrExecutable |
    |コピー禁止          bit 3      sceMcFileAttrDupProhibit|
    |サブディレクトリ    bit 5      sceMcFileAttrSubdir     |
    |保存完了            bit 7      sceMcFileAttrClosed     |
    |PDAアプリケーション bit 11     sceMcFileAttrPDAExec    |
    |"PlayStation"形式   bit 12     sceMcFileAttrPS1        |
    +-------------------+----------+------------------------+
    
    ファイル属性は、ファイル作成時にsceMcOpen()で指定するアクセスモードに
    したがって自動的に生成されます。sceMcSetFileInfo()を用いると既存のフ
    ァイルの属性を変更することも可能ですが、以下のような属性変更は、不都
    合を引き起こすおそれがあるため禁止されています。
         ・他のタイトルで作成されたファイルの属性を変更すること
         ・サブディレクトリの読み出し許可・実行許可をオフにすること
         ・サブディレクトリ内に書き込み許可属性がオンのファイルとオフのフ
           ァイルを混在させること
    
    データを"PlayStation 2"本体のメモリーカードブラウザ画面で簡単にコピー
    されないようにしたい場合、サブディレクトリのコピー禁止属性をオンにし
    てください。これによりサブディレクトリ全体がブラウザ画面でコピーでき
    なくなります。ブラウザ画面ではコピー禁止属性はサブディレクトリに対し
    てしか効きませんので、サブディレクトリのコピー禁止属性をオフにしたま
    まサブディレクトリ内のファイルそれぞれにコピー禁止属性を設定しても、
    コピー許可／禁止を振り分けることはできません。

  2.6 階層ディレクトリの構造

    階層ディレクトリ構造は、サブディレクトリ属性がセットされた「ファイル」
    によって実現されています。サブディレクトリ属性がセットされているファ
    イルエントリ（特に区別してディレクトリエントリと呼びます）はサブディ
    レクトリを表し、対応するデータ部分にはそのサブディレクトリに含まれる
    ファイルのファイルエントリが順に記録されているという構造になっていま
    す。
    
    
    なお、サブディレクトリがさらにサブディレクトリを含むという多層の階層
    ディレクトリ構造は、メモリーカード使用上の規定として禁じられています。

  2.7 所要容量の計算

    ファイルを作成するのに必要な容量は、以下のようにして計算することがで
    きます。
          (a) ファイル個々の使用クラスタ数
              次の式により、作成するファイルのサイズを1024バイト単位に切
              り上げてクラスタ数を求める。
              	クラスタ数 ＝ （バイト数＋1023） / 1024　　余りは切り捨て
          (b) ファイルエントリの使用クラスタ数
              次の式により、ファイルエントリに使用されるクラスタ数を求め
              る。
              	クラスタ数 ＝ （作成するファイル数＋1） / 2　　余りは切り
              捨て
          (c) ディレクトリエントリの使用クラスタ数
              新しくディレクトリを作成する場合、ディレクトリエントリに2ク
              ラスタが使用される。既存のディレクトリにファイルを追加する
              場合は0。
    上記(a)をファイルごとに求めて合計し、さらに(b),(c)を加えた値が、ファ
    イルを作成するために必要な容量となります。"PlayStation 2"本体のメモリ
    ーカードブラウザ画面で表示されるファイルサイズは、ファイル本体のみの
    サイズを合計してからクラスタ単位に切り上げた値であり、所要クラスタ数
    より小さな値となりますので注意してください。
    なお、メモリーカードの使用状況によっては、以前に削除されたファイルエ
    ントリ跡の領域を再使用できる場合があり、その場合は上記の計算で求めた
    所要クラスタ数を消費せずに済むこともあります。再使用できる領域がどれ
    だけあるかはsceMcGetEntSpace()を用いて調べることができます。
    日本版"PlayStation 2"のブラウザ画面で表示されるファイルサイズは、ファ
    イル本体のみのサイズを合計した値ですので、実際に使用されているクラス
    タ数より小さな値となっています。一方海外版"PlayStation 2"のブラウザ画
    面では、実消費クラスタ数が表示されます。

 3 ファイルの作成規定
----------------------

    メモリーカード(PS2)にファイルを作成する際には、以下説明する規定に従っ
    てください。
    ポケットステーションにファイルを作成する場合については、libmcxのドキ
    ュメントを参照ください。

  3.1 エントリ名に使用できる文字

    "PlayStation 2"専用メモリーカードファイルシステムにおいてディレクトリ
    名・ファイル名に使用可能な文字は、ASCIIコードで0x20〜0x7eの範囲のうち、
    '*'（0x2a）、'/'（0x2f）、'?'（0x3f）を除いた文字です。
    ディレクトリ名・ファイル名ともに、大文字と小文字は区別されます。

  3.2 タイトルごとのディレクトリ

    まず、ルートディレクトリに"キーコード"＋"商品型番"＋"8文字以内の任意
    文字列"という形式のエントリ名でディレクトリを作成し、各タイトルに必要
    なデータはすべてこの中に収めてください。ルートディレクトリにデータフ
    ァイルを置くことはできません。ディレクトリ名はたとえばBISLPS−
    00000xxxxxxxxのようになります。
    キーコードは商品型番と次のように対応しています。
    
    +----------+-----------+--------------------------+
    |キーコード 商品型番    対象                      |
    +          +           +                          +
    |BI         SLPS−xxxxx SCEI向けライセンスタイトル|
    |BA         SLUS−xxxxx SCEA向けライセンスタイトル|
    |BE         SLES−xxxxx SCEE向けライセンスタイトル|
    +----------+-----------+--------------------------+
    
    ポケットステーション用メモリーカード拡張ファイルヘッダ付の
    "PlayStation"形式データファイルを作成する場合は、商品型番5文字目の'−
    '（0x2d）を'P'（0x50）に置き換えたディレクトリ名としてください。
    末尾の任意文字列は8文字以内で自由に設定してかまいません。ひとつのタイ
    トルで複数のディレクトリを作成する場合は、この部分を使って区別するよ
    うにしてください。
    ディレクトリ名の最後はnull(0x00)ターミネートしてください。
    ルートに作成するディレクトリの数に制限はありません。一方、各タイトル
    用ディレクトリの中にサブディレクトリを作ることはできません。

  3.3 アイコンデータ

    "PlayStation 2"ファイル形式では、メモリーカードブラウザ画面で各タイト
    ルのシンボルとして表示される3Dアイコンのデータファイルを、各タイトル
    のディレクトリに用意しておく必要があります。アイコンデータは、通常次
    の4つを用意します。
    
    +----------------------------+----------+----------+
    |データ                       ファイル名 備考      |
    +                            +          +          +
    |アイコン管理用ファイル       icon.sys   内容は後述|
    |一覧表示用アイコンデータ     （任意）   必須      |
    |コピー中表示用アイコンデータ （任意）   兼用可    |
    |削除中表示用アイコンデータ   （任意）   兼用可    |
    +----------------------------+----------+----------+
    
    icon.sys以外はファイル名を31文字以内で自由に決めることができ、
    icon.sys内で指定します。これらのアイコンデータファイルはそれぞれ別々
    に用意することもできますし、同じアイコンデータファイルを兼用すること
    もできます。

  3.4 ユーザーデータ（"PlayStation 2"ファイル形式）

    "PlayStation 2"ファイル形式では、ひとつのディレクトリに複数のゲームデ
    ータファイル等のユーザデータを保存することができます。そのうちのひと
    つはディレクトリ名と同じ名前でなければなりません。データファイル内部
    の形式・データフォーマットは任意です。すべてのファイル名は31文字以内
    でなければなりません。

  3.5 ユーザーデータ（"PlayStation"ファイル形式）

    "PlayStation"ファイル形式のゲームデータは、各タイトルのディレクトリに、
    ディレクトリ名と同じ名前のファイルひとつだけを保存することができます。
    データファイル内部の形式・データフォーマットは、従来の"PlayStation"用
    ファイル形式に従ってください。
    ポケットステーションまたはメモリーカードからメモリーカード(PS2)に
    "PlayStation"ファイル形式データをメモリカードブラウザを使用してコピー
    すると、この基準に従った形式のディレクトリとファイルが作られます。

  3.6 サブディレクトリ内の最大ファイル数

    メモリーカード(PS2)にユーザーデータをセーブする際のファイルには、icon.
    sys、アイコンファイル、ディレクトリ名と同じ名前を持つファイル、その他
    データファイルがありますが、これらの合計が18ファイルを超えてはなりま
    せん。
    つまり、ひとつのサブディレクトリ内のファイル数は18個以下に制限されま
    す。アイコンファイルが3個の場合は以下の構成になります。
    icon.sys					：1個
    アイコンファイル				：3個
    ディレクトリ名と同名のユーザデータ		：1個
    その他のユーザデータ			：13個以内

  3.7 標準的なファイル構成例

    以上のことを総合すると、メモリーカード(PS2)上の標準的なファイル構成は
    次のようになります。
    

  3.8 ファイルの削除

    ファイルの削除に関して、次の点に注意してください。
         ・"PlayStation 2"ファイル形式ではicon.sysおよびアイコンデータファ
           イルが必須です。ユーザーデータを削除する際にはディレクトリごと
           すべて削除するか、ユーザーデータのみを削除してください。
         ・"PlayStation"ファイル形式では、ディレクトリ名と同じ名前のユーザ
           ーデータが必ずひとつ存在しなければなりません。ユーザーデータを
           削除する際にはディレクトリごと削除してください。

 4 アイコン定義ファイル
------------------------

    アイコン定義ファイルは"PlayStation 2"のメモリーカードブラウザ画面での
    アイコン表示を定義するファイルで、各タイトルディレクトリに必ず用意し
    ておかなければなりません。ファイル名はicon.sysに固定で、他の名前は使
    用できません。
    icon.sysの構造は以下のようになっています。
    
    +----------+-----------+------------------+---------------------------+
    |オフセット サイズ      名称               内容                       |
    |           （バイト）                                                |
    +          +           +                  +                           +
    |0          4           ヘッダ             'P','S','2','D'            |
    |4          2           (reserved)         0x0000                     |
    |6          2           タイトル名改行位置 2行目の先頭になる文字の位置|
    |8          4           (reserved)         0x00000000                 |
    |12         4           背景透過率         0（透明）〜 0x80（不透明） |
    |16         16          背景RGB・左上      sceVu0IVECTOR、{r,g,b,-}   |
    |           16          背景RGB・右上      の順、それぞれ0〜0x80      |
    |           16          背景RGB・左下                                 |
    |           16          背景RGB・右下                                 |
    |80         16          光源方向・光源１   光源の方向ベクトル、       |
    |           16          光源方向・光源２   sceVu0FVECTOR              |
    |           16          光源方向・光源３                              |
    |128        16          光源RGB・光源１    sceVu0FVECTOR、{r,g,b,-}   |
    |           16          光源RGB・光源２    の順                       |
    |           16          光源RGB・光源３                               |
    |176        16          アンビエント       sceVu0FVECTOR              |
    |192        68          タイトル名         SJIS全角文字の一部のみで   |
    |                                          32文字まで、末尾に'\0'     |
    |260        64          一覧用アイコン     63文字まで、末尾に'\0'     |
    |                       ファイル名                                    |
    |324        64          コピー時用アイコン 63文字まで、末尾に'\0'     |
    |                       ファイル名                                    |
    |388        64          削除時用アイコン   63文字まで、末尾に'\0'     |
    |                       ファイル名                                    |
    |452        512         (reserved)         オール0                    |
    +----------+-----------+------------------+---------------------------+
    
         ・タイトル名改行位置：
           タイトル名を何文字目で改行するかを指定します。タイトルの表示は
           16文字×2行までで、0を指定した場合は16文字目で改行されます。海
           外版"PlayStation 2"のブラウザではワードラップ処理が行われ、0あ
           るいは不正な値だった場合には、単語の区切りで改行が入ります。た
           だし画面の幅の制限上、有効でない場合もあります。16文字目の後で
           改行したければ、32を設定してください。
         ・背景透過率：
           このアイコンを選択したとき、背景のアイコン一覧が背景色を通り越
           して見える透過率を指定します。
         ・光源RGB、アンビエント：
           sceVu0LightColorMatrix() に渡され、ライトカラー行列の形で取り
           扱われます。
         ・タイトル名：
           タイトル名を指定します。全角32文字までで、使用できる文字は非漢
           字および第一水準漢字のみ、ただし0x84bfから0x889eは使用できませ
           ん。末尾に'\0'を必要とし、'\0'は文字数に含まれません。
         ・一覧用アイコンファイル名：
           メモリーカード中のファイル一覧を表示しているとき、および、この
           アイコンが選択されてひとつだけ大きく表示されるときに使用するア
           イコンデータのファイル名を指定します。末尾に'\0'が必要です。
         ・コピー時用アイコン、削除時用アイコン：
           それぞれcopy, deleteが選択されたときに使用するアイコンデータの
           ファイル名を指定します。末尾に'\0'が必要です。

 5 アイコンファイル
--------------------

    アイコンファイルは、アニメーション情報やテクスチャデータを含む、バイ
    ナリ形式の簡易な3次元オブジェクト定義ファイルです。"PlayStation 2"本
    体のメモリーカードブラウザ画面ではicon.sys中で指定されたアイコンファ
    イルが読み込まれ、適宜配置されて描画されます。

  5.1 ジオメトリ定義

    アイコンファイルでは、オブジェクトはすべて独立三角形として定義されま
    す。トライアングルストリップやライン等のプリミティブはサポートされて
    いません。1つのアイコンファイルで使用できる三角形数はアニメーションの
    設定によって異なり、以下に示すとおりです。
    
    +------------------+------------+
    |MIMEキーシェイプ数 最大三角形数|
    +                  +            +
    |1                  600         |
    |4                  500         |
    |6                  550         |
    |8                  400         |
    +------------------+------------+

    注意：キーシェイプ数２はサポートされていません。

    
    モデルはx = −10.0〜10.0, y=0.0〜−20.0, z=−10.0〜10.0の、一辺が20.0
    の立方体の中に収まるようにデザインしてください。これを超えると、画面
    に表示された際に隣のアイコンと干渉しあう恐れがあります。

  5.2 MIMEアニメーション

    アイコンファイルではMIMEによる頂点座標補間アニメーションがサポートさ
    れます。キーシェイプの個数は1、4、6、8個のいずれかを選択することがで
    きます。アニメーション処理は、フレーム毎に、それぞれのシェイプについ
    てキーフレームから計算された重み付けを行ってモデルの形状を計算するこ
    とによって行われます。
    アニメーションを行わない静止したアイコンについても、キーフレームは必
    ず1つ指定しなければなりません。その場合は、シェイプ1個、1フレーム目、
    重み1.0としてください。

  5.3 シェーディング

    アイコンのシェーディングは、三角形の各頂点に割り当てられた法線ベクト
    ル、色、テクスチャ座標と、icon.sysによって定義された平行光源1〜3、ア
    ンビエントによって計算されます。ライティングオフとすることはできませ
    ん。また、αブレンディング、αテストの効果を用いることもできません。

  5.4 テクスチャ

    アイコンモデルには16bit（PSMCT16）、128×128テクセルのテクスチャを1枚
    貼り付けることができます。
    テクスチャにはバイリニアフィルタが必ず適用されます。また、必ずポリゴ
    ンの色とモデュレートされます。テクスチャの色をそのまま出力する指定（
    DECAL）はできません。
    テクスチャを貼るように指定すると、すべてのポリゴンに同じテクスチャが
    貼り付けられます。テクスチャを貼りたくないポリゴンがある場合は、各頂
    点のSTをすべて同じ値に指定して同一のテクセルを参照させるなどの方法を
    用いてください。
    アイコンファイルのサイズを削減するため、ハーフワード単位のRun-Length
    符号化によってテクスチャを圧縮することができます（図柄によってはかえ
    ってサイズが大きくなる場合もあります）。

  5.5 アンチエイリアシング

    アイコン描画の際には、GSによるAA1アンチエイリアシング効果を加える必要
    があります。アイコンは比較的小さな領域に描画されるので、アンチエイリ
    アシングは非常に有効なためです。しかし、以下に述べるようないくつかの
    制限があります。この制限を参考にモデルやパラメータを調整してください。
         ・同じアイコンオブジェクト中の各ポリゴンについてはソーティングを
           行わないため、ポリゴン間でのアンチエイリアシングはかからない場
           合があります。
         ・AA1をかけるためにバックフェイスクリップを行っていますが、このた
           め、頂点順序からいって裏側になる面は見えません。これはAA1をか
           けない場合も同様ですので、ポリゴンの裏面も表示したい場合は、裏
           面に相当するポリゴンを別に定義してください。
         ・面が視線ベクトルに対して大きく傾いている場合、AA1によって膨らま
           せるピクセルのz値の補間がうまくいかず、誤ったz値が求められて後
           ろ側にあるポリゴンが描画されてしまう場合があります。これを防ぐ
           ため、大きく傾いているポリゴンを描画の際に判定してクリップする
           処理が含まれています。実際には計算処理を軽くするために、スクリ
           ーン上のポリゴンの面積が小さい場合に、ポリゴンが傾いているとみ
           なしています。この判定基準となる面積の閾値はアイコンファイル中
           （BFACE）で指定することができます。値が大きいほど、ポリゴンが
           クリップされます。1.0程度の値で試してみて、モデルの形状に応じ
           て調整してください。0.0で通常のバックフェイスクリップになりま
           す。なお、モデル形状によっては、この問題は完全に除去できないこ
           とがあります。
         ・細長いポリゴンや、非常に微小なポリゴンはAA1による描画ごみを引き
           起こしやすいので、なるべく使用しないでください。

  5.6 データ構造

    アイコンファイルのデータ構造は次のとおりです。
    実際のファイルには各セクションがこの順番で詰めて格納されています。
    モデルセクションでは頂点データの始めのほうから順に3頂点ずつで１個の三
    角形が表現されます。

    バージョンヘッダ

    +-------+----------+--------------------------------------------+
    |Name    Size(byte) Contents                                    |
    +       +          +                                            +
    |VERSION 4 [int]    VERSION No = 0x0001 0000　　　　　　　　　　|
    +-------+----------+--------------------------------------------+

    モデルセクション

    +-------+----------+--------------------------------------------------+
    |Name    Size(byte) Contents                                          |
    +       +          +                                                  +
    |NBSP    4 [int]    シェイプの個数  1, 4, 6, 8のいずれか　　　　　　　|
    |ATTRIB  4          モデル属性（詳細後述）                            |
    |BFACE   4 [float]  バックフェイスクリップの基準値（通常1.0）         |
    |NBVTX   4 [int]    頂点数（3の倍数）                                 |
    |VTX     8×NBSP    頂点１の頂点座標                                  |
    |NORMAL  8          　　　　法線ベクトル                              |
    |ST      4          　　　　テクスチャ座標                            |
    |COLOR   4          　　　　頂点色                                    |
    |VTX     8×NBSP    頂点2の頂点座標                                   |
    |NORMAL  8          　　　　法線ベクトル                              |
    |ST      4          　　　　テクスチャ座標                            |
    |COLOR   4          　　　　頂点色                                    |
    |----    ----       NBVTX個まで繰り返し                               |
    +-------+----------+--------------------------------------------------+

    アニメーションセクション

    +-------+----------+-------------------------------------------------+
    |Name    Size(byte) Contents                                         |
    +       +          +                                                 +
    |NBSEQ   4          シーケンスの個数（現在は1のみサポート）          |
    |NBFRAME 4 [int]    シーケンス１のフレーム長                         |
    |SPEED   4 [float]  　　　　　　　再生スピード倍率                   |
    |OFFSET  4 [int]    　　　　　　　再生オフセット（フレーム番号）     |
    |NBKSP   4          　　　　　　　シェイプ個数（最大8個）            |
    |KSPID   4          シェイプキー１のシェイプ番号                     |
    |NBKF    4          　　　　　　　　　キーフレーム個数（最大10）     |
    |KEYS    8×NBKF    　　　　　　　　　キーデータ（NBKF個：別表参照） |
    |KSPID   4          シェイプキー2のシェイプ番号                      |
    |NBKF    4          　　　　　　　　　キーフレーム個数（最大10）     |
    |KEYS    8×NBKF    　　　　　　　　　キーデータ（NBKF個：別表参照） |
    |----    ----       NBKSP個まで繰り返し                              |
    +-------+----------+-------------------------------------------------+

    テクスチャセクション

    +----+----------+----------------------------------------------------+
    |Name Size(byte) Contents                                            |
    +    +          +                                                    +
    |SIZE 4 [int]    圧縮されたテクスチャのサイズ(非圧縮時はこの項目省略)|
    |TEX  -          テクスチャ（PSMCT16形式の128×128イメージ）         |
    +----+----------+----------------------------------------------------+
    
         ・VTX：頂点座標
           頂点座標は、(x, y, z)各要素を6:10の固定小数（2bytes）で表し
           2bytesのパディングを加えた8bytesを1組とし、NBSP（シェイプ個数）
           組で1個の頂点を表します。
           floatから6:10固定小数に変換するマクロが /usr/local/sce/ee/
           sample/mc/icon/iconconv ソース中にあります。
         ・NORMAL：法線ベクトル
           法線ベクトルは、(x, y, z)各要素を4:12の固定小数（2bytes）で表
           し2bytesのパディングを加えた8bytesで表します。
           floatから4:12固定小数に変換するマクロが /usr/local/sce/ee/
           sample/mc/icon/iconconv ソース中にあります。
         ・ST：テクスチャ座標
           テクスチャ座標は、(s, t)各要素を4:12の固定小数（2bytes）で表し
           ます。
         ・COLOR：頂点色
           頂点色はr, g, b, a各1byteの4bytesで表します。ただしaの値は無視
           されます。
         ・KEYS：キーデータ
           キーデータは次のように、キーとなるフレーム番号とそのフレームで
           当該シェイプ（対応するKSPIDで指定されるシェイプ）に与える重み
           を組にした8byteデータです。
      
    +------+----------+--------------------------------------------------+
    |Name   Size(byte) Contents                                          |
    +      +          +                                                  +
    |FRAME  4 [float]  キーフレームのフレーム番号　　　　　　　　　　　　|
    |WEIGHT 4 [float]  シェイプの重み                                    |
    +------+----------+--------------------------------------------------+

  5.7 モデル属性

    モデル属性ATTRIBは、次のように定義されています。

    BIT ASSIGN

    +------------------------------------------------------+--+--+--+--+
    |31　                                                   03 02 01 00|
    +                                                      +  +  +  +  +
    |　　　　　　　　　　　　　　　　　　　　　　　　　　　 R  T  A  I |
    |                                                       L  E  N  I |
    |                                                       E  X  T  P |
    |                                                             I    |
    +------------------------------------------------------+--+--+--+--+

    FIELD

    +----+----+------------------------------------------------+
    |Name Pos. Contents                                        |
    +    +    +                                                +
    |IIP  0    シェーディング方式　　　　　　　　　　　　　　　|
    |          0 : flat shading                                |
    |          1 : gouraud shading                             |
    |ANTI 1    アンチエイリアシング予約ビット。1固定。         |
    |TEX  2    テクスチャ貼り付けのon/off                      |
    |RLE  3    テクスチャ圧縮の有無                            |
    |          0 : 非圧縮（PSMCT16 rawイメージ）               |
    |          1 : short word単位のRun-Length圧縮済み          |
    +----+----+------------------------------------------------+

  5.8 変換ツール

    アイコンファイルの作成をサポートするツールとして、必要なデータ列を記
    述したASCIIファイルからアイコンフォーマットのバイナリファイルに変換／
    逆変換するプログラムを用意してあります。Linux上で動作するもので、ソー
    スコードが /usr/local/sce/ee/sample/mc/icon/iconconv に登録されていま
    す。
    また、Run-Length符号化によるイメージデータの圧縮／展開を行うプログラ
    ムを用意してあります。同じくLinux上で動作するもので、ソースコードが /
    usr/local/sce/ee/sample/mc/icon/rle に登録されています。

 6 メモリーカード使用手順の概略
--------------------------------

    以下、プログラム上でメモリーカードを扱うときの処理手順を説明します。
    マルチタップに対応するかどうかによって初期化の処理が異なります。

  6.1 初期化（マルチタップを使わない場合）

         (1) メモリーカード・ドライバ（IOPモジュール）のロード
             sceSifLoadModule()を用いて、sio2man.irx, mcman.irx ,
             mcserv.irxをこの順番でロードします。padman.irxはsio2man.irx
             より後であれば、mcman.irx, mcserv.irxより先にロードしても後
             にロードしてもかまいません。
         (2) メモリーカード・ドライバの初期化
             sceMcInit()を呼び出します。

  6.2 初期化（マルチタップを使う場合）

         (1) メモリーカード・ドライバ（IOPモジュール）のロード
             sceSifLoadModule()を用いて、sio2man.irx, mtapman.irx, 
             mcman.irx ,mcserv.irxをこの順番でロードします。padman.irxは
             mtapman.irxの後であれば、mcman.irx, mcserv.irxより先にロード
             しても後にロードしてもかまいません。
         (2) マルチタップ・ドライバの初期化
             sceMtapInit()を呼び出します。
         (3) マルチタップスロット使用開始宣言
             sceMtapPortOpen(2または3) を呼び出して、それぞれ"PlayStation
              2"本体のメモリーカード差込口1，2に対してマルチタップ経由で
             アクセスできるように宣言します。
         (4) メモリーカード・ドライバの初期化
             sceMcInit()を呼び出します。
         (5) マルチタップの接続確認
             sceMtapGetConnection(2 または 3) を呼び出して、マルチタップ
             が接続されていることを確認します（初期化時だけでなく、随時確
             認することができます）。
         (6) 使用可能スロット数の確認
             マルチタップが接続されていることがわかれば、
             sceMcGetSlotMax(0または1) を呼び出してマルチタップが装備して
             いる最大スロット数を調べます。libmcの各関数で受け付けられる
             スロット番号は0〜(最大数−1) となります。

  6.3 メモリーカードの差し込み確認

    初期化が終わったら、sceMcGetInfo()を呼び出して、メモリーカードが差し
    込まれていることを確認する必要があります。
    この関数はほとんどのメモリーカード操作関数と同じく、関数呼び出しによ
    って処理の登録のみ行い、sceMcSync()でポーリングして処理終了を待つしく
    みになっています。終了待ちの間、他のメモリーカード操作処理を登録する
    ことはできません。プログラムとしては以下のいずれかの形になります。

    [同期待ち]

    sceMcGetInfo(  ,  ,  ,  ,  );
    sceMcSync(0,  ,  );

    [非同期待ち]

    sceMcGetInfo(  ,  ,  ,  ,  );
    while(!sceMcSync(1,  ,  )) {
    	/* 他の処理 */
    }
    
    sceMcGetInfo(port, slot, type, free, format) において、type, free, 
    formatのうち不要なパラメータを0にしておくと、処理完了までの時間が短く
    なります。
    メモリーカードの差し込み確認が終わると、sceMcGetInfo()以外のメモリー
    カード操作関数が使用可能になります。使いかたはsceMcGetInfo()と同じで、
    それぞれの処理を登録してsceMcSync()で処理の完了を待つという組み合わせ
    で呼び出します。
    なお、プログラムの途中でメモリーカードが検出できなくなりエラーになっ
    た場合は、新たなメモリーカードが差し込まれるのを待たなくてはいけませ
    ん。その場合はもう一度、上記の差し込み確認を行ってください。

  6.4 空き容量のチェック

    メモリーカードにファイルを作成するタイトルでは、起動時に、差し込まれ
    ているメモリーカードに十分な空き容量があるかどうかをチェックしなけれ
    ばなりません。
    ファイル作成に必要な容量を先に説明した方法で計算し、sceMcGetInfo()で
    得た空きクラスタ数と比較して判断してください。

  6.5 フォーマット処理

    新しいメモリーカードは使用開始時にフォーマットを行う必要があります。
    sceMcGetInfo()によって未フォーマットとわかった場合は、その旨のメッセ
    ージを画面に表示しユーザの確認を求めたうえで、sceMcFormat()を用いてフ
    ォーマット処理を行ってください。

  6.6 ファイル破損の判定と処置

    書き込み処理の最中にメモリーカードが抜き取られるなど不測の事態によっ
    て、ファイルの内容が正しく記録されない場合や既存ファイルの内容が破壊
    される場合があります。ファイルの書き込みが正しく完了したかどうか、読
    み込んだファイルの内容が適切かどうか、適宜チェックし、ファイル破損対
    策を施してください。
    書き込み完了の判定には、ファイル属性の保存完了（sceMcFileAttrClosed）
    を利用することができます。この属性は、sceMcWrite()でデータを書き出し
    てsceMcClose()またはsceMcFlush()でメモリーカードに記録するという一連
    の書き込み処理がエラー無しに完了したことを表します。
    ただし、リリース1.4.5以前のライブラリを使用して作成されたファイルや
    "PlayStation 2"本体のメモリーカードブラウザ画面でコピーされたファイル
    ではこの保存完了属性はセットされませんので、既存ファイルの破損判定に
    は利用できません。読み込んだファイル内容が破損していないかどうか判定
    するため、チェックサムを付加するなどの処理を組み込むようお勧めします。

 7 注意事項
------------


  7.1 RPC再入に関する注意

    libmcの関数はSIF RPCを内部で使用します。そのため、複数のスレッドで利
    用する場合はRPC再入を起さないように注意が必要です。RPC再入については
    「SIFシステム」ドキュメントに解説がありますので参照してください。

   (1) RPC WAIT関数

      以下の関数はsceSifBindRpc() / sceSifCallRpc()をWAIT実行します。RPC
      再入に注意するほか、割り込み禁止状態や割り込みハンドラ内で呼び出さ
      ないようにしてください。
         ・sceMcInit()

   (2) RPC NOWAIT関数

      sceMcInit()を除いて、libmcのすべての関数はsceSifBindRpc() / 
      sceSifCallRpc()をNOWAIT実行します。RPC再入に注意するほか、割り込み
      ハンドラ内では呼び出さないようにしてください。

   (3) RPCチェック関数

      以下の関数はsceSifCheckStatRpc()を呼び出します。RPC再入に注意して使
      用してください。
         ・sceMcSync()

  7.2 スレッドプライオリティの変更

    libmcのIOP側モジュールmcserve.irxのスレッドプライオリティは、デフォル
    トでは104になっています。必要に応じて、モジュールロード時にプライオリ
    ティを指定し、また、実行中に変更することができます。
    モジュールロード時に指定するには、次のように、sceSifLoadModule()の第3
    引数で指定します。
      unsigned char *param = "thpri=100";
      sceSifLoadModule( "host0:/usr/local/sce/iop/modules/mcserv.irx", 
      strlen(param)+1, param);
    
    実行中にプライオリティを変更するには、sceMcChangeThreadPrioriry()を呼
    び出します。詳しくは関数リファレンスを参照してください。
