[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

dsedb / dsidb コマンドリファレンス
===================================


 1 コマンド一覧
----------------

    dsedb / dsidbのコマンドには以下のものがあります。各コマンドの詳細は「
    5 コマンド詳細」を参照してください。
    
    +-------------------------------+----------------------------+----+
    |コマンド                        説明                         備考|
    +                               +                            +    +
    |dr [-<cpuid>] [-[hfxw]*]        レジスタの表示               Ｅ  |
    |   [<reg>]...                                                    |
    |dr [<reg>]...                   レジスタの表示               Ｉ  |
    |sr [<reg> [<val>]]...           レジスタの設定                   |
    |rload <fname>                   レジスタのロード                 |
    |rsave <fname> [<reg>]...        レジスタのセーブ                 |
    |bload <fname> <adr>             バイナリデータのロード           |
    |bsave <fname> <adr> <cnt>       バイナリデータのセーブ           |
    |di [-m <mark>] [<adr> [<cnt>]]  逆アセンブル表示                 |
    |vdi [-<cpuid>] [-m <mark>]      VUマイクロ命令の             E   |
    |　　[<adr> [<cnt>]]             逆アセンブル表示                 |
    |as <adr> <inst>                 行単位の簡易アセンブラ           |
    |list [<adr> [<cnt> [<back>]]]   ソース行の表示                   |
    |bt [<cnt>]                      バックトレースの表示             |
    |bp [<adr>[,<cnt>]]...           ブレークポイントの設定           |
    |ub [all|<adr>]...               ブレークポイントの解除           |
    |be [<adr>]...                   ブレークポイントの有効化         |
    |bd [<adr>]...                   ブレークポイントの無効化         |
    |hbp [pc][<uskx>]                ハードウェアブレークポイント E   |
    |    [:<adr>[,<amsk>]]...        の設定                           |
    |hbp [da|dr|dw][<uskx>]                                           |
    |　　[:<adr>[,<amsk>]                                             |
    |　　=<val>[,<vmsk>]]...                                          |
    |hbp [pc|da|dr|dw][<uk>]         ハードウェアブレークポイント I   |
    |　　[:<adr>[,<amsk>]]           の設定                           |
    |hub [pc|da|dr|dw]...            ハードウェアブレークポイント     |
    |                                の解除                           |
    |pload <fname> [<args>]...       ターゲットプログラムのロード E   |
    |mload <fname> [<args>]...       ターゲットプログラム         I   |
    |                                モジュールのロード               |
    |mlist [-m]                      ターゲットにロードした       I   |
    |                                モジュールの一覧表示             |
    |sload [<fname>]                 プログラムのシンボルのみの   E   |
    |                                ロード                           |
    |sload [-id <id>]                プログラムモジュールの       I   |
    |     [-b <base>] [<fname>]      シンボルのみのロード             |
    |run [<fname> [<args>]...]       ターゲットプログラムの実行   E   |
    |mstart [-d]                     ターゲットプログラム         I   |
    |       [<fname> [<args>]...]    モジュールの実行                 |
    |cont [<cnt>]                    ターゲットプログラムの継続       |
    |step [<cnt>]                    ターゲットプログラムの           |
    |                                ステップ実行                     |
    |next [<cnt>]                    ターゲットプログラムの           |
    |                                ネクスト実行                     |
    |lstep [<cnt>]                   ソース行単位でのステップ実行     |
    |lnext [<cnt>]                   ソース行単位でのネクスト実行     |
    |until <adr>...                  一時的ブレークポイントによる     |
    |                                継続実行                         |
    |break                           ターゲットプログラムの中断       |
    |wait                            ターゲットプログラムの停止       |
    |                                を待つ                           |
    |reset [-i] [<ebootp> [<ibootp>] ターゲットのリセット             |
    |xgkt <fname> <cnt> [<off>]      XGKICK トレースの開始        E   |
    |dbgctl [vu0|vu1] [on|off]       デバッグモードの設定         E   |
    |storeimage <fname> <bp> <bw>    GS イメージデータの保存      E   |
    |　　<psm> <x><y> <w> <h>                                         |
    |bpfunc <adr>                    ブレークポイント関数の設定       |
    |set [all] [<var>[=<val>]]       オプション/ユーザ変数の          |
    |                                表示と設定                       |
    |alias [-r] [<name> [<value>]]   別名の表示、設定、削除           |
    |subst [-r] [<pattern>           コマンド入力行置換の表示、       |
    |　　 <replace>...]              設定、削除                       |
    |source <fname>                  ファイルからのコマンド実行       |
    |![<cmd> [<args>]...]            シェル呼び出し                   |
    |cd [<directory>]                カレントディレクトリの変更       |
    |printf "<fmt>" [<args>]...      書式付きメッセージ出力           |
    |record [[-a] <fname>]           画面出力内容の記録開始           |
    |                                と終了                           |
    |repeat [-c <cnt>] [-i <sec>]    コマンドの繰り返し実行           |
    |　　[-while <expr>] <cmd>...                                     |
    |show [log|status|history|       内部情報の表示                   |
    |　　dbconf |symbol|mdebug] ...                                   |
    |help [<keyword>]...             ヘルプメッセージの表示           |
    |quit                            dsedb の終了                     |
    +-------------------------------+----------------------------+----+
    *E：dsedb専用
     I：dsidb専用

 2 行入力
----------

    dsedb / dsidbでのコマンド入力時には、矢印キーの他に以下の編集キーが使
    用できます。
    
    +--------+------------------------------------------+
    |編集キー 機能                                      |
    +        +                                          +
    |Ctrl-P   前の行への移動                            |
    |Ctrl-N   次の行への移動                            |
    |Ctrl-B   前の文字(左)への移動                      |
    |Ctrl-F   次の文字(右)への移動                      |
    |Ctrl-A   カレント行の先頭への移動                  |
    |Ctrl-E   カレント行の最後への移動                  |
    |BS       前の文字の削除                            |
    |DEL      前の文字の削除                            |
    |Ctrl-D   カレント文字の削除                        |
    |Ctrl-X   カレント行すべての削除                    |
    |Ctrl-U   カレント行すべての削除                    |
    |Ctrl-K   カレント行のカレント文字から行末までの削除|
    |Ctrl-L   カレント行の再表示                        |
    |Ctrl-C   入力の中断 (^C のエコーあり)              |
    |Ctrl-G   入力の中断 (^G のエコーなし)              |
    |LF, CR   入力の終了、カレント行をコマンドとして実行|
    |TAB      コマンド名、ファイル名、シンボル名など補完|
    |Ctrl-R   逆方向サーチ                              |
    |Ctrl-S   順方向サーチ                              |
    |Ctrl-Y   Ctrl-K で削除した文字列の挿入             |
    +--------+------------------------------------------+
    
    TABによる補完は、行の最後でTABを入力した場合にのみ可能で、以下の4つの
    ケースをサポートしています。
    
         (1) 空白を含まない文字列
             コマンド名として補完を試みます。
         (2) setコマンドの引数
             オプション名として補完を試みます。
         (3) helpコマンドの引数
             ヘルプのキーワードとして補完を試みます。
         (4) その他のコマンドの引数
             '/' もしくは '.' が含まれていた時はファイル名として、それ以
             外はシンボルとして補完を試みます。
    
    プログラム実行時には、Ctrl-Cでbreakコマンドをターゲットに送ります。
    Ctrl-Gでは、breakコマンドを送らないで単にdsedb / dsidbに制御が戻りま
    す。
    RETURNキーで、メモリ内容の表示やステップ実行など、直前に実行したコマ
    ンドを再実行できます。このとき、メモリの表示などはアドレスを増加させ
    たうえで再実行されます。
    

 3 表現式
----------

    ファイル名以外の一般的な値を持つコマンド引数には、以下の表現式（expr）
    を使用することができます。
    
    +----------------+-------------------------------------------------+
    |表現式           説明                                             |
    +                +                                                 +
    |16進数           0xはシンボルと重複しない限り省略可能             |
    |symbol           シンボル                                         |
    |<fname>:<lineno> 行番号による指定                                 |
    |<fname>:<func>   staticで重複する名前の関数                       |
    |.                現在のアドレス (ドットアドレス)                  |
    |.<digit>         C言語と同じ形式での数値 (8,10,16 進数)           |
    |$<reg>           現在のレジスタ値またはユーザ変数値               |
    |(expr)           式としての括弧                                   |
    |+expr            正の符号の明示                                   |
    |-expr            符号反転                                         |
    |~expr            ビット反転                                       |
    |*expr            アドレス間接指定 (アドレスが指す先は常にワード)  |
    |expr1[expr2]     *(expr1 + ((expr2) << 2)) と等価                 |
    |!expr            論理反転                                         |
    |expr1 || expr2   論理 OR                                          |
    |expr1 && expr2   論理 AND                                         |
    |expr1 |  expr2   ビット OR                                        |
    |expr1 ^  expr2   ビット XOR                                       |
    |expr1 &  expr2   ビット AND                                       |
    |expr1 == expr2   等しい場合に真(=1)、それ以外は偽(=0)             |
    |expr1 != expr2   等しくない場合に真(=1)、それ以外は偽(=0)         |
    |expr1 <  expr2   符号なし比較 (less than)                         |
    |expr1 <= expr2   符号なし比較 (less than or equal)                |
    |expr1 >  expr2   符号なし比較 (greater than)                      |
    |expr1 >= expr2   符号なし比較 (greater than or equal)             |
    |expr1 >> expr2   expr1 を右へ expr2ビットシフト(両方とも符号なし) |
    |expr1 << expr2   expr1 を左へ expr2ビットシフト(両方とも符号なし）|
    |expr1 +  expr2   expr1,expr2 の算術的加算(両方とも符号なし)       |
    |expr1 -  expr2   expr1,expr2 の算術的減算(両方とも符号なし)       |
    |expr1 *  expr2   expr1,expr2 の算術的乗算(両方とも符号なし)       |
    |expr1 /  expr2   expr1,expr2 の算術的除算(両方とも符号なし)       |
    |expr1 %  expr2   expr1,expr2 の算術的剰余(両方とも符号なし)       |
    +----------------+-------------------------------------------------+
    
    括弧、単項演算子および二項演算子の優先順位は C 言語と同じであり、以下
    のようになっています。
    
    +--------------------------------+------+
    |括弧、単項演算子および二項演算子 優先度|
    +                                +      +
    |() []                            高    |
    |! + - ~ * (単項演算子)           ↑    |
    |* / %                            ↑    |
    |+ - (二項演算子)                 ↑    |
    |<< >>                            ↑    |
    |< <= > >=                        ↑    |
    |== !=                            ↑    |
    |&                                ↑    |
    |^                                ↑    |
    ||                                ↑    |
    |&&                               ↑    |
    |||                               低    |
    +--------------------------------+------+
    
    表現式 (expr) 中の数値は特に指定がない限り 16 進として解釈します。
    例外は $10 の '10' や、シンボル中の行番号などです。
    
    16 進数の定義は [0[xX]][0-9a-fA-F]+ であり、大文字と小文字の区別はあ
    りません。16進数が使える箇所で10進数を指定するには、数字の前に'.'を置
    いてください。8進数を指定するには'.0'を前置します。'.'と数字の間に空
    白を空けることはできません。
    
    シンボルの指定形式は以下のいずれかです。
    
          (a) <symbol>
          (b) :<symbol>
    
    'a123' のように 16 進数としてもシンボルとしても解釈可能でそのシンボル
    が実際に存在する場合にはエラーとしています。このような場合には、16 進
    なら '0x'を前置し、シンボルならば ':a123' と ':' を前置し、どちらであ
    るかを明示してください。
    
    レジスタ名には '$a0'のようにシンボリックな表現の他に '$4'のような番号
    指定も使えます。レジスタ番号指定時の数値部分は 10 進数です。
    
    表現式中の "." は特殊なシンボルで、メモリの表示や設定、di、as 等の各
    コマンド実行中は「現在のアドレス」の値を持ち、コマンド終了時には「次
    のアドレス」の値となります。
    
    以下は表現式の指定例です。
        db 80100000
        di main+0x100
        di (main + 100 + *(1002 + 4) * 5)
        di $epc-8
        db $t0+0x124+$v0+buf

 4 オプション一覧
------------------

    dsedbのオプションには以下のものがあります。
    
    +---------------------------+--------+--------------------------+----+
    |オプション名                値の形式 内容                       備考|
    +                           +        +                          +    +
    |target_name                 文字列   dsnetm のホスト名および    ※  |
    |                                     ポート                         |
    |tty_mask                    数値     ターゲットの TTYP 入出力   ※  |
    |                                     の設定                         |
    |atty_mask                   数値     IOP/EE TTYP表示の設定      ※  |
    |file_priority               数値     Remote File Access の      ※  |
    |                                     優先順位                       |
    |reset_on_start              ブール   起動時のリセットの有無     ※  |
    |check_manager_version       ブール   manager version チェック   ※  |
    |                                     の有無                         |
    |target_exec_ctl_config      数値     ターゲット実行制御の状態       |
    |target_exec_ctl_override    数値     ターゲット実行制御の           |
    |                                     上書き                         |
    |dr_default_format           文字列   drコマンドのデフォルト         |
    |                                     表示形式指定                   |
    |dr_default_di               文字列   dr コマンド時のdi実行          |
    |                                     内容指定                       |
    |ex_default_dr               文字列   例外発生時のdr実行内容         |
    |                                     指定                           |
    |dr0_default_di              文字列   dr -vu0コマンド時のdi          |
    |                                     実行内容指定                   |
    |ex0_default_dr              文字列   VU0例外発生時のdr実行          |
    |                                     内容指定                       |
    |dr1_default_di              文字列   dr -vu1 コマンド時のdi         |
    |                                     実行内容指定                   |
    |ex1_default_dr              文字列   VU1例外発生時のdr実行          |
    |                                     内容指定                       |
    |lstep_default_list          文字列   lstep,lnext 実行後の list      |
    |                                     実行指定                       |
    |lstep_stop_at_no_line       数値     lstep,lnext で行番号がない     |
    |                                     場合に停止                     |
    |source_directories          文字列   ソース探索ディレクトリ         |
    |                                     リストの指定                   |
    |initial_ebootp              文字列   EE 用ブートパラメータの        |
    |                                     初期値                         |
    |current_ebootp              文字列   EE 用ブートパラメータの        |
    |                                     現在値                         |
    |initial_ibootp              文字列   IOP 用ブートパラメータの       |
    |                                     初期値                         |
    |current_ibootp              文字列   IOP 用ブートパラメータの       |
    |                                     現在値                         |
    |automatic_prefix_breakpoint ブール   ブレークポイント番号形式       |
    |                                     への自動前置                   |
    |describe_ub_all             ブール   ubでall指定時のみに            |
    |                                     全削除を行う                   |
    |di_address                  数値     diコマンドのアドレス           |
    |                                     表示方式                       |
    |di_instruction_word         数値     diコマンドの命令ワードの       |
    |                                     表示方式                       |
    |di_branch_address           数値     diコマンドの分岐アドレス       |
    |                                     表示方式                       |
    |di_macro                    数値     di/as コマンドのマクロ命令     |
    |                                     制御                           |
    |help_lang                   文字列   ヘルプ表示の言語               |
    |help_pager                  文字列   ヘルプ表示に使用する           |
    |                                     ページャ                       |
    |hex_radix                   ブール   数値を0xなしで16進数と         |
    |                                     みなす                         |
    |log_total_size              数値     送受信ログの最大合計           |
    |                                     バイト数                       |
    |log_packet_size             数値     送受信ログのパケットごと       |
    |                                     の最大バイト数                 |
    |histfile                    文字列   ヒストリセーブファイル名       |
    |histfilesize                数値     セーブするヒストリ数           |
    |histsize                    数値     ヒストリの上限数               |
    |tty_max_size                数値     TTY パケットの最大保留         |
    |                                     バイト数                       |
    +---------------------------+--------+--------------------------+----+
    *※：起動時専用
    dsedb は起動時に ~/.dsedbrc と ./.dsedbrc の存在を調べ、それらのファ
    イルが存在すればその順序で起動時に自動実行ファイルとして実行します。
    起動時専用のオプションは、その自動実行ファイル内のoption文によっての
    み設定可能なオプションです。起動後にsetコマンドで変更することはできま
    せん。option文の引数はsetコマンドと同じ引数を持ちます。

 5 コマンド詳細
----------------


  5.1 dr [-<cpuid>] [-[hfxw]*] [<reg>]...　（dsedb用）

    <reg> には レジスタ名またはレジスタのグループ名を指定します。指定でき
    るレジスタグループ名は以下のとおりです。汎用レジスタについては、レジ
    スタ番号形式 (例: $a0 は $4)も使用可能です。
    
    +------------------+--------------------------------+
    |レジスタグループ名 内容                            |
    +                  +                                +
    |gpr                General Purpose Registers       |
    |hls                HI、LO、HI1、LO1、SA            |
    |scr                System Coprocessor Registers    |
    |pcr                Performance Counter Registers   |
    |hdr                Hardware Breakpoint Registers   |
    |fpr                Floating Point Registers        |
    |fpc                Floating Point Control Registers|
    |vu0f               VU0 Floating Registers          |
    |vu0I               VU0 Integer Registers           |
    |vu1f               VU1 Floating Registers          |
    |vu1I               VU1 Integer Registers           |
    +------------------+--------------------------------+
    
    -<cpuid> オプションには以下のいずれかを指定できます。
    
    +------------+-------------------------------------------------------+
    |オプション名 説明                                                   |
    +            +                                                       +
    |-cpu         <reg> を省略した時に CPU レジスタを表示対象とします。  |
    |             [default]                                              |
    |             汎用レジスタと $lo、$hi、$sa、$PC、$cause、$status、   |
    |             $badvaddr、$badpaddrの下位32 bit および $PCの前後の    |
    |             逆アセンブル表示を行ないます。                         |
    |-vu0         <reg> を省略した時に VU0 レジスタを表示対象とします。  |
    |-vu1         <reg> を省略した時に VU1 レジスタを表示対象とします。  |
    |             VI00-VI16,TPC,FBRST,VPU-STAT レジスタおよびTPC前後の   |
    |             逆アセンブル表示を行ないます。                         |
    |             $PCは疑似レジスタで $epc、$errorepc、$status、$causeの |
    |             4つのレジスタ値から計算されたプログラムカウンタの値を  |
    |             持ちます。                                             |
    +------------+-------------------------------------------------------+
    
    -[hfxw]* オプションで fpr,vu0f,vu1f レジスタの値の表示指定ができます。
    
    +------------+-------------------------------------------------------+
    |オプション名 説明                                                   |
    +            +                                                       +
    |-h           32bit 値を 16 進数で表示します。(fpr,vu0f,vu1f)        |
    |             [default]                                              |
    |-f           32bit 値を浮動小数で表示します。(fpr,vu0f,vu1f)        |
    |-x           vu0f,vu1f の表示順序を XYZW 順で表示します。(vu0f,vu1f)|
    |-w           vu0f,vu1f の表示順序を WZYX 順で表示します。(vu0f,vu1f)|
    |             [default]                                              |
    +------------+-------------------------------------------------------+

  5.2 dr [<reg>]...　（dsidb用）

    <reg>で指定されたレジスタの内容を表示します。
    <reg> には レジスタ名または、レジスタのグループ名を指定します。
    指定できるレジスタグループ名は以下のとおりです。
    
    +------------------+------------------------------------+
    |レジスタグループ名 内容                                |
    +                  +                                    +
    |gpr                General Purpose Registers           |
    |hl                 HI、LO                              |
    |scc                System Coprocessor Registers        |
    |c2r                coprocssor 2 (GTE) registers        |
    |c2c                coprocssor 2 (GTE) control registers|
    |gte                all GTE registers (cop2,cp2)        |
    +------------------+------------------------------------+
    
    汎用レジスタについてはレジスタ番号形式 (例: $a0 は $4)も使用可能です。
    <reg> を省略した場合には汎用レジスタと $lo、$hi、$PC、$bada および$PC
     前後の逆アセンブル表示を行います。
    $PC は疑似レジスタで $epc と $status の 2 つのレジスタ値から計算され
    たプログラムカウンタの値を持ちます。

  5.3 sr [<reg> [<val>]]...

    <reg> で指定されたレジスタに値 <val> を設定します。

  5.4 rload <fname> 

    指定されたファイル <fname> からレジスタ値をロードします。
    一般には rsave コマンドでセーブしたファイル名を指定します。

  5.5 rsave <fname> [<reg>]...

    指定されたファイル <fname> に指定レジスタ <reg>... のレジスタ名と値を
    セーブします。
    <reg>... を省略すると dr の省略時と同じレジスタをセーブします。

  5.6 dx [<adr> [<cnt>]]

    指定アドレス <adr> からメモリの内容を表示します。次のように、データ幅
    の異なる６つのコマンドがあります。
    
    +------------------+-------------------------+
    |コマンド名         説明                     |
    +                  +                         +
    |dq [<adr> [<cnt>]] メモリ内容の表示 (quad)  |
    |dd [<adr> [<cnt>]] メモリ内容の表示 (double)|
    |dw [<adr> [<cnt>]] メモリ内容の表示 (word)  |
    |dh [<adr> [<cnt>]] メモリ内容の表示 (half)  |
    |db [<adr> [<cnt>]] メモリ内容の表示 (byte)  |
    |df [<adr> [<cnt>]] メモリ内容の表示 (float) |
    +------------------+-------------------------+
    
    <adr> のデフォルトはドットアドレス（現在のアドレス）です。
    <cnt> は一度に表示するバイト数で、dq などで端数がある場合には切り上げ
    られます。128bit 単位でアクセスしなければならない I/O レジスタなどに
    対して、dq 以外のコマンド等でアクセスした場合の値は保証できません。

  5.7 sx <adr> <val>...

    指定アドレス <adr> 以降のメモリに指定データ<val>...を書き込みます。次
    のように、データ幅の異なる６つのコマンドがあります。
    
    +------------------+-------------------------+
    |コマンド名         説明                     |
    +                  +                         +
    |sq <adr> <val>...  メモリ内容の設定 (quad)  |
    |sd <adr> <val>...  メモリ内容の設定 (double)|
    |sw <adr> <val>...  メモリ内容の設定 (word)  |
    |sh <adr> <val>...  メモリ内容の設定 (half)  |
    |sb <adr> <val>...  メモリ内容の設定 (byte)  |
    |sf <adr> <fval>... メモリ内容の設定 (float) |
    +------------------+-------------------------+
    
    sf コマンドの指定データ <fval> は浮動小数を含む表現式で、以下の表現式
    のみが指定可能です。
        <floating_point_number>
        (<fexpr>)
        +<fexpr>
        -<fexpr>
        *<fexpr>
        <fexpr1> + <fexpr2>
        <fexpr1> - <fexpr2>
        <fexpr1> * <fexpr2>
        <fexpr1> / <fexpr2>

  5.8 ix [<adr> [<cnt>]]

    指定アドレス <adr> のデバイスからデータを入力し、結果を表示します。次
    のように、データ幅の異なる5つのコマンドがあります。
    
    
    +------------------+---------------------------+
    |コマンド名         説明                       |
    +                  +                           +
    |iq [<adr> [<cnt>]] デバイスからの入力 (quad)  |
    |id [<adr> [<cnt>]] デバイスからの入力 (double)|
    |iw [<adr> [<cnt>]] デバイスからの入力 (word)  |
    |ih [<adr> [<cnt>]] デバイスからの入力 (half)  |
    |ib [<adr> [<cnt>]] デバイスからの入力 (byte)  |
    +------------------+---------------------------+
    
    <adr> のデフォルトアドレスは前回の指定アドレスです。
    <cnt> はデータ数で、アドレスとともに省略した場合には前回の指定数とな
    り、アドレスを指定した場合には 1 となります。
    dq/dd/dw/dh/db と異なり、ドットアドレスの更新は行いません。

  5.9 ox <adr> <val>...

    指定アドレス <adr> のデバイスへ指定データ <val>...を出力します。次の
    ように、データ幅の異なる5つのコマンドがあります。
    
    +-----------------+-------------------------+
    |コマンド名        説明                     |
    +                 +                         +
    |oq <adr> <val>... デバイスへの出力 (quad)  |
    |od <adr> <val>... デバイスへの出力 (double)|
    |ow <adr> <val>..  デバイスへの出力 (word)  |
    |oh <adr> <val>... デバイスへの出力 (half)  |
    |ob <adr> <val>... デバイスへの出力 (byte)  |
    +-----------------+-------------------------+
    
    sq/sd/sw/sh/sb と異なりドットアドレスの更新は行いません。

  5.10 bload <fname> <adr>

    ファイル <fname> のすべての内容をバイナリデータとして、開始アドレス 
    <adr> で指定された領域にロードします。

  5.11 bsave <fname> <adr> <cnt>

    ファイル <fname> に、アドレス <adr> からバイト数 <cnt> の領域の内容を
    バイナリデータとしてセーブします。

  5.12 di [-m <mark>] [<adr> [<cnt>]]

    指定アドレス <adr> から逆アセンブル表示を行ないます。
    <adr> のデフォルトはドットアドレス(現在のアドレス)です。
    <cnt> は一度に表示する命令数で、デフォルトは 20 命令です。
    -m <mark> が指定された場合はアドレス <mark> の行に "->" のマークを表
    示します。

  5.13 vdi [-<cpuid>] [-m <mark>] [<adr> [<cnt>]]

    指定アドレス <adr> から 8 バイトずつのデータを VU のマイクロ命令とし
    て逆アセンブル表示を行ないます。
    
    -<cpuid> オプションには以下のいずれかを指定できます。
    
    +------------+---------------------------------------------------+
    |オプション名 機能                                               |
    +            +                                                   +
    |-cpu         指定アドレス空間を CPU のメインメモリ空間とします。|
    |             [default]                                          |
    |-vu0         指定アドレス空間を uMEM0 空間とします。            |
    |-vu1         指定アドレス空間を uMEM1 空間とします。            |
    +------------+---------------------------------------------------+
    
    <adr> のデフォルトはドットアドレス(現在のアドレス)です。
    <cnt> は一度に表示する命令数で、デフォルトは 20 命令です。
    -m <mark> が指定された場合はアドレス <mark> の行に "->" のマークを表
    示します。

  5.14 as <adr> <inst>

    指定アドレス <adr> に命令 <inst> を書き込みます。
    たとえば以下のように指定します。
    
        dsedb > as 10000 lw $v0,10($s0)

  5.15 list [<adr> [<cnt> [<back>]]]

    指定アドレス <adr> に該当する前後のソース行を表示します。
    <adr> のデフォルト値は $PC です。
    指定行数 <cnt> は表示するソース行数でデフォルトは 21 行です。
    <back> は指定アドレスに該当するソース行と表示開始行との差分でデフォル
    トは10 行です。(10 行前から表示を開始します)
    list コマンド実行後に RET のみで継続を指定した場合には、最後に表示し
    た次のソース行から、最後に実行した表示行数分の表示を行います。
    ソース行表示の左端の "->" は $PC に該当するソース行であることを示しま
    す。
    ソース行表示を行うには実行ファイルを gcc -g で作成しておく必要があり
    ます。

  5.16 bt [<cnt>] 

    現在のプログラムカウンタからスタックフレームを遡り、スタックフレーム
    中のプログラムカウンタ値を表示します。
    スタックフレーム数 <cnt> が指定された場合にはその数だけ、指定がない場
    合にはすべてのスタックフレームを表示します。
    バックトレースを表示すると以下の疑似変数が設定され、以降のコマンドで
    参照が可能となります。
      
    +--------+---------------------------------------------------------+
    |類似変数 説明                                                     |
    +        +                                                         +
    |$BT<n>   バックトレースアドレス                                   |
    |         <n> が 1 以上の場合はそのスタックフレームから該当する    |
    |         関数呼び出し命令のアドレス。<n> が 0 の場合は $PC の値。 |
    |$SFA<n>  スタックフレームアドレス                                 |
    |         <n> 番目のスタックフレームの最小値。                     |
    |$SFS<n>  スタックフレームサイズ                                   |
    |         <n> 番目のスタックフレームの最大値から最小値を引いた値。 |
    +--------+---------------------------------------------------------+
    
    たとえば2番目のスタックフレーム位置に戻った場所にブレークポイントを設
    定するには、
    bp $BT2+0x8 のように指定します。
    
    <n> 番目のスタックフレームを dw でダンプする命令 dsf を subst コマン
    ドで定義し、実行するには以下のように指定します。
    
        dsedb > subst "^dsf  *\([0-9][0-9]*\) *$" dw $SFA\1 $SFS\1
        dsedb > dsf 2

  5.17 bp [<adr>[,<cnt>]]...

    指定アドレス <adr> にブレークポイントを設定します。
    引数を省略すると現在設定されているブレークポイントをすべて表示します。
    カウント値 <cnt> はブレークポイントの指定通過回数で、省略時には 1 と
    なります。
    ブレークポイントを設定するとそのアドレスに対応するブレークポイント疑
    似変数 $BP<n> にそのアドレスが設定され、以降の ub コマンド等で $BP<n>
     を用いた指定が可能となります。

  5.18 ub [all|<adr>]...

    指定アドレス <adr> のブレークポイントを解除します。
    引数を省略するか all を指定すると、すべてのブレークポイントを解除しま
    す。

  5.19 be [<adr>]...

    指定アドレス <adr> のブレークポイントを有効化します。
    <adr> を省略するとすべてのブレークポイントを有効化します。

  5.20 bd [<adr>]...

    指定アドレス <adr> のブレークポイントを無効化します。
    <adr> を省略するとすべてのブレークポイントを無効化します。

  5.21 hbp [pc][<uskx>][:<adr>[,<amsk>]]... hbp [da|dr|dw][<uskx>][:<adr>[,<amsk>]=<val>[,<vmsk>]]...　（dsedb用）

    指定アドレス <adr> に対してハードウェアブレークポイントを設定します。
    pc,da,dr,dw はハードウェアブレークポイントのアクセスタイプで以下の意
    味を持ちます。
    
    +----------------+--------------------+
    |アクセスタイプ名 説明                |
    +                +                    +
    |pc               プログラムカウンタ  |
    |da               データアクセス      |
    |dr               データリードアクセス|
    |dw               データライトアクセス|
    +----------------+--------------------+
    
    da,dr,dw は一度に一つのみ設定できます。
    <amsk> は指定アドレスに対するマスク値です。
    <uskx> は CPU の動作モード指定で以下のいずれかです。
    
      u：userのみ
      s：supervisorのみ
      k：kernelのみ
      x：EXL modeのみ
      uk：userまたはkernel
      --------
      uskx：すべての動作モード
    
    [pc|da|dr|dw] 部分の省略はできません。
    <adr> を省略するとそのタイプの前回のアドレス値となります。
    <uskx>を省略すると前回の動作モードとなります。
    
    da,dr,dw の場合には、さらに指定データ値 <val> およびそのマスク値 
    <vmsk>が指定可能です。
    
    引数をすべて省略すると、現在のハードウェアブレークポイントを表示しま
    す。
    
    指定例)アドレス0x08000000へのデータリードの場合
        dsedb > hbp druskx:0x08000000

  5.22 hbp [pc|da|dr|dw][ku]*[:<adr>[,<amsk>]]　（dsidb用）

    指定アドレス <adr> に対してハードウェアブレークポイントを設定します。
    pc,da,dr,dw はハードウェアブレークポイントのアクセスタイプで以下の意
    味を持ちます。
    
    +--------------+--------------------+
    |アクセスタイプ 説明                |
    +              +                    +
    |pc             プログラムカウンタ  |
    |da             データアクセス      |
    |dr             データリードアクセス|
    |dw             データライトアクセス|
    +--------------+--------------------+
    
    da,dr,dw は一度に一つのみ設定できます。
    <amsk> は指定アドレスに対するマスク値です。
    <uk> は CPU の動作モード指定で以下のいずれかです。
    
      u：userのみ
      k：kernelのみ
      uk：userまたはkernel
    
    [pc|da|dr|dw] 部分の省略はできません。
    <adr> を省略するとそのタイプの前回のアドレス値となります。
    <uk> を省略すると前回の動作モードとなります。
    
    引数をすべて省略すると、現在のハードウェアブレークポイントを表示しま
    す。
    
    指定例)
      dsedb > hbp druk:0x08000000

  5.23 hub [pc|da|dr|dw]...

    指定されたタイプ [pc|da|dr|dw] のハードウェアブレークポイントを解除し
    ます。
    引数をすべて省略すると、すべてのハードウェアブレークポイントを解除し
    ます。

  5.24 pload <fname> [<args>]...　（dsedb専用）

    指定実行ファイル <fname> をターゲットのメモリへロードし、開始アドレス
    などの情報をデバッガ内部に保存します。<args>... は実行時にターゲット
    プログラムへ引数として渡されます。

  5.25 mload <fname> [<args>]...　（dsidb専用）

    指定実行ファイル <fname> をターゲットのメモリへロードし、開始アドレス
    などの情報をデバッガ内部に保存します。<args>... は実行時にターゲット
    プログラムへ引数として渡されます。

  5.26 mlist [-m]　（dsidb専用）

    ターゲットのメモリにロードしたプログラムモジュールの一覧を表示します。
    通常は mload / mstart コマンドでロードしたモジュールのみ表示しますが、
    -mオプションを指定するとメモリ上に存在するすべてのプログラムモジュー
    ルの一覧を表示できます

  5.27 sload [<fname>]　（dsedb用）

    指定実行ファイル <fname> のシンボル情報をデバッガの内部のシンボル情報
    に追加します。pload と異なりターゲットのメモリへのロードは行ないませ
    ん。
      
    <fname> を省略するとデバッガ内部のシンボル情報をすべてクリアします。

  5.28 sload [-id <id>] [-b <base>] [<fname>]　（dsidb用）

    指定実行ファイル <fname> のシンボル情報をデバッガの内部のシンボル情報
    に追加します。
    <fname> を省略するとデバッガ内部のシンボル情報をすべてクリアします。
    -id <id> オプションと -b <base> オプションの可能な組合せおよび意味は
    以下のとおりです。
    

    sload <fname>

      モジュールファイル <fname> 中のモジュール名とバージョンでターゲット
      に問い合わせを行い、モジュールベースアドレスを決定します。

    sload -id <id> <fname>

      指定されたモジュール ID <id> によるモジュールベースアドレスを使用し
      ます。モジュールファイル <fname> 中のモジュール名とバージョンがター
      ゲットが持つ情報と一致しない場合にはエラーとなります。

    sload -b <base> <fname>

      ターゲットへの問い合わせを行わずに指定されたモジュールベースアドレ
      ス <base> を使用します。
      
      -id オプションと -b オプションを同時に指定することはできません。

  5.29 run [<fname> [<args>]...]　（dsedb専用）

    プログラムを実行します。すでに pload を行っている場合は引数なしで実行
    できます。pload を行っていない場合は、引数にファイル名を指定すること
    で実行を開始します。
    画面にはターゲットプログラムからの標準出力が表示されます。
    program の中断は Ctrl-C、中断しないで debugger に制御を戻すには 
    Ctrl-G を入力します。

  5.30 mstart [-d] [<fname> [<args>]...]　（dsidb専用）

    プログラムモジュールのエントリポイントを呼び出します。すでに mload を
    行っている場合は引数なしで呼び出せます。 mload を行っていない場合は、
    引数にファイル名を指定することでプログラムモジュールのロードとエント
    リポイントを呼び出します。
    -d オプションをつけるとデバックモードでエントリポイントを呼び出します。
    具体的には、ブレークポイントを設定し、エントリポイントを呼び出しプロ
    グラムモジュールから戻ってくるまで画面にはターゲットプログラムからの
    標準出力が表示されます。
    ターゲットプログラムの中断はCtrl-C、中断しないで debugger に制御を戻
    すにはCtrl-G を入力します。
    -d オプションをつけない場合はプログラムモジュール起動後、直ちにプロン
    プトを表示します。

  5.31 cont [<cnt>]

    ターゲットプログラムを現在の状態から継続実行し、ブレークポイントに達
    するか、何らかの exception が発生するまで待ちます。
    引数の <cnt> は継続回数の指定でデフォルトは 1 です。
    画面にはターゲットプログラムからの標準出力が表示されます。
    ターゲットプログラムの中断は Ctrl-C、中断しないでデバッガに制御を戻す
    には Ctrl-G を入力します。

  5.32 step [<cnt>]

    現在の $PC から指定回数 <cnt> (default は 1) のステップ実行を行ないま
    す。
    ステップ回数は CPU の命令数と一致しています。遅延分岐を含む場合もそれ
    らをCPU が実行するそのままの順序でステップ実行を行います。

  5.33 next [<cnt>]

    現在の $PC から指定回数 <cnt> (default は 1) のネクスト実行を行ないま
    す。
    ネクスト回数は CPU の命令数と一致しています。遅延分岐を含む場合もそれ
    らをCPU が実行するそのままの順序でネクスト実行を行います。
    ステップ実行との違いは jal、jalr 命令による関数呼び出しの中までトレー
    ス対象とするかどうかだけです。

  5.34 lstep [<cnt>]

    現在の $PC から指定行数 <cnt> (default は 1) のステップ実行を行います。
    
    コマンド実行時、または内部の 1 命令ステップ実行後の $PC が行番号を持
    たない場合にはその旨を表示し、コマンドを終了します。(デフォルト)
    
    オプション変数 lstep_stop_at_no_line を設定すると行番号情報を持たない
    場所でもエラーとならずに内部で行番号情報を持つ場所までステップ実行を
    行います。
    
    lstep を行うには実行ファイルを gcc -g で作成して下さい。

  5.35 lnext [<cnt>]

    現在の $PC から指定行数 <cnt> (default は 1) のネクスト実行を行います。
    
    コマンド実行時、または内部の 1 命令ネクスト実行後の $PC が行番号を持
    たない場合にはその旨を表示し、コマンドを終了します。(デフォルト)
    
    オプション変数 lstep_stop_at_no_line を設定すると行番号情報を持たない
    場所でもエラーとならずに内部で行番号情報を持つ場所までネクスト実行を
    行います。
    
    lnext を行うには実行ファイルを gcc -g で作成して下さい。

  5.36 until <adr>...

    現在の $PC から指定アドレス <adr>... まで、その順序で一時的ブレークポ
    イントを用いて継続実行を行ないます。この until コマンドは bp コマンド
    によるブレークポイントの影響は受けません。

  5.37 break

    プログラムの実行を中断します。

  5.38 wait

    プログラムが実行中の時に例外が発生するのを待ちます。

  5.39 reset [-i] [<ebootp> [<ibootp>]

    すべてのブレークポイントを無効化し、シンボル情報をクリアした後にター
    ゲット全体をリセットします。
    
    -i オプションを指定すると initial_[ei]bootp 変数値をcurrent_[ei]bootp
     変数に設定します。
    EE 用ブートパラメータ <ebootp> を指定するとその値をcurrent_ebootp に
    設定します。
    IOP 用ブートパラメータ <ibootp> を指定するとその値をcurrent_ibootp に
    設定します。
    ターゲットのブートパラメータは current_[ei]bootp 変数値を使用します。

  5.40 xgkt <fname> <cnt> [<off>]

    VU1 の D-bit interrupt を用いて XGKICK 命令が指す GIF パケットデータ
    を指定ファイル <fname> に指定オフセット <off> から指定回数 <cnt> 分記
    録します。<off> を省略した場合にはオフセットは 0 となります。
    現在のバージョンでこの機能を使用するには、XGKICK 命令の upper 命令に
    D-bit をあらかじめたてておく必要があります。

  5.41 dbgctl [vu0|vu1] [on|off]

    VU0,VU1 の D-bit 割り込みの設定を行います。
    [vu0|vu1] で VU0,VU1 を指定し、D-bit 割り込みを許可する場合には on を、
    禁止する場合には off を指定します。
    xgkt コマンド実行時には dbgctl vu1 on を自動的に実行します。
    現在のバージョンで D-bit によるマイクロプログラムを停止させたい場合は、
    停止させたい命令の upper 命令に D-bit をあらかじめたてておく必要があ
    ります。

  5.42 storeimage <fname> <bp> <bw> <psm> <x> <y> <w> <h>

    指定されたパラメータで GS イメージデータを読みだし、指定ファイル 
    <fname>に保存します。

    <bp>

      転送バッファベースアドレス (bp x 64 が実際のアドレスになります)

    <bw>

      転送バッファ幅 (bw x 64 が実際の幅になります)

    <psm>

      転送データのピクセルフォーマット
    
    +--------+-------------------------------+
    |入力番号 ピクセルフォーマット           |
    +        +                               +
    |0        PSMCT32  (ピクセルサイズ:32bit)|
    |1        PSMCT24  (ピクセルサイズ:24bit)|
    |2        PSMCT16  (ピクセルサイズ:16bit)|
    |10       PSMCT16S (ピクセルサイズ:16bit)|
    |19       PSMT8    (ピクセルサイズ:8bit) |
    |20       PSMT4    (ピクセルサイズ:4bit) |
    |27       PSMT8H   (ピクセルサイズ:8bit) |
    |36       PSMT4HL  (ピクセルサイズ:4bit) |
    |44       PSMT4HH  (ピクセルサイズ:4bit) |
    |48       PSMZ32   (ピクセルサイズ:32bit)|
    |49       PSMZ24   (ピクセルサイズ:24bit)|
    |50       PSMZ16   (ピクセルサイズ:16bit)|
    |58       PSMZ16S  (ピクセルサイズ:16bit)|
    +--------+-------------------------------+
    

    <x><y>

      転送領域の左上端点

    <w><h>

      転送領域の幅、高さ(ピクセル単位)
    
    イメージデータのサイズ(w×h×ピクセルサイズ)は、16byte の倍数で32767
    ×16byte 以下でなければなりません。また、ピクセルサイズが 8bit の場合
    は x,w はともに 2 の倍数、ピクセルサイズが 4bit の場合は x,w はともに
    4 の倍数でなければなりません。

  5.43 bpfunc <adr>

    ブレークポイントを通過する際に実行される関数 <adr> を設定します。
    <adr> に 0 が指定された場合には設定の解除となります。

  5.44 set [all] [<var>[=<val>]]

    デフォルト値から変更されたオプションのみを表示するには set だけを指定
    します。すべてのオプションを表示するには set all と指定します。
    オプションが文字列か数値を値として持つ場合に、オプション名 <var> の値
    を <val> に設定するには set <var>=<val> と指定します。
    オプションがブール値を持つ場合に、true の値に設定するにはset <var> を
    指定し、false の値を設定するには set no<var> と指定します。
    それぞれのオプションの意味に関しては 「4.2.4 dsedb のオプション」の項
    を参照してください。
    
    set コマンドにはユーザ変数の表示と設定機能もあります。
    ユーザ変数として使える変数名はオプション名に含まれずかつ dsedb のレジ
    スタ名でもない名前です。ユーザ変数は常に 32bit の数値を値として持ち、
    all を指定しない時でも常に表示されます。ユーザ変数値への参照は表現式
    中で $<var> の形式で可能です。ユーザ変数に対して set <var>= のように 
    <val> を省略すると、そのユーザ変数を削除します。

  5.45 alias [-r] [<name> [<value>]]

    指定された別名 <name> がコマンド名として指定された時にコマンド文字列 
    <value> を実行します。
    現在設定されているすべての別名を表示するには alias のみを指定します。
    現在設定されているすべての別名を削除するには alias -r と指定します。
    別名 <name> の設定のみを表示するには alias <name> と指定します。
    新しい別名 <name> を <value> に設定するには alias <name> <value> と設
    定します。 <value> 中にはこの alias のみで使用可能な ${*} と ${N} と
    いう表現が使え、${*} は実行時に指定された引数すべてに、${N} は実行時
    に指定された N 番目の引数に展開されます。
    
    <value> 中に複数のコマンドを指定するには alias dr2 (dr;dr) のように指
    定します。

  5.46 subst [-r] [<pattern> <replace>...]

    コマンド入力行を文字列として扱い、その文字列中に含まれるパターン 
    <pattern> をすべて置換文字列 <replace>... で置き換えます。
    現在設定されているすべての置換を表示するには subst のみを指定します。
    現在設定されているすべての置換を削除するには subst -r と指定します。
    現在設定されている <pattern> <replace>... の置換を削除するには subst 
    -r <pattern> <replace>... と指定します。
    alias とは異なり同じ <pattern> への置換が設定されていた場合にも前の設
    定を削除することは行いません。また <replace>... が省略された場合には
    空の文字列への置換 (つまり削除) の設定となります。
    複数の置換定義がある場合、指定された順序ですべてが適用されます。
          
    <pattern> は一般には '"' で囲まれた文字列形式で指定しますが、空白を含
    まない場合には前後の '"' は省略しても構いません。
    <pattern> は以下の正規表現で指定します。
    
    +------+----------------------------------------------+
    |文字列 説明                                          |
    +      +                                              +
    |X      文字 X （X が以下の表現に含まれない場合）     |
    |\X     文字 X （X が '(',')' でない場合）            |
    |.      任意の 1 文字                                 |
    |X*     X の繰り返し（0 回の繰り返しを含む）          |
    |[abc]  'a','b','c' のいずれかの 1 文字               |
    |[x-y]  'x' から 'y' までのいずれかの 1 文字          |
    |[^abc] 'a','b','c' のいずれでもない 1 文字           |
    |^      行の先頭（<pattern> の先頭にある場合のみ一致）|
    |$      行の最後（<pattern> の最後のある場合のみ一致）|
    |\(     タグの開始記録                                |
    |\)     タグの終了記録                                |
    +------+----------------------------------------------+
    
    <replace>... は通常の文字列の他、以下の特殊文字も指定できます。
    
    +------+--------------------------------+
    |文字列 説明                            |
    +      +                                +
    |\X     文字 X (X が '1'-'9' でない場合)|
    |&      現在一致している文字列全体      |
    |\1     1番目のタグ                     |
    |\2     2番目のタグ                     |
    |...                                    |
    |\9     9番目のタグ                     |
    +------+--------------------------------+
    
    以下は指定例です。
    
      ブレークポイント番号を $bp<n> で入力可能に設定する
        dsedb> subst "$bp\([0-9]*\)" $BP\1
      show history を単に history だけで実行可能と設定する
        dsedb> subst "^ *history *$" show history
    
    コマンド入力行の先頭が '\' である時には置換処理は行いません。
    間違って subst ".*" のような設定をしてしまった時には、たとえば \quit
    と入力すれば常に quit を実行できます。

  5.47 source <fname>

    指定ファイル <fname> の内容をコマンド列として実行します。
    ファイル中の行の最後が '\' である場合には次の行との連結が行われます。

  5.48 ![<cmd> [<args>]...]

    '!' 以降のコマンド <cmd> および引数 <args>... をシェルに渡し実行しま
    す。<cmd>、<args> は何も評価もせずにそのままシェルに渡します。使用さ
    れるシェルは環境変数 SHELL によって決まり、設定されていない場合には 
    "/bin/sh" になります。
    <cmd> を省略するとシェルそのものを呼び出します。

  5.49 cd [<directory>]

     カレントディレクトリを <directory> に変更します。引数が省略された場
    合は環境変数 HOME で示されるディレクトリへ変更します。

  5.50 printf "<fmt>" [<args>]...

     メッセージを画面に出力します。
    <fmt> には printf(3) と同じ書式が使えます。ただし floating 関係 (e,E,
    f,g) と %n は未サポートです。<args> は常に式として評価され、その値が
    使われます。

  5.51 record [[-a] <fname>]

     指定されたファイル <fname> に、以後の画面出力内容を保存します。
    <fname> を省略すると記録の終了となります。
    -a オプションを指定した場合はファイルには追加モードで書き込まれます。
    記録終了せずに次の record を指定すると、自動的に前のファイルをクロー
    ズします。

  5.52 repeat [-c <cnt>] [-i <sec>] [-while <expr>] <cmd>...

    指定されたコマンド <cmd>... を繰り返し実行します。
    
    繰り返し回数 <cnt> が -c オプションで指定されている場合にはその回数だ
    け、指定されていない場合にはエラーが発生するか Ctrl-C が入力されるま
    で無限に繰り返します。
    
    繰り返し実行の間に、一度パケットの送受信処理等を行ないます。
    -i オプションによる秒数 <sec> (デフォルト値は 1 [sec]) の時間内にパケ
    ットの送受信やキー入力等がない場合には次の繰り返しを開始します。もし、
    パケットの送受信またはキー入力があった時にはその時間を待たずに次の繰
    り返しを実行します。
      
    -while <expr> オプションが指定された場合には、<cmd>... の実行前にその
    都度 <expr> を評価し、その値が 0 である時には repeat コマンドを終了し
    ます。また -while オプションが指定され -i オプションが指定されていな
    い場合にはタイムアウト時間は 0 となります。
    
    複数のコマンドを繰り返し実行するには repeat (dr;dr) のように指定しま
    す。

  5.53 show log [[-]<option>]...

    DECI2 パケットの送受信ログを表示します。<option>は以下の指定が可能で
    す。
    
    +---------------+---------------------------------------------------+
    |オプション名    説明                                               |
    +               +                                                   +
    |l[ong]          時刻の差分、IP アドレス等も表示する                |
    |n[um]           DECI2 パケットをすべて 16 進で表示する             |
    |r[emove]        ログデータをすべて削除する                         |
    |a[ll]           すべて表示する (tail,head との対比)                |
    |t[ail] <N>      最後の <N> 個だけ表示する                          |
    |h[ead] <N>      最初の <N> 個だけ表示する                          |
    |i[d] <ID>       <ID> に関するものだけ表示対象とする                |
    |m[sg] <msg>     <msg> に関するものだけ表示対象とする               |
    |p[roto] <proto> プロトコル <proto> に関するものだけ表示対象とする  |
    |s[rc] <src>     送信元ノードが <src> に関するものだけ表示対象とする|
    |d[st] <dst>     送信先ノードが <dst> に関するものだけ表示対象とする|
    |v[erbose]       冗長モードによる表示                               |
    +---------------+---------------------------------------------------+
    
      long、num は表示形式、remove は削除、all、tail、head は個数指定、残
      りは表示条件で、複数指定は常に AND として解釈されます。

  5.54 show status [-m] [-d]

      内部ステータスの表示を行ないます。
         ・-m　　メモリステータスを表示する
         ・-d　　DECI2 を扱うすべての接続ステータスを表示する
      -m、-d がともに省略された場合は両方を表示します。

  5.55 show history

      過去の入力行の表示を行います。

  5.56 show dbconf

      ターゲットから返された設定情報を表示します。

  5.57 show symbol [<str>]

      シンボル情報を表示します。
      <str> が省略された場合にはすべての情報を表示します。<str> が指定さ
      れた場合は、名前に <str> が含まれる情報のみを表示します。

  5.58 show mdebug [<str>]

      mdebug 情報を表示します。
      <str> が省略された場合にはすべての情報を表示します。
      <str> が指定された場合には名前に <str> が含まれる情報のみを表示しま
      す。

  5.59 help [<keyword>]...

    <keyword> を省略した場合には dsedb のコマンドの一覧を表示します。
    <keyword> が指定された場合にはそのキーワードに関するヘルプのみを表示
    します。<keyword> には以下が指定できます。
    
    +------------+------------------------------------------------------+
    |キーワード名 説明                                                  |
    +            +                                                      +
    |<cmd>        コマンド名 <cmd> に関するヘルプを表示する             |
    |reg          指定可能なレジスタグループを表示する                  |
    |edit         行編集に使用可能なキーを表示する                      |
    |var          set コマンドで設定可能なオプション変数の一覧を表示する|
    |<var>        set コマンドで設定可能なオプション変数 <var> に関して |
    |             表示する                                              |
    |expr         使用可能な表現式に関して表示する                      |
    |keyword      help コマンドで指定できるすべてのキーワードを表示する |
    +------------+------------------------------------------------------+

  5.60 quit

      dsedb を終了します。
    

 6 オプション詳細
------------------


  6.1 target_name

    dsnetm のホスト名およびポートは以下の 3 つの方法のいずれかで設定でき
    ます。
    
         (1) 環境変数 "DSNETM" の値
         (2) 起動時の自動実行ファイル中の option 文
         (3) dsedb の起動オプションの -d <host>[:<port>]
    
    複数が指定されている場合には 1)->2)->3) の順序で設定を上書きします。
    このオプションのデフォルト値は "" (空の文字列)で、dsedb を実行した同
    じホストのデフォルトポート指定の意味を持ちます。
    起動時専用オプションであり、自動実行ファイル中のoption文でのみ実行で
    きます。

  6.2 tty_mask

    ターゲットの TTYP 入出力を dsedb で扱うかどうかの設定を行ないます。
    dsedb でターゲットの TTYP 入出力を扱いたくない場合には 0 を指定します。
    TTYP は E0TTYP から E9TTYP および EKTTYP の 11 個があり、この 
    tty_mask のビット 0 は E0TTYP に対応し、ビット 9 は E9TTYP に対応しま
    す。EKTTYP の指定はビット 15 で行います（各ビットが on の時は dsedb 
    で「扱う」、off の時は「扱わない」）。
    このオプションのデフォルト値は 0x183ff です。
    起動時専用オプションであり、自動実行ファイル中のoption文でのみ実行で
    きます。
    なお dsedb の TTYP 出力は dsecons とは異なり LF による行単位の表示の
    みをサポートします。

  6.3 atty_mask

    dsedbの場合はIOPのTTYP、dsidbの場合は、EEのTTYPの表示を行うかどうかの
    設定を行います。ビット値の定義は、tty_maskと同様です。
    このオプションのデフォルト値は、0x0です。
    起動時専用オプションであり、自動実行ファイル中のoption文でのみ実行で
    きます。

  6.4 file_priority

    ターゲットからの Remote File Access を dsedb で扱うかどうかの設定を行
    ないます。dsedb でターゲットからの Remote File Access を扱いたくない
    場合には -1 を指定します。
    このオプションのデフォルト値は 0xd0 です。
    起動時専用オプションであり、自動実行ファイル中のoption文でのみ実行で
    きます。

  6.5 reset_on_start

    dsedb が起動時にターゲットをリセットするかどうかを指定します。
    この指定はコマンドラインオプションの -r や -nr のどちらも指定されてい
    ない時に有効となります。このオプションのデフォルト値は true です。
    起動時専用オプションであり、自動実行ファイル中のoption文でのみ実行で
    きます。

  6.6 check_manager_version

    dsedb が起動時に dsnetm のバージョン情報をチェックするかどうかを指定
    します。true ならチェックし、異なるならエラー終了します。false ならバ
    ージョン情報はチェックしません。
    このオプションのデフォルト値は true です。
    コマンドラインで -ncmv が指定されている場合には false に上書きされま
    す。
    起動時専用オプションであり、自動実行ファイル中のoption文でのみ実行で
    きます。

  6.7 target_exec_ctl_config

    cont,step,next 等の実行コマンドの実行制御状態を示します。
    0 の時はホスト側での制御、それ以外はターゲット側での制御を意味します。

  6.8 target_exec_ctl_override

    target_exec_ctl_config の値への上書き指定で、0 以上の値の時上書きを行
    います。

  6.9 dr_default_format

    デフォルト値は option dr_default_format="" であり、これは内部で固定的
    に持っている表示形式を使用することを意味します。これと等価な明示的設
    定を行うには自動実行ファイルで次のように指定します。

    ~/.dsidbrcの場合

      option dr_default_format="\
      at=%at  v0-1=%v0,%v1  a0-3=%a0,%a1,%a2,%a3\n\
      t0-7=%t0,%t1,%t2,%t3, %t4,%t5,%t6,%t7\n\
      s0-7=%s0,%s1,%s2,%s3, %s4,%s5,%s6,%s7\n\
      t8=%t8 t9=%t9   k0=%k0 k1=%k1   gp=%gp sp=%sp\n\
      fp=%fp ra=%ra   lo=%lo hi=%lo   PC=%PC bada=%bada\n\
      $cr=0x%cr [%symcr]\n\
      $sr=0x%sr [%symsr]\n"

    ~/.dsedbrcの場合

      option dr_default_format="\
      at=%at  v0-1=%v0,%v1  a0-3=%a0,%a1,%a2,%a3\n\
      t0-7=%t0,%t1,%t2,%t3, %t4,%t5,%t6,%t7\n\
      s0-7=%s0,%s1,%s2,%s3, %s4,%s5,%s6,%s7\n\
      t8=%t8 t9=%t9   k0=%k0 k1=%k1   gp=%gp sp=%sp\n\
      fp=%fp ra=%ra   lo=%lo hi=%lo   sa=%sa PC=%PC\n\
      badvaddr=%badvaddr badpaddr=%badpaddr\n\
      $cause   = 0x%cause [%symcause]\n\
      $status  = 0x%status [%symstatus]\n"
    
    変換の対象となるものは以下に限られます。
      %%         '%' を意味する。
      %<reg>      レジスタ名 <reg> を printf("%08x",...) で表示
      <reg> には以下のいずれも指定「できません」
            ・レジスタグループ名
            ・$<n> の数値表現に対応するもの
            ・疑似レジスタ名
            ・'$' の前置
            ・'_' の前置、
            ・cr -> cause, sr -> status の別名 (dsedb)
            ・cause -> cr の別名 (dsidb)
    指定できない名前が指定された場合には %<reg> は変換せずに表示します。
    
    cause,status レジスタのシンボリックな表示は、上の例のようにdsidbでは
    %symcr, %symsr、dsedbでは %symstatus,%symcauseという指定が可能で、必
    ず前後に 1 つのスペースが表示されます。
    また %08x 以外の 128bit レジスタや 16bit 表示は未サポートであり、
    dsedb の dr -vu[01] の場合の設定オプションは存在しません。

  6.10 dr_default_di

    dr コマンドを引数なしで指定すると、現在の $PC の前後を逆アセンブル表
    示を行いますが、その表示方法はこのオプションの値で決まります。設定が
    ない場合のデフォルト値は "\\di -m $PC $_PC-8 7" です（先頭の '\' は 
    alias 展開をしない、という指定です）。

  6.11 ex_default_dr

    cont、step、next 等で実行を開始しブレークポイントや例外発生によって停
    止した場合に dr 表示を行ないますが、その表示方法はこのオプションの値
    で決まります。設定がない場合のデフォルト値は "\\dr" です。

  6.12 dr0_default_di

    dr -vu0 実行時の逆アセンブル表示方法の指定です。設定がない場合のデフ
    ォルト値は "\\vdi -vu0 -m $_vu0vi26 $_vu0vi26-3 7" です。

  6.13 ex0_default_dr

    VU0 例外発生時の dr 表示方法の指定です。
    設定がない場合のデフォルト値は "\\dr -vu0" です。

  6.14 dr1_default_di

    dr -vu0 実行時の逆アセンブル表示方法の指定です。設定がない場合のデフ
    ォルト値は "\\vdi -vu1 -m $_vu1vi26 $_vu1vi26-3 7" です。

  6.15 ex1_default_dr

    VU0 例外発生時の dr 表示方法の指定です。
    設定がない場合のデフォルト値は "\\dr -vu1" です。

  6.16 lstep_default_list

    lstep、lnext の正常終了時に実行するリスト表示方法を指定します。
    設定がない場合のデフォルト値は"\\list" です。

  6.17 lstep_stop_at_no_line

    lstep、lnext の開始時または実行中の $PC が行番号を持たない場所であっ
    た場合にコマンドを終了させるかどうかの指定です。
    
    +----+-------------------------------------------------+
    |指定 表示                                             |
    +    +                                                 +
    |0    行番号を持つ場所まで内部で step,next 動作を続ける|
    |1    その旨を表示し、コマンドを終了する(デフォルト)   |
    +----+-------------------------------------------------+

  6.18 source_directories

    di および list コマンドで参照されるソースファイルの探索ディレクトリを
    指定します。
    実行ファイルの .mdebug 中に含まれるソースファイル名の先頭が '/' (絶対
    パス) である場合や、source_directories 変数が "" である場合にはソース
    ファイル名そのままのみを参照します。
    それ以外の場合には、単独または複数(区切りは ':')のディレクトリ名をソ
    ースファイル名に前置して参照を試みます。なお空の区切りは空の前置を意
    味します。例えば ".:" は "." の次に "" の前置となります。
    指定ディレクトリ名が '@' で始まる場合には '@' 部分をオブジェクトファ
    イル名の絶対パスに変換されたディレクトリ名で置換します。
    このオプションのデフォルト値は "" です。
         ・オブジェクトのあるディレクトリのみの場合の指定例)
           set source_directories="@"
         ・カレントディレクトリ -> オブジェクト位置 -> ABC -> DEF の順の指
           定例) 
           set source_directories=".:@:ABC:DEF"

  6.19 initial_ebootp

    resetコマンドで参照されるEE用ブートパラメータの初期値です。デフォルト
    値は"-1"で、[現在の値を変更しない」という意味になります。

  6.20 current_ebootp

    resetコマンドで参照されるEE用ブートパラメータの現在値です。デフォルト
    値は"-1"で、[現在の値を変更しない」という意味になります。

  6.21 initial_ibootp

    resetコマンドで参照されるIOP用ブートパラメータの初期値です。デフォル
    ト値は"-1"で、[現在の値を変更しない」という意味になります。

  6.22 current_ibootp

    resetコマンドで参照されるIOP用ブートパラメータの現在値です。デフォル
    ト値は"-1"で、[現在の値を変更しない」という意味になります。

  6.23 automatic_prefix_breakpoint

    ub,be,bd コマンドの引数はアドレスですが、そのアドレス指定中の表現式中
    には $BP<n> の形式の疑似レジスタを指定できます。この 
    automatic_prefix_breakpoint 変数が true の場合、ub,be,bd コマンドの引
    数がすべて 10 進数での数値のみで構成されている場合に自動的に "$BP" を
    指定引数に前置します。デフォルト値は false です。

  6.24 describe_ub_all

    ub コマンドでは引数を省略した場合全てのブレークポイントを削除の指定に
    なりますが、describe_ub_all 変数が true の場合には全削除は禁止されま
    す。デフォルト値は false です。

  6.25 di_address

    diコマンドのアドレス（ラベル）部分の表示方式指定です。
      
    +----+--------------------------------------------------------------+
    |指定 表示                                                          |
    +    +                                                              +
    |0x0  16 進数とシンボルの両方を表示する                             |
    |0x1  16 進数のみで表示する                                         |
    |0x2  シンボルが存在するならシンボルのみ、それ以外は 16 進数        |
    |0x3  同じシンボルに関して一度だけ独立した行で表示する              |
    |0x4  0x0 の時に加えて行番号も表示する                              |
    |0x5  0x1 の時に加えて行番号も表示する                              |
    |0x6  0x2 の時に加えて行番号も表示する                              |
    |0x7  0x3 の時に加えて行番号も表示する                              |
    |0x8  0x4 の時に加えてソース行も表示する                            |
    |0x9  0x5 の時に加えてソース行も表示する                            |
    |0xa  0x6 の時に加えてソース行も表示する                            |
    |0xb  0x3 の時に加えてソース行も表示する                            |
    |     ソースファイルがアクセスできない場合には0x7と同じ(デフォルト) |
    +----+--------------------------------------------------------------+
    
    行番号やソース行を表示するには、あらかじめ gcc -g で実行ファイルを作
    成しておいてください。

  6.26 di_instruction_word

    di コマンドの命令ワード部分の表示方式指定です。
        0：命令ワードを 16 進数表示を行う(デフォルト)
        1：命令ワードの 16 進数表示を行わない

  6.27 di_branch_address

    di コマンドの分岐アドレス部分の表示方式指定です。
        0：16 進数とシンボルの両方を表示する(デフォルト)
        1：16 進数のみで表示する
        2：シンボルが存在するならシンボルのみ、それ以外は 16 進数で表示す
        る

  6.28 di_macro

    di/as コマンドで li,move 等のマクロ命令を扱うかどうかを指定します。
          0：マクロ命令は扱わない
        1：li,move,b,bal,dmove のマクロ命令を扱う(デフォルト)

  6.29 help_lang

    help コマンドで表示する言語を指定します。
      
    +------+-------------------------+
    |指定   表示                     |
    +      +                         +
    |"eng"  (デフォルト)             |
    |"euc"  日本語 (EUC コード)      |
    |"jis"  日本語 (JIS コード)      |
    |"sjis" 日本語 (シフトJIS コード)|
    +------+-------------------------+

  6.30 help_pager

    help コマンドで表示するページャを指定します。
    デフォルトは "" (空の文字列) でページャを使用しません。

  6.31 hex_radix

    dsedb の数値指定の解釈の方法を設定します。フォルト値は true で、数値
    は 0x なしで 16 進数と解釈されます。
    false の場合は C 言語と同じく 16 進数は 0x を前置しなければなりません。
    シンボルがなければ true の方が便利ですが、シンボルがあり例えばdb abc 
    のように指定された場合に、abc というシンボルもあるとdb 0xabc と入力し
    直す必要があり、あいまいさが残ります。false の場合には db abc は常に
    シンボルのみをサーチするため、このような「場合によっては入力しなおす」
    必要は生じません。

  6.32 log_total_size

    デフォルトでは合計バイト数が 128KB まで DECI2 パケットのログを保存し
    ます。送受信ログが不要の場合には 0 を設定してください。

  6.33 log_packet_size

    デフォルトではパケットの先頭から 128 バイトまでのデータをログに保存し
    ます。すべてのデータをログに保存したい場合には65535 以上の値を設定し
    てください。

  6.34 histfile

    デフォルトでは "~/.dsedb_history" で、この文字列が示すファイルへdsedb
     の終了時にヒストリをセーブし、起動時にそのファイルからヒストリをロー
    ドします。

  6.35 histfilesize

    histfile へセーブするヒストリ数です。デフォルト値は 256 です。

  6.36 histsize

    コマンド操作中に記憶するヒストリ数の上限数です。デフォルト値は 256 で
    す。

  6.37 tty_max_size

    dsedb が送信する TTY パケットの最大保留バイト数で、デフォルト値は64KB
     です。
