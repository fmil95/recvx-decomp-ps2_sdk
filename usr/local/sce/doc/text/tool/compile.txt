[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

IOPプログラムのコンパイル
==========================


 1 コンパイルの手順
--------------------


  1.1 リロケータブルプログラムのコンパイル

    リロケータブルプログラムとは、実行アドレスが可変のプログラム、つまり
    IOP kernel内のプログラムローダによってメモリの空き領域にリロケートし
    てロードされ実行されるプログラムです。
    リロケータブルプログラムを作成するためには、伝統的なコンパイル・リン
    ク手順の最後の段階でプログラムのアドレスを決定する代わりに、リンカの
    パーシャルリンク機能でオブジェクトを一つにまとめ、iopfixupユーティリ
    ティを用いてIOPリロケータブル実行形式へ変換するという手順を踏みます。
    

    リロケータブルプログラムのコンパイル手順の例

    リロケータブルプログラムをコンパイルする手順は、たとえば次のようにな
    ります。
        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ iop-ld -r -dc -o xxxx.o xxx1.o xxx2.o -lyyy
        $ iopfixup -o xxxx.irx xxxx.o
    
    上記をもっと簡単に済ますには次のようにします。
        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ iop-gcc -o xyz.irx xxx1.o xxx2.o -lyyy
    
    さらに簡単にすると、次の１コマンドで済ませることができます。
        $ iop-gcc -o xyz.irx xxx1.c xxx2.c -lyyy

  1.2 常駐ライブラリのコンパイル

    常駐ライブラリとは、プログラムコードの一部を他のモジュールからサブル
    ーチンとして呼び出せるように提供しているモジュールです。
    常駐ライブラリにはそのモジュールがどのようなサブルーチンを提供するか
    を示す構造体が必要です。また、常駐ライブラリが提供するサブルーチンを
    利用するモジュールには、どのモジュールのどのサブルーチンを利用するか
    を示す構造体が必要です。これらの構造体を生成しリンクするために、
    ioplibgenユーティリティとioplibldユーティリティが用意されています。
    常駐ライブラリおよび常駐ライブラリを利用するモジュールのコンパイル・
    リンクの手順は下図のようになります。
    

    常駐ライブラリモジュールのコンパイル手順例

        $ ioplibgen -d stubs.ilb -e entry.s entry.tbl
        $ iop-as -o entry.o entry.s 
        $ iop-gcc -c lll1.c
        $ iop-gcc -c lll2.c
        $ iop-ld -r -dc -o lmn.o lll1.o lll2.o entry.o
        $ iopfixup -o lnm.irx lnm.o

    常駐ライブラリを利用するモジュールのコンパイル手順例

    (a)スタティックライブラリをリンクしない場合
        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ ioplibld -s stub.s xxx1.o xxx2.o : stubs.ilb
        $ io-as -c stubs.o stubs.s
        $ iop-ld -r -dc -o xyz.o xxx1.o xxx2.o stubs.o
        $ iopfixup -o xyz.irx xyz.o
    もっと簡単に済ますには……
        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ iop-gcc -o xyz.irx xxx1.o xxx2.o -ilb=stubs.ilb
    (b)スタティックライブラリをリンクする場合
        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ ioplibld -s stub.s xxxall.o xxx1.o xxx2.o -lsss : stubs.ilb
        $ io-as -c stubs.o stubs.s
        $ iop-ld -r -dc -o xyz.o xxx1.o xxx2.o stubs.o -lsss
        $ iopfixup -o xyz.irx xyz.o
    もっと簡単に済ますには……
        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ iop-gcc -o xyz.irx xxx1.o xxx2.o -lsss -ilb=stubs.ilb
    
    なお、IOP kernelそのものも複数の常駐ライブラリモジュールから構成され
    ています。そのためすべてのアプリケーションプログラムは、かならず「常
    駐ライブラリを利用するモジュール」として生成することになります。

 2 iopfixupユーティリティ
--------------------------

    iopfixupは、elf形式のリロケータブルオブジェクトをIOPリロケータブル実
    行形式に変換するユーティリティです。
    

    形式

        iopfixup [options...] input_file
    
    options...には以下のものを指定できます。
    
    +---------------+--------------------------------------------+
    |option          機能                                        |
    +               +                                            +
    |-o outfile      変換結果の出力ファイル名                    |
    |-r outfile      変換結果の出力ファイル名（シンボル情報つき）|
    |-e entry_symbol エントリポイントの指定                      |
    +---------------+--------------------------------------------+
    
    input_fileには、elf形式のリロケータブルオブジェクトファイルまたはIOP
    リロケータブル実行形式ファイルを指定できます。
    

    動作

    iopfixupは入力ファイルを読み込んだのち、入力ファイルがelf形式のリロケ
    ータブルオブジェクトであったならば、以下の処理を行います。
    
         (1) IOPリロケータブル実行形式に固有のセクションの生成
         (2) セクションの再配置とセグメント範囲の決定
         (3) 予約シンボルの値の決定
         (4) 再配置情報をIOP用に変換
         (5) -eオプションが与えられていれば、エントリポイントの設定
    
    その後、-rオプションが与えられていれば指定された出力ファイルに出力し、
    -oオプションが与えられていればシンボル情報を削除してから指定された出
    力ファイルに出力します。
    セグメントとセクションの配置は以下のようになります。
    
    +----------+-----------------------------------------------------+
    |セグメント 含まれるセクションとその順番                         |
    +          +                                                     +
    |TEXT       .init, .text, .finit                                 |
    |DATA       .rodata, .rodata1, .data, .data1, sdata, .lit8, .lit4|
    |BSS        .sbss, .bss                                          |
    +----------+-----------------------------------------------------+
    予約シンボルの名前と値は以下のようになります。
    
    +-----------+------------------------------------+
    |シンボル名  値                                  |
    +           +                                    +
    |_ftext TEXT セグメントの先頭アドレス            |
    |_etext TEXT セグメントの最後のbyteの次のアドレス|
    |_fdata DATA セグメントの先頭アドレス            |
    |_edata DATA セグメントの最後のbyteの次のアドレス|
    |_fbss BSS   セグメントの先頭アドレス            |
    |_end BSS    セグメントの最後のbyteの次のアドレス|
    |_gp gp      レジスタの初期値                    |
    +-----------+------------------------------------+
    

 3 ioplibgenユーティリティ
---------------------------

    ioplibgenは、ライブラリエントリ定義ファイルを読み込んで、常駐ライブラ
    リ用のエントリテーブルのアセンブラソースおよびライブラリ使用者がリン
    ク時に使用するデータファイル（拡張子.ilb）を生成するユーティリティで
    す。
    

    形式

      ioplibgen [options...] input_file
    
    options...には以下のものを指定できます。
    
    +---------------------+----------------------------------+
    |option                機能                              |
    +                     +                                  +
    |-e entry_table_source エントリテーブルの出力ファイル名  |
    |-d stub_ilb_data      データファイルの出力ファイル名    |
    |-l openlevel          データファイルに出力するエントリの|
    |                      公開レベル指定                    |
    +---------------------+----------------------------------+
    
    input_fileには後述する書式のライブラリエントリ定義ファイルを指定しま
    す。

    動作

    -eオプションが与えられていると、以下説明するライブラリエントリ定義中
    で宣言されたライブラリ名に "_entry" を付加したラベルのついたエントリ
    テーブルが作成されます。
    エントリテーブルをリンクしたIOPプログラムモジュールは、このラベルを引
    数にしてIOP kernelのモジュールマネージャのRegisterLibraryEntries()関
    数を呼び出すことで、自身の持つ関数群を他のプログラムモジュールから利
    用可能にします。

  3.1 ライブラリエントリ定義ファイルの書式

    ライブラリエントリ定義ファイルには以下の4種類の記述が入ります。

   (1) コメント

      '#'で始まる行はコメント行になります。

   (2) ライブラリ名宣言

      ライブラリ名（8文字以内）を以下のように宣言します。
        Libname libname

   (3) ライブラリバージョン宣言

      ライブラリのメジャーバージョン（8bit）とマイナーバージョン（8bit）
      を、 '.' で区切って10進数で以下のように指定します
        Version MM.mm
      メジャーバージョンとマイナーバージョンは、1 以上 255 以下の数値を指
      定してください。0 はリザーブされています。

   (4) エントリ宣言

      以下の書式で、ライブラリのエントリ関数名を複数宣言できます。
        Entry/level entry_symbol [entry_internal_symbol]
        Entry entry_symbol [entry_internal_symbol]
        Entry -
      levelは、entry_symbolの公開レベルを1桁の数値で指定します。ioplibgen
      の-lオプションで公開レベルを指定すると、その数値より以下の公開レベ
      ルを持つentry_symbolのみがエントリテーブルファイルに出力されます。
      levelを省略すると公開レベルは0とみなされます。

  3.2 ライブラリエントリ定義ファイルの例

    ライブラリエントリ定義ファイルの例を次に示します。
      # まず最初にライブラリ名を宣言。この例では 'mylib' と宣言する。
      Libname mylib
      # versionの宣言。
      Version 1.1
      # ========= 常駐ライブラリの各エントリの宣言 =============
      # 慣習として最初の四つのエントリはシステム用にリザーブしておく
      # １番目は、初期化エントリ(通常モジュールのエントリポイントと同一)
      # ２番目は、もしあれば、再初期化エントリ
      # ３番目は、もしあれば、終了エントリ
      # ４番目は、予約
      Entry/2 mylibinit
      Entry -
      Entry -
      Entry -
      Entry AllocMemory
      Entry ReAllocMemory
      #	外部から呼ぶときの関数名と、実際の関数名は以下のように異っていて
      もよい
      #	外部名			   内部名
      Entry FreeMemory		mylib_free_memory
    

 4 ioplibldユーティリティ
--------------------------

    ioplibldは、elf形式のオブジェクトファイル内の未定義シンボルを探し出し、
    あらかじめioplibgen -dで作成してあるエントリデータファイルから未定義
    シンボルに対応するエントリを探し出してstubソースファイルを生成するユ
    ーティリティです。
    

    形式

      ioplibld [options...] object_file... : stub_ilb_data...
    
    options...には以下のものを指定できます。
    
    +--------------+---------------------------------------+
    |option         機能                                   |
    +              +                                       +
    |-s stub_source 出力するstubソースファイル名の指定     |
    |-llib          リンク時に使用予定のスタティック       |
    |               ライブラリ名の指定                     |
    |-Ldir          スタティックライブラリおよびilbファイル|
    |               のサーチパス指定                       |
    +--------------+---------------------------------------+
    
    object_file...には、リンクしてひとつのオブジェクトファイルになる予定
    のすべてのelf形式リロケータブルオブジェクトファイル名を指定します。
    stub_ilb_data...には、ioplibgenユーティリティで生成したエントリデータ
    ファイル名を指定します。

 5 ioplibdumpユーティリティ
----------------------------

    ioplibdumpは、IOPリロケータブル実行形式ファイルの中を調査し、どの常駐
    ライブラリのどのエントリを呼び出しているかを表示するユーティリティで
    す。
    

    形式

      ioplibdump object_file... [: stub_ilb_data...]
    
    object_file...には、IOPリロケータブル実行形式ファイル名を指定します。
    stub_ilb_data...には、ioplibgenユーティリティで生成したエントリデータ
    ファイル名を指定します。
    

 6 iop-gcc
-----------

    iop-gccは、GNU gccをもとに、IOPプログラムをコンパイルするために改造さ
    れたコンパイラです。以下に示すオプションが追加されているほか、リンク
    時にioplibld / iopfixupコマンドを適切な順番で呼び出すようになっていま
    す。これにより、常駐ライブラリを利用するIOPリロケータブル実行形式ファ
    イルを簡単にリンクできるようになります。
    
    +------------------+------------------------------------------+
    |オプション         機能                                      |
    +                  +                                          +
    |-ilb=stub_ilb_data ioplibgenユーティリティで生成したエントリ |
    |                   データファイルの指定                      |
    |-startfiles        crt0.oをリンクすることの指定              |
    |-noiopilb          IOP kernelのエントリデータファイルiop.ilb |
    |                   の読み込み抑止                            |
    |                   通常は、iop.ilbは自動的に読み込まれます。 |
    +------------------+------------------------------------------+
    
    また、gcc本来のオプションのうち以下のものが、IOPのプログラムをコンパ
    イルするうえで有用なことがあります。
    
    +-----------------------+--------------------------------------------+
    |オプション              機能                                        |
    +                       +                                            +
    |-e entry_symbol         エントリポイントの指定                      |
    |-t                      読み込むオブジェクトとライブラリのファイル名|
    |                        を表示する                                  |
    |-v                      コンパイル手順の詳細を表示する              |
    |-nostdlib               標準ライブラリのリンクを抑制する            |
    |-print-libgcc-file-name gccが参照するlibgcc.aのフルパスを表示する   |
    |-print-file-name=file   gccのサーチパスからfileを探してフルパスで   |
    |                        表示する                                    |
    |-mstats                 コンパイル中の各関数のスタックサイズなどを  |
    |                        表示する（MIPS固有のオプション）            |
    +-----------------------+--------------------------------------------+

  6.1 使用例

        $ iop-gcc -c xxx1.c
        $ iop-gcc -c xxx2.c
        $ iop-gcc -o xyz.irx xxx1.o xxx2.o -ilb=stubs1.ilb -ilb=stubs2.ilb
