[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

"PlayStation 2"システム概要
============================

    このドキュメントは、"PlayStation 2"の性能を十分に引き出すソフトウェア
    を効率よく開発していただけるよう、システムの特徴およびその背景となる
    コンセプトなどを概説し、ソフトウェアデザインのヒントを提供するもので
    す。
    
    *このドキュメントの内容は2000年5月現在で確定的な情報に基づいています。
    開発中で未確定の事項には触れていません。また、記載されている事項につ
    いても今後変更される可能性がありますので、あらかじめご了承ください。

 1 アーキテクチャ
------------------

    "PlayStation 2"システム全体のブロックダイヤグラムを次に示します。
        図 1 "PlayStation 2"のブロックダイヤグラム

      
      全体のメインプロセッサとなるのがEmotion Engine（EE）です。EEからポ
      リゴンデータを受け取って描画処理を行いビデオ信号として出力するのが
      Graphics Synthesizer（GS）です。IOPは外部入出力デバイスを制御するサ
      ブプロセッサで、固有のメモリを持ち、ある程度の処理を独立して行うこ
      とができます。SPU2はサウンド機能を受け持ちます。

  1.1 Emotion Engine（EE）

    Emotion Engine（EE）は、コンピュータエンタテインメントを特に意識して
    設計された、高速処理・高度の並列処理を特徴とするプロセッサです。EEの
    ブロックダイヤグラムを次に示します。
        図 2 EEのブロックダイヤグラム

    
    EE coreは2-wayのスーパースケーラパイプラインを持ち、2命令を同時に実行
    することができる、64bitマイクロプロセッサです。命令セットはMIPS III準
    拠で、一部のMIPS IV命令と128bitマルチメディア命令が拡張されています。
    16Kbyteの命令キャッシュと8Kbyteのデータキャッシュとを持ち、さらに、
    16Kbyteのスクラッチパッドメモリ（SPRAM）を持っています。スクラッチパ
    ッドメモリは通常のメモリと同様にアクセスできるほか、DMAによるデータ転
    送を行うことも可能です。
    

  1.2 Vector Processing Unit（VPU）

    VPUは32bit浮動小数点数の4並列演算を行うベクトル演算プロセッサで、3Dグ
    ラフィクスのジオメトリ演算に多用される4要素ベクトルや4×4行列を効率よ
    く扱うことができます。
    VPUは内部に独自のプログラムメモリおよびデータメモリを持ち、独自のイン
    ストラクションセット（マイクロ命令）によるプログラムを実行することが
    できます。マイクロ命令は64bit長で、4並列浮動小数点演算を行うUpper命令
    と、除算・ロード・ストア・整数演算・分岐などを行うLower命令の2命令を
    同時に実行することができます。
    EEにはこのようなVPUが2個搭載されています。VPU0はEE coreにコプロセッサ
    接続されています。一方のVPU1は独立して動作し、初等関数演算ユニット（
    EFU）を持つほか内部メモリも強化されていて、GIFを介してGSに接続されて
    います。
    EE core＋VPU0がゲームロジックの演算を行いVPU1がポリゴンデータへの変換
    処理を行うという直列的な分担、あるいは、EE core＋VPU0がキャラクターの
    動きなど複雑で非定型的な処理を行いVPU1はバックグラウンドの定型的な処
    理を行うという並列的な分担が考えられます。
    
        図 3 VPUのブロックダイヤグラム

      

  1.3 VIF

    VIFは、EEのメインバスとVPUとを結ぶインタフェースユニットです。転送さ
    れたデータを、VPUが利用しやすい形式に整えてVPUのデータメモリに書き込
    む展開機能を持っています。また、内部レジスタの値で補完することによっ
    て、定型的なデータはそのつど転送することなくメモリ上に生成することが
    できます。
    VPU1に接続されているVIF1は、ダブルバッファリングをサポートしています。
    データメモリ上に２つのバッファを用意し、先に転送したデータをVPU1が処
    理している間に、もうひとつのバッファに次のデータを転送することによっ
    て、スループットを高めることができます。
    

  1.4 Image Processing Unit（IPU）

    IPUはMPEG2ビットストリームのデコードを行う画像データプロセッサです。
    マクロブロック復号、RGB画像への変換、αプレーンの自動生成、オーダード
    ディザ、4bitインデクスカラーへの変換などの機能を持ちます。動き補償（
    MC）はIPUでは行わず、EE coreでマルチメディア命令を使用して行います。
    

  1.5 Graphics Synthesizer（GS）

    Graphics Synthesizer（GS）は3Dグラフィックの描画処理およびビデオ信号
    の出力を行うグラフィックプロセッサで、並列処理と広帯域メモリアクセス
    により圧倒的なパフォーマンスを示します。GSのブロックダイヤグラムを次
    に示します。
        図 4 GSのブロックダイヤグラム

    
    Setup/DDA部ではEEから渡されたポリゴンデータ（GSプリミティブ）をピクセ
    ルに展開します。続くPixel Process部では各ピクセルに対して、テクスチャ
    マッピング、フォギング、アルファブレンディングを最大16ピクセル並列処
    理します。
    これら一連の描画処理においては各ポリゴンの情報のほかにテクスチャや描
    画モードなど半固定的な情報（描画環境）を使用しますが、描画環境の一部
    についてはレジスタが2組用意され、オーバーヘッドなしに切り替えて使用す
    ることができます。これにより、たとえば前景オブジェクトと背景オブジェ
    クトのGSプリミティブが順不同でGSに引き渡されたときでも、描画速度の低
    下を招くことはありません。
    DRAMは4Mbyteを内蔵し、フレームバッファ / Zバッファ / テクスチャバッフ
    ァ / CLUTを任意に配置することができます。
    CRTCは2個の独立した矩形読み出し回路を持ち、フレームバッファの別々の領
    域を読み出し、画像フォーマットや出力解像度・画面上の位置もそれぞれ別
    個に設定したうえ、重ね合わせて出力することができます。たとえば、3Dグ
    ラフィクスによる動画映像と高解像度の文字によるメッセージなどを容易に
    合成表示することができます。

  1.6 GIF

    GIFはEEからGSへのインタフェースユニットです。後述する3つのデータパス
    間の調停を行うとともに、データパケットの先頭に付加されたタグ（GIFtag）
    にしたがってポリゴンデータやイメージデータなどをそれぞれ適切なGSのレ
    ジスタに書き込む機能を持ちます。
    EEからGSへのデータパスは、PATH1 / PATH2 / PATH3と３つが用意されていま
    す。優先順位はPATH1＞PATH2＞PATH3で、特徴と用途はそれぞれ次のとおりで
    す。
         ・PATH1：VPU1のデータメモリからGSへのデータ転送パス。
                    VPU1で生成したGSプリミティブデータの転送に使用する。
         ・PATH2：VIF1からGSへ、またGSからVIF1へのデータ転送パス。
         ・PATH3：EEのメインメモリあるいはスクラッチパッドメモリからGSへの
           データ転送
                    パス。他の描画処理を止めないために、大きなイメージデ
           ータを分割して断続
                    転送する機能を持つ。また、必要に応じて転送を禁止する
           ことができる。
    
        図 5 PATH1 / PATH2 / PATH3


  1.7 DMAC

    EE coreの演算能力をデータ転送処理に割かれないようにするため、DMACの機
    能が強化されています。
    大きな特徴は、タグ情報に従って行う能動的なDMA転送（Chain Mode）です。
    転送データのアドレスとサイズ、そして次に参照すべきタグのアドレスがタ
    グ情報として指示され、DMACがそれを解釈してデータ転送を行います。たと
    えば、共通のオブジェクトデータベースを使用して部分的に異なるグラフィ
    クスデータを生成することが、タグ情報だけを組替えることによって可能で
    す。
        図 6　タグによるDMA転送

    
    このほか、メモリを介して周辺機器から別の周辺機器への転送をスムーズに
    行うためのストール制御機能、特定のデータを優先的に転送する優先度制御
    機能、画像データの一部分を切り出すInterleaveモードなどが特徴的な機能
    です。
    

  1.8 IOP

    IOPは、CD/DVD-ROMドライブやサウンドデバイス（SPU2）、コントローラ、メ
    モリーカード、PCMCIA、USB、i.Linkなど、外部入出力デバイスを制御するプ
    ロセッサです。"PlayStation"のCPUと同等の処理能力を持ち、SSBUSを介して
    EEと協調しつつ、独立して処理を行うことができます。
    

  1.9 SPU2

    SPU2はふたつのコアから構成され、ローカルメモリと外部入出力を持つ分解
    能48kHzの音響合成プロセッサです。
    ふたつのコア（CORE0 / CORE1）はそれぞれPlayStationのSPUと同様に、24ボ
    イスのボイス処理、リバーブ処理、マスターボリューム処理を行ってステレ
    オ2系統（Dry / Wet）のサウンドを生成します。さらに、16bitサウンドデー
    タをホストプロセッサ（IOP）から転送し、直接出力したりボイス出力とミキ
    シングして出力することができます。また逆に、各コアで生成したサウンド
    データをホストプロセッサへ転送することもできます。
    CORE0の出力はCORE1に入力され、CORE1でミキシングされたサウンドが出力ブ
    ロックを経てアナログ／デジタルの2系統に出力されるように接続されていま
    す。
    
        図 7 SPU2ブロックダイヤグラム

    
    ホストプロセッサ（IOP）とのデータ転送はDMAまたはI/O転送によって行いま
    すが、処理の進行状況をホスト側で知るためのレジスタと割り込み機能があ
    り、データ転送を適切なタイミングで行うことができます。また、ストリー
    ミングの負荷を軽減するために、ハードウェアでダブルバッファリングをサ
    ポートするAuto DMA転送機能が備えられています。
    これらの割り込みやDMA転送は、サウンド生成処理と同様、ふたつのコアでそ
    れぞれ独立に行うことができます。
    

 2 データフロー
----------------


  2.1 3Dグラフィックスのデータフローパターン

    3Dグラフィックスデータの生成は、EE core＋VPU0とVPU1とで分担して行うこ
    とができますが、先にも述べたとおり、２とおりの分担方式があります。
    まずひとつは、EE core＋VPU0がゲームシステム管理やジオメトリ演算を行い、
    VPU1がその後処理としてポリゴンデータへの変換処理を行うという直列的な
    分担です。
    もうひとつは、EE core＋VPU0がキャラクターの動きなど複雑な非定型の処理
    を行い、VPU1は背景部分などの定型的な処理を行うという並列的な分担です。
    
        図 8 直列的な分担のデータフロー

        図 9 並列的な分担のデータフロー


  2.2 ムービーデータのデータフロー

    IPUが取り扱う動画データは、MPEG2 I-Picture相当のIPU動画と、標準MPEG2
    動画との2種類があります。後者は動き補償（MC）をEE coreで行う必要があ
    ります。
        図 10 IPU動画のデコード

        図 11 MPEG2動画のデコード

      

 3 OS（Kernel）
----------------

    EEおよびIOPのシステムソフトウェア（Kernel）は、細部で相違はありますが、
    いずれもマルチスレッドをサポートするオペレーティングシステムです。
    Kernelは、システムのブート、プログラムのロード、マルチスレッドのスケ
    ジュール管理、スレッド間通信、例外ハンドラ、メモリ管理、キャッシュ管
    理、デバイス管理、およびデバッガサポート機能を提供します。

  3.1 マルチスレッド管理

    スレッドとは、並行処理の観点から見た、プログラムの論理的な単位です。
    アプリケーションプログラムの処理内容を複数のスレッドに分け、それらを
    同時並行的に動作させることができます。同時並行といっても厳密に同時に
    実行されているスレッドはひとつだけで、Kernelの管理のスケジューリング
    に従い順次切り替えられて実行されるしくみになっています。
    Kernelのマルチスレッドスケジューリングは、スレッドの状態と、生成時に
    与えられた優先度によって行います。タイムシェアリングシステムではなく、
    優先度の高いスレッドから暗黙のうちに実行権が奪われることはありません。
    外部割り込みがあっても、割り込みハンドラ内で優先度が変更されたり優先
    度のより高いスレッドが実行可能状態に移されない限り、割り込みから復帰
    すればもとのスレッドが実行されます。
    スレッドは次に示すように６つの状態を取ります。
    
        図 12 スレッドの状態遷移

      
      生成されたスレッドはまずDORMANT状態になり、起動されることによって
      READY状態となって実行待ち行列（レディキュー）に入ります。レディキュ
      ーの並び順は優先度の高い順で、同一優先度のスレッドどうしは早くREADY
      状態になった順に並びます。
      レディキューの先頭にあるスレッドが実行されてRUN状態となります。RUN
      状態のスレッドは、セマフォなどの条件成立待ちによってWAIT状態に移り、
      待ち条件が成立するとREADY状態に戻ります。
      READY状態にあるスレッドが他から強制的に実行保留されている状態が
      SUSPEND状態です。また、WAIT状態にあるスレッドが強制的に実行保留され
      ている状態がWAIT-SUSPEND状態です。
      

  3.2 優先度

    EE Kernelはユーザプログラムの優先度を0（最高）として起動します。ユー
    ザプログラムの各スレッドは0〜127の優先度を持つことができます。
    IOP側では、ユーザプログラムが使用できる優先度の範囲は
    USER_HIGHEST_PRIORITY（=9） 〜 USER_LOWEST_PRIORITY（=123）に限られて
    います。また、SCEI提供のデバイスドライバが以下に示す優先度を使用して
    います。
    
    +------+---------------------+
    |優先度 デバイスドライバ     |
    +      +                     +
    |8      loader               |
    |10     reboot               |
    |16     sio2man              |
    |18     (reserved)           |
    |20     padman, mtapman(high)|
    |24     rspu2drv, sdrdrv     |
    |28     i.link(high)         |
    |30     usb(high)            |
    |34     i.link(low)          |
    |36     usb(low)             |
    |40     (reserved)           |
    |42     mcman,mcxman         |
    |46     padman, mtapman(low) |
    |48     (reserved)           |
    |81     cdvdfsv              |
    |88     loadmodule           |
    |96     fileio               |
    |104    mcserv,mcxserv       |
    +------+---------------------+
    

  3.3 スレッド間通信

    EE Kernelはスレッド間の通信・同期機能として、セマフォを提供します。
    IOP Kernelはさらにイベントフラグとメッセージボックスを提供します。
    セマフォは、あるデバイスやメモリ領域を同時に使用するスレッド数を制限
    するために使用します。あらかじめ最大数を指定してセマフォを作成してお
    き、デバイス等を使用したいスレッドはWaitSema()関数を実行してセマフォ
    資源（すなわちデバイス等の使用権）を取得してから使用します。もしセマ
    フォ資源に空きがなければセマフォ待ち行列に入り、他スレッドが
    SignalSema()関数を実行してセマフォ資源を返却すると、待ち行列の先頭か
    ら順次セマフォ資源が与えられてREADY状態に戻ります。
    イベントフラグはより多様な同期処理を行うことができます。あらかじめフ
    ラグの初期値を設定してイベントフラグを作成しておき、条件の成立を待つ
    スレッドはWaitEventFlag()関数を実行することにより、解除条件を指定して
    待ち行列に入ります。他のスレッドがSetEventFlag()によってフラグ値を変
    更すると、それによって解除条件が満たされたスレッドがREADY状態に戻りま
    す。
    メッセージボックスはスレッド間でのデータ交換をサポートするサービスで、
    セマフォとリングバッファの組み合わされたものと考えることもできます。
    まずCreateMbx()を用いてメッセージボックスを作成しておきます（複数可）。
    メッセージを待つスレッドはメッセージボックスの番号を指定して
    ReceiveMbx()を発行してWAIT状態に入ります。他のスレッドまたはスレッド
    独立部からSendMbx() / iSendMbx()でメッセージボックスの番号を指定して
    メッセージを送信すると、そのメッセージボックスで待っているスレッドが
    READY状態に移されます。
    

  3.4 Kernel API

    KernelのAPIはC言語の関数として定義されています。
    注意すべき点は、スレッド中から呼び出す場合と、たとえば割り込みハンド
    ラなどスレッドでない部分から呼び出す場合とで、APIが別々に用意されてい
    ることです。ほぼ同じ機能であっても内部処理が異なるため、たとえば
    TerminateThとiTerminateThというように、割り込みハンドラなどから呼び出
    すための関数は「i」を付けた名前になっています。
    

  3.5 メモリマップ

    EE Kernelのメモリマップを次に示します。
    ユーザメモリは、キャッシュ使用モードの異なる３つの仮想アドレスに重複
    してマップされています。プログラマはこの3つの仮想アドレスを使い分ける
    ことで、キャッシュの使用方法をきめこまかく制御することができます。
    
        図 13 EE Kernelメモリマップ

      

 4 ライブラリ
--------------

    "PlayStation 2"用のソフトウェア作成を支援する目的で、各ハードウェア機
    能ブロックを制御するライブラリと、ソフトウェア開発を支援するためのラ
    イブラリが提供されます。

  4.1 EEライブラリ

    EE上で動作するライブラリとして、SCEから提供されているものは次のとおり
    です。
    
    +----------+--------------------------------------------------+
    |ライブラリ 用途・機能                                        |
    +          +                                                  +
    |libkernl   カーネル制御                                      |
    |libscf     コンフィグレーション情報の取得                    |
    |libcdvd    CD(DVD)-ROM制御                                   |
    |libdev     デバッグ支援（VU0/1,VIF0/1,GIF）                  |
    |libdma     DMA制御                                           |
    |libgraph   GS制御                                            |
    |libipu     IPU制御                                           |
    |liblout    CSL：ラインアウト                                 |
    |libmc      メモリーカード制御                                |
    |libmcx     PDA制御                                           |
    |libmpeg    MPEG2 / MPEG1画像のデコード                       |
    |libmsin    CSL：MIDIストリーム生成                           |
    |libpad     コントローラ制御                                  |
    |libmtap    マルチタップ制御                                  |
    |libpc      パフォーマンス測定                                |
    |libpkt     DMAパケット作成の支援                             |
    |libsdr     SPU2のリモート制御（IOP側libsdのリモート呼び出し）|
    |libssyn    CSL：ソフトウェア・シンセサイザ                   |
    |libvu0     VU0制御                                           |
    +----------+--------------------------------------------------+
    
    ライブラリ関数は、それぞれが収められているアーカイブをまたぐ相互参照
    をしないように実装されています。したがって各ライブラリ関数はアーカイ
    ブ単位で単独に使用することができます。

  4.2 IOPライブラリ

    IOP上で動作するライブラリとして、SCEから提供されているものは次のとお
    りです。
    
    +------------+-------------------------------+
    |ライブラリ   用途・機能                     |
    +            +                               +
    |iopkernl     カーネル制御                   |
    |cdvd         CD(DVD)-ROM制御                |
    |libsd        低レベルサウンドライブラリ     |
    |moddelay     CSL：MIDIレイテンシ調整        |
    |modhsyn      CSL：ハードウェア・シンセサイザ|
    |modmidi      CSL：MIDIシーケンサ            |
    |modmono      CSL：MIDIモノラル              |
    |modmsin      CSL：MIDIストリーム生成        |
    |modssyn      CSL：ソフトウェア・シンセサイザ|
    |usbd         USBドライバライブラリ          |
    |ilink,ilsock i.LINKドライバライブラリ       |
    +------------+-------------------------------+
    

  4.3 IOPモジュール

    IOP上で動作するモジュールとしてSCEから提供されているものは次のとおり
    です。
    
    +-----------------------+-------------------------------------+
    |モジュール              用途・機能                           |
    +                       +                                     +
    |iopリプレースモジュール iopリブート・デフォルトモジュール    |
    |                        (cdvdman.irx,cdvdfsv.irx,sifcmd.irx, |
    |                        fileio.irx, loadfile.irx)            |
    |libsd.irx, sdrdrv.irx   低レベルサウンド制御モジュール       |
    |mcman.irx, mcserv.irx   メモリーカード制御モジュール         |
    |mcxman.irx,mcxserv.irx  PDA制御モジュール                    |
    |moddelay.irx            CSL：MIDIレイテンシ調整              |
    |modhsyn.irx             CSL：ハードウェア・シンセサイザ      |
    |modmidi.irx             CSL：MIDIシーケンサ                  |
    |modmono.irx             CSL：MIDIモノラル                    |
    |modmsin.irx             CSL：MIDIストリーム生成              |
    |modssyn.irx             CSL：ソフトウェア・シンセサイザ      |
    |mtapman.irx             マルチタップ制御モジュール           |
    |padman.irx              コントローラ制御モジュール           |
    |sio2man.irx             シリアル通信基本モジュール           |
    |usbd.irx                USBドライバモジュール                |
    |ilink.irx,ilsock.irx    i.LINKドライバモジュール             |
    +-----------------------+-------------------------------------+
    

  4.4 コンポーネントサウンドライブラリ（CSL）

    CSLはサウンド生成処理をコンポーネント化するための標準化アーキテクチャ
    です。CSLモジュールを適宜組み合わせ、必要に応じて独自のCSLモジュール
    を作成することによって、高度なサウンド処理を容易に実装することができ
    ます。
    CSLの規定は主として、ストリームデータを受け渡すバッファ構造に関するも
    のです。モジュール内の処理はもちろん、APIについても柔軟性とパフォーマ
    ンスを確保するために推奨規定だけを設けてあります。
    
        図 14 CSLモジュールコンテキストの構造

    CSLモジュールは、IOP上で動作するものとEE上で動作するものがありますが、
    入出力データ形式の組み合わせによってカテゴリ分けされます。
    SCEから提供するCSLモジュールは次のとおりです。
    
    +------------------+-------------------+----------------------------+
    |モジュール         カテゴリ            機能                        |
    +                  +                   +                            +
    |ハードウェア・     IOP；MIDI→Original SPU2のボイスを使用する音源  |
    |シンセサイザ                                                       |
    |（modhsyn）                                                        |
    |ソフトウェア・     IOP；MIDI→PCM      多機能WaveTable音源IOP側    |
    |シンセサイザ                           モジュール                  |
    |（modssyn）                                                        |
    |MIDIシーケンサ     IOP；Original→MIDI SQファイルからMIDIストリーム|
    |（modmidi）                            への変換                    |
    |効果音シーケンサ   IOP；Original→MIDI 効果音専用シーケンサ※      |
    |MIDIメッセージ生成 IOP；Original→MIDI MIDIストリーム生成          |
    |（modmsin）                                                        |
    |MIDIモノフォニック IOP；MIDI→MIDI     モノフォニック化            |
    |（modmono）                                                        |
    |MIDIディレイ       IOP；MIDI→MIDI     レイテンシの調節            |
    |（moddelay）                                                       |
    |MIDIメッセージ生成 EE；Original→MIDI  MIDIストリーム生成          |
    |（libmsin）                                                        |
    |ソフトウェア・     EE；MIDI→PCM       多機能WaveTable音源EE側     |
    |シンセサイザ                           モジュール                  |
    |（libssyn）                                                        |
    |ラインアウト       EE；PCM→Original   SPU2を使用するPCMストリーム |
    |（liblout）                            再生                        |
    +------------------+-------------------+----------------------------+
    ※は未実装
    

 5 ミドルウェア
----------------

    "PlayStation 2"のソフトウェア開発をサポートするために、ライブラリより
    もレベルの高い「ミドルウェア」が提供されます。
    ミドルウェアは、"PlayStation 2"の高性能をよりクオリティの高い表現につ
    なげるソフトウェアという位置付けです。3Dグラフィックス・アニメーショ
    ン・サウンドなどコンピュータエンタテインメントを構成する表現手法のク
    オリティを高めるためには、それぞれ高度に専門的な技術とノウハウの蓄積
    が必要です。優れた技術を持つサードパーティがそれぞれ得意な分野でミド
    ルウェアを提供することにより、次世代のコンピュータエンタテインメント
    にふさわしい高いクオリティの表現可能性が広がることになります。
    

  5.1 中間ファイルフォーマット

    "PlayStation 2"用に提供される多数のミドルウェアの要として、中間ファイ
    ルフォーマット（eS）が規定されます。
    新しい中間ファイルフォーマットは、従来HMDフォーマットでサポートされて
    いた領域はもちろん、ジオメトリ・テクスチャ・アニメーション・景観を一
    元的に取り扱うことができ、さらに各アプリケーション / ミドルウェアに独
    自の情報を取り扱うために容易に拡張することができます。ミドルウェアは、
    データのそれぞれ一部分をランタイムデータとして取り出して処理します。
    
        図 15 中間ファイルフォーマットとミドルウェア

      

 6 周辺機器
------------


  6.1 CD(DVD)-ROM

    "PlayStation 2"に搭載されているCD(DVD)-ROMドライブは最大24倍速（
    CD-ROM） / 4倍速（DVD-ROM）、回転速度一定のCAV方式で、データ転送レー
    トは一定ではありません。読み出しエラー発生時に回転速度を落としてリト
    ライするかどうかを制御することができます。
    CD-DAの再生はソフトウェア・ストリーミングによって可能です。ただし
    44.1KHz→48KHzのピッチ変換が必要になるため、高い負荷がかかります。
    CD-XAはサポートしていません。
    CD(DVD)-ROMへのアクセスをサポートするライブラリとして、libcdvdが提供
    されます。
    ファイルシステムはISO-9660 level1に準拠し、DVDのUDFはサポートしていま
    せん。ファイルやディレクトリの名前や個数に関して、下記の制限がありま
    す。
    
    +----------------------+----------------------------------------+
    |項目                   制限                                    |
    +                      +                                        +
    |ディレクトリ数         40ディレクトリ／システム                |
    |ディレクトリ階層の深さ 最大８階層                              |
    |ファイル数             30ファイル／ディレクトリ                |
    |使用できる文字         0〜9、A〜Z、_                           |
    |ファイル名の形式       （ファイル名8文字）．（拡張子3文字）；１|
    |                       ※ロングファイル名不可                  |
    |ディレクトリ名の形式   （ディレクトリ名8文字）                 |
    |                       ※拡張子不可                            |
    +----------------------+----------------------------------------+
    
    ファイルのアクセスは、まずファイル名からセクタ番号を取得し、そのセク
    タ番号を指定してデータを読み出します。データ読み出し処理はノンブロッ
    キングで、他の処理を並行して行うことができます。なお、別途提供される
    CD(DVD)-ROM Generatorを使用すると、ファイルとセクタ番号のマッピングテ
    ーブルを作成することができ、実行時にファイル名からセクタ番号を取得す
    る処理を省くことができます。
    

  6.2 メモリーカード

    "PlayStation 2"は容量を増大したメモリーカード8MBをサポートします。従
    来のメモリーカード（128kB）は、ブラウザでPS用データファイルをコピーす
    る場合にのみ利用できます。
    メモリーカード8MBの主な仕様を次に示します。
    +------------------+-----------------------+-----------------------+
    |項目               仕様                    （参考）メモリーカード |
    |                                           (128kB) の仕様         |
    +                  +                       +                       +
    |容量（ブロック数） 64Mbit（1000）          1Mbit（15）            |
    |管理単位           クラスタ（＝1024bytes） スロット（＝8192bytes）|
    |アクセス単位       ページ（＝512bytes）    セクタ（＝128bytes）   |
    |消去単位           ブロック（＝8192bytes）                        |
    |書き込み所要時間   60ms／ブロック          2200ms／ブロック       |
    |読み出し所要時間   25ms／ブロック          2200ms／ブロック       |
    +------------------+-----------------------+-----------------------+
    
    大容量化に伴って、ファイルシステムについても階層ディレクトリのサポー
    トのほか、アイコンや、ファイル情報の内容などが変更されています。
    メモリーカードへのアクセスを支援するライブラリとして、libmcが提供され
    ています。libmcは、メモリーカードのフォーマット、カード情報の取得、フ
    ァイル一覧の取得、階層ディレクトリの操作、ファイルのリード / ライト、
    ファイル属性の変更などをサポートします。libmcの処理はノンブロッキング
    で、処理終了をポーリングしつつ他の処理を並行して行えるようになってい
    ます。
    

  6.3 コントローラ

    "PlayStation 2"はアナログコントローラ（DUALSHOCK2）のほか、既存の
    PlayStation用コントローラをサポートします。
    コントローラへのアクセスを支援するライブラリとして、libpadが提供され
    ています。libpadはコントローラの接続状態やアクチュエータ情報の取得、
    ボタンデータの読み取り、アクチュエータの制御をサポートします。
    libpadはEE側プログラムとIOP側プログラムとで構成されています。コントロ
    ーラとの通信処理はIOP側プログラムがVSyncに同期して1フレームに１回ずつ
    行い、読み取ったデータはDMAによってEE側メモリに転送し、EE側プログラム
    はメモリからデータを読み出すしくみになっています。つまり、EE側で動作
    するアプリケーションは任意のタイミングでlibpadの関数を呼び出してコン
    トローラのデータを読むことができますが、そのデータは最大で1Vsync前の
    状態を表していることになります。
    
        図 16 コントローラのデータ読み出しタイミング

      

  6.4 マルチタップ

    "PlayStation 2"専用マルチタップを使用することにより、最大8台のコント
    ローラとメモリカードを"PlayStation 2"に接続することができます。
    マルチタップを使用する際には、libmtapを介してlibpad / libmcのサービス
    を利用します。あらかじめlibmtapのモジュールをIOP側にロードし、マルチ
    タップが接続されたポートをオープンしておくことにより、libpad / libmc
    の各関数でマルチタップに接続されたコントローラやメモリカードにアクセ
    スできるようになります。
