[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

CSL（Component Sound Libraries）
概要
======================================


 1 CSLの概要
-------------

    "PlayStation 2"用サウンドライブラリは、ソフトウエア支援によるサウンド
    レンダリングに柔軟に対応するために、コンポーネントアーキテクチャを採
    用しています。すなわち、データの受け渡し方式を規定することによってサ
    ウンド生成の各工程・各機能をモジュールに分割して実装し、ある機能を実
    装形態の異なるモジュールに置き換えたり、モジュールを追加してエフェク
    トを加えたりといったことが柔軟に行えるシステムとなっています。
    
    
    CSLとは、このようなコンポーネント化インタフェースに基づくサウンド開発
    環境の総称です。CSLは高い柔軟性を持つ一方で、リアルタイムサウンドレン
    ダリングに特化したシンプルな構造のため、コンポーネント化によるオーバ
    ーヘッドはほとんどありません。
    CSLが規定するインタフェースを持つライブラリを、CSLモジュールと呼びま
    す。CSLモジュールは、IOP上とEE上のどちらにでも実装することができます。
    IOP上ではダイナミックリンクライブラリ（.irx）として動作することを前提
    としていますが、スタティックリンク（.a）も可能です。EE上では常にスタ
    ティックリンクとなります。
    

 2 CSL標準
-----------

    CSLモジュールに関する規定事項を以下説明します。
    CSLの標準化コンセプトは、モジュール間のストリームデータの互換性を重視
    し、そのほかの点については柔軟性やパフォーマンスを損なわないようなる
    べく緩やかに規定する、というものです。
    ユーザプログラム側の便宜のため、APIや内部データ構造についても、CSLと
    しての統一感を持たせるための推奨仕様を規定していますが、必須ではあり
    ませんし、細部はCSLモジュールの作成者に任せられています。
    CSLモジュールとして満たすべき必須条件は、以下の3点です。
         ・ひとつのインスタンスにつきひとつのmodule context構造体を持つこ
           と。
         ・Buffer Group構造に従うこと。
         ・サウンドストリームデータは、カテゴリ定義データ構造に従うこと。

  2.1 入出力によるカテゴリ分け

    CSLモジュールは、入力データ形式と出力データ形式の組み合わせによってカ
    テゴリ区分されます。データ形式としては次のものがあります。
    
    +------------+------------------------------------------------------+
    |データ形式   説明                                                  |
    +            +                                                      +
    |midi-stream  MIDIデータそのもの。デルタタイムは無し。              |
    |pcm-stream   SPU仕様の16bit PCMデータ。512byte毎にL/Rインタリーブ。|
    |raw-stream   1サンプルインタリーブまたはモノラルの16bitPCMデータ。 |
    |adpcm-stream vag形式のADPCMデータ                                  |
    |original     モジュール固有のデータ                                |
    |any          内容を問わないデータ                                  |
    +------------+------------------------------------------------------+
    
    たとえば、midi-streamを入力してpcm-streamを出力するモジュールは、
    "midi-pcmカテゴリ"ということになります。

  2.2 共通データ構造

    CSLで規定されているデータ構造には、全体に共通のものと、カテゴリごとに
    定義されたものがあります。まず共通のデータ構造について記述します。

   (1) CSL context構造体（sceCslCtx）

    CSL context構造体は、主として入出力用データバッファの構造を記述する構
    造体です。CSLモジュールは、ひとつのインスタンスについてひとつのCSL 
    context構造体を持つように規定されています。

    構造

      typedef struct {
      int		buffGrpNum;
      sceCslBuffGrp	*buffGrp;
      void*		config; 
      void*		callBack;
      char		*extmod[];
      } sceCslCtx;

    メンバ

      buffGrpNum	必須）buffGrpの個数
      buffGrp		必須）buffGrp配列へのポインタ
      config		任意）モジュール全体に関わる設定の構造体
      callBack		任意）非同期実行の場合のコールバック関数
      extmod		任意）外部モジュールに直接アクセスする場合、そのモジュール
      の名前

   (2) CSL buffer group構造体（sceCslBuffGrp）

    CSL buffer group構造体は、入出力用のデータバッファをまとめて、グルー
    プとして管理するための構造体です。CSLモジュールはこの形式に即したデー
    タバッファを持つように規定されています。

    構造

      typedef struct {
      int		buffNum;
      sceCslBuffCtx	*buffCtx[n];
      } sceCslBuffGrp;

    メンバ

      buffNum		必須）そのgroupに属するバッファの数
      buffCtx		必須）バッファ配列へのポインタ

   (3) CSL buffer context構造体（sceCslBuffCtx）

    CSL buffer context構造体は、個々の入出力用データバッファを１対１で対
    応する構造体です。

    構造

      typedef struct {
      int   	sema;
      void  	*buff;
      } sceCslBuffCtx;

    メンバ

      sema		任意）そのバッファに有効なセマフォ
      buff		必須）バッファへのポインタ

  2.3 Buffer Group構造

    モジュールが使用するデータバッファの構造は、CSL context構造体 / CSL 
    buffer group構造体 / CSL buffer context構造体で記述されます。図に示す
    ように、複数のグループがそれぞれ複数のバッファを持つ構成になっていま
    す。
    
    入力バッファや出力バッファと同じ位置に、データの属性を記述する構造体
    を持つことができます。これを環境構造体（env）と呼び、データ本体と環境
    環境構造体をセットにしてポートと呼びます。

    必須仕様）Buffer Groupの並べ方

      モジュールが入力バッファグループを持つ場合、Groupの0番を入力バッフ
      ァグループに割り当ててください。さらに出力バッファグループを持つ場
      合は、Groupの１番を出力バッファグループに割り当てます。
      入力バッファを持たない場合は、Groupの0番を出力バッファグループに割
      り当てます。

    必須仕様）Bufferの並べ方

      入力バッファ配列 / 出力バッファ配列には、ポートを単位としてCSL 
      buffer context構造体を配置します。たとえばA / Bふたつの環境構造体付
      き入力データがある場合、bufferの0番がポートAのデータ本体、bufferの1
      番がポートAの環境構造体、bufferの2番がポートBのデータ本体、bufferの
      3番がポートBの環境構造体、という順序で配置してください。
      データ本体のみで環境構造体を使用しないモジュールでは、単純にデータ
      バッファを順番に並べてください。

    推奨仕様）制御情報の持ち方

      モジュールの動作に必要な制御情報は、できるだけBuffer Group構造に関
      連付けられたデータとして持つことを推奨します。グローバル変数等とし
      てモジュール内部に保持することは最低限にするべきです。
      各入出力ポートに関連する制御情報は、それぞれポートに属する環境構造
      体にまとめることを推奨します。ポート個別ではなくモジュール全体に関
      する制御情報は、CSL context構造体のconfigメンバに関連付けられる構造
      体に記述することを推奨します。いずれも形式は任意です。

    推奨仕様）メモリの確保

      入出力バッファや制御情報、Buffer Group構造に使用するメモリは、ユー
      ザアプリケーションが確保してモジュールに与える仕様を推奨します。メ
      モリの管理はユーザに委ねるほうが安全ですので、モジュール内で動的に
      アロケーションすることは避けるべきでしょう。

  2.4 カテゴリ定義データ構造

    カテゴリ（入出力形式）ごとに定義されているデータ構造を説明します。
    originalに対するデータ構造は任意に定義してかまいません。

   (1) midi-stream buffer構造体（sceCslMidiStream）


    構造

      typedef struct {
      	u_int	buffsize;		// include Header size
      	u_int	validsize;	// valid data size
      	u_char	data[0];		// data max is data[buffsize]
      } sceCslMidiStream;

    メンバ

      buffsize		必須）バッファ全体のサイズ
      validsize		必須）有効なデータのサイズ
      data		必須）midiデータ
    buffsizeおよびvalidsizeがヘッダとなり、その後にMIDIデータの実体が続く、
    不定長の構造です。validsizeは、モジュールが処理済のデータ位置を逐次記
    録するメンバです。
    dataに入るのはMIDIメッセージそのものですが、デルタタイムはありません。
    ランニングステータスにも対応していません。なお、CSL独自の拡張MIDIメッ
    セージが定義されています（詳細後述）。拡張MIDIメッセージへの対応は必
    須ではなく、推奨仕様です。

   (2) pcm-stream buffer 構造体（sceCslPcmStream）


    構造

      typedef struct {
      	u_int	pcmbuf_size;
      	u_int	validsize;
      	void	*pcmbuf;
      	u_int	pad;
      } sceCslPcmStream;

    メンバ

      buffsize		必須）pcmbufのサイズ
      validsize		必須）pcmbufのうち有効なデータのサイズ
      pcmbuf		必須）pcmbufへのポインタ
      pad		未使用
    midi-streamと異なり、データの実体はpcmbufが指し示す領域にあります。
    validsizeは、モジュールが処理済のデータ位置を逐次記録するメンバです。
    データの中身は、16bit,signed,little endianのPCMデータで、512byteごと
    にL / Rがインタリーブされた構造です。

   (3) raw-stream構造体

      未定義（検討中）です。

   (4) adpcm-stream構造体

      未定義（検討中）です。

  2.5 拡張MIDIメッセージ

    MIDIメッセージは音楽用に定められた体系であり、効果音制御用として見る
    と以下の欠点があります。
         ・発音ボイスがチャンネル番号とキー番号のみで管理されるので、同じ
           キーを連打して個別にキーオフするようなことができない。
         ・パンポット等のコントロールがチャンネル全体に対してかかってしま
           う。
    この欠点を解消するために、SCEで独自に定義した拡張MIDIメッセージを以下
    説明します。この拡張MIDIメッセージはCSLでのみ通用するもので、MIDI規格
    には従っていませんので、MIDIインタフェースを介して一般のMIDI機器に渡
    すようなことは避けてください。

   (1) Pre Voice Control Message

    このメッセージの直後に発音するボイスに対してのみ、Expression / Panpot
     / PitchBendを設定するメッセージです。他のボイスには影響しません。
    Pre Voice Control Messageは次の5バイトで構成されます。
    
    +----+--------+---+--------+--------+
    |0xF9 op. code ch. 1st data 2nd data|
    +----+--------+---+--------+--------+
    

    op. code / 1st data / 2nd data

      メッセージ内容により、次のように指定する。
      
    +----------+--------+-------------+-------------+
    |内容       op. code 1st data      2nd data     |
    +          +        +             +             +
    |Expression 0x00     0〜127        無効         |
    |Panpot     0x01     0〜127        無効         |
    |PitchBend  0x02     LSB（0〜127） MSB（0〜127）|
    +----------+--------+-------------+-------------+

    ch.

    下位4bitでチャンネルを指定する。
    

   (2) Voice Control Message

    キー番号とID番号によってボイスを制御するメッセージです。より柔軟なボ
    イス制御を可能にします。
    Voice Control Messageは次の7バイトで構成されます。
    
    +----+--------+----------+---+--+--------+--------+
    |0xFD op. code mode & ch. key id 1st data 2nd data|
    +----+--------+----------+---+--+--------+--------+

    op. code / 1st data / 2nd data

      メッセージ内容により、次のように指定する。
      
    +---------------+--------+-----------------------------+-------------+
    |内容            op. code 1st data                      2nd data     |
    +               +        +                             +             +
    |Expression      0x00     0〜127                        無効         |
    |Panpot          0x01     0〜127                        無効         |
    |PitchBend       0x02     LSB（0〜127）                 MSB（0〜127）|
    |Note Control    0x10     velocity（0〜127）0を指定する 無効         |
    |(Note On/Off）           とNote Offメッセージとなる                 |
    +---------------+--------+-----------------------------+-------------+

    mode & ch.

      bit0-3でチャンネル、bit4-6でモードを指定する。
      bit4 = 1を指定すると、keyフィールドが無視され、キー番号によらずすべ
      てのボイスが対象となる。Note Control Messageについてはこのビットは
      必ず0を指定すること。

    key

      キー番号（0〜127）を指定する。

    id

      ID番号（0〜126,127）を指定する。127を指定すると、ID番号によらずすべ
      てのボイスが対象となる。Note Control Messageについては、127を指定し
      てはならない。

  2.6 推奨API形式

    CSLモジュールのAPIについては必須の規定はありません。処理内容に沿って
    自由に実装することができます。ただし、モジュールの動作に必要な情報は
    すべてCSL context構造体に記述することができますので、APIの引数はCSL 
    context構造体へのポインタとすることを推奨します。
    また、以下の２つのAPIを以下に示す形式で実装することを特に推奨します。

    推奨仕様）int vendername???_Init( sceSdModCtx *module_ctx, u_int 
    interval )

      引数：	module_ctx	CSL context構造体へのポインタ
      interval	1Tickの時間（マイクロ秒）
      モジュール内部環境の初期化を行なうAPI。ユーザプログラムから渡された
      環境構造体の初期化などを行う。
      Tickとは次に示すATick関数がコールされる時間間隔のことで、ユーザプロ
      グラムから指定を受ける。

    推奨仕様）int vendername???_ATick( sceSdModCtx *module_context )

      引数：	module_ctx	CSL context構造体へのポインタ
      ユーザプログラムが所定の時間間隔で定期的に呼び出すAPI。これを受けて、
      モジュール側で1Tickに相当するサウンド処理を行なう。このAPIを定期的
      に呼び出すのはユーザプログラムの責任とする。

  2.7 低レベルライブラリ

    CSLモジュールがSPU2にアクセスするためには、低レベルライブラリのlibsd
    （IOP用）を使用してください。libsdのレジスタラッパAPIを用いると、公開
    されているSPUレジスタにはほぼダイレクトにアクセスできます。
    EE側に実装するCSLモジュールでは、libsdをリモート呼び出しするlibsdrを
    使用してください。リモートアクセスを効率的に行うため、レジスタラッパ
    APIをバッチ処理するAPIが用意されています。

 3 CSLの利用
-------------


  3.1 SCE提供CSLモジュール

    SCEから提供する予定のCSLモジュールは以下のとおりです。カテゴリ欄は入
    出力のデータ形式を表しています。

    EE

    +--------------------------+--------------+------------------------+
    |モジュール                 カテゴリ       機能                    |
    +                          +              +                        +
    |MIDIストリーム生成         Original→MIDI プログラムにより        |
    |                                          MIDI streamを生成する   |
    |                                          モジュール              |
    |ソフトウェア・シンセサイザ MIDI→PCM      EEで演算を行う多機能    |
    |                                          WaveTable音源モジュール |
    |ラインアウト               PCM→Original  PCM streamをSPU2へ送って|
    |                                          発音させるモジュール    |
    +--------------------------+--------------+------------------------+

    IOP

    +--------------------------+--------------+-------------------------+
    |モジュール                 カテゴリ       機能                     |
    +                          +              +                         +
    |MIDIストリーム生成         Original→MIDI プログラムにより         |
    |                                          MIDI streamを生成する    |
    |                                          モジュール               |
    |MIDIシーケンサ             Original→MIDI sqファイルを読み         |
    |                                          MIDI streamを出力する    |
    |                                          シーケンサモジュール     |
    |効果音シーケンサ           Original→MIDI 効果音に特化した         |
    |                                          シーケンサモジュール     |
    |                                          （未提供）               |
    |MIDIディレイ               MIDI→MIDI     レーテンシ調節モジュール |
    |MIDIモノフォニック         MIDI→MIDI     MIDI streamを            |
    |                                          モノフォニックにアサイン |
    |                                          するモジュール           |
    |ハードウェア・シンセサイザ MIDI→Original SPU2のボイスを使用する   |
    |                                          音源モジュール           |
    +--------------------------+--------------+-------------------------+

  3.2 サンプルプログラム

    CSLモジュールを利用したサンプルプログラムとして、以下のものがあります
    ので参照してください。

   (1) sce/iop/sample/sound/sqhard

    　以下のモジュールを用いて楽曲を演奏します。CSLのもっとも基本的な例で
    す。
          (a) MIDIシーケンサ（modmidi）[IOP]
          (b) ハードウェア・シンセサイザ（modhsyn）[IOP]

   (2) sce/iop/sample/sound/ezmidi

    　以下のモジュールを用いて、楽曲を演奏するとともにEE側から効果音を発
    音します。
          (a) MIDIシーケンサ（modmidi）[IOP]
          (b) MIDI stream生成（modmsin）[EE]
          (c) ハードウェア・シンセサイザ（modhsyn）[IOP]

   (3) sce/iop/sample/sound/sqsoft

    　以下のモジュールを用いて楽曲を演奏します。演奏はEE側のソフトウェア
    ・シンセサイザにより、楽音はPCMデータとして出力され、EEからIOPそして
    SPU2に転送されます。
          (a) MIDIシーケンサ（modmidi）[IOP]
          (b) ソフトウェア・シンセサイザ（modssyn）[EE/IOP]
          (c) ラインアウト（liblout）[EE]

 4 クリエータ用オーサリング環境
--------------------------------


  4.1 JAM

    SCE提供のCSLモジュールに対応するオーサリングツールとして、JAMを提供し
    ています。
    JAMはMacintosh上で動作し、波形変換・バンク編集・MIDI変換・プレビュー
    を統合的に行なうことができます。
    ハードウェアシンセサイザとソフトウエアシンセサイザの両方に対応してい
    ます。
    詳しくは JAM 付属のドキュメントをご参照ください。
