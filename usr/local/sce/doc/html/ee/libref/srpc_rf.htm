<HTML>

<!-- 見出し 1,部見出し -->
<HEAD>
<TITLE> SIF Remote Procedure Call</TITLE>
</HEAD>
<TABLE WIDTH="100%">
<TR><TD>
<H4>"PlayStation 2"Programmer Tool Runtime Library Release 2.0</H4>
</TD></TR></TABLE>
<HR NOSHADE SIZE=5>
<DIV align=center><H1>SIF Remote Procedure Call</H1></DIV>
<P>
</TR></TABLE>
</blockquote>

<!-- 見出し 2,章見出し -->
<A NAME="Heading2">
<H3>
<A HREF="#Top"><IMG SRC = ./gif/link.gif BORDER = 0></A>構造体一覧
<HR>
</H3>
</A>
<blockquote>

<TABLE CELLPADDING=0>
<TR><TD></TD><TD>
<A HREF=#sceSifClientData>sceSifClientData </A><BR>
</TD><TD> </TD>
<TD>RPC クライアント情報</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifEndFunc>sceSifEndFunc </A><BR>
</TD><TD> </TD>
<TD>RPC終了関数</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifQueueData>sceSifQueueData </A><BR>
</TD><TD> </TD>
<TD>RPCリクエストキューデータ</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifReceiveData>sceSifReceiveData </A><BR>
</TD><TD> </TD>
<TD>RPCデータレシーブ情報</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifRpcData>sceSifRpcData </A><BR>
</TD><TD> </TD>
<TD>RPCクライアントデータヘッダ</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifRpcFunc>sceSifRpcFunc </A><BR>
</TD><TD> </TD>
<TD>RPCサービス関数</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifServeData>sceSifServeData </A><BR>
</TD><TD> </TD>
<TD>RPCサーバデータ</TD></TR>
</TR></TABLE>
</blockquote>

<!-- 見出し 2,章見出し -->
<A NAME="Heading2">
<H3>
<A HREF="#Top"><IMG SRC = ./gif/link.gif BORDER = 0></A>関数一覧
<HR>
</H3>
</A>
<blockquote>

<TABLE CELLPADDING=0>
<TR><TD></TD><TD>
<A HREF=#sceSifBindRpc>sceSifBindRpc </A><BR>
</TD><TD> </TD>
<TD>RPC サービス関数データの検索</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifCallRpc>sceSifCallRpc </A><BR>
</TD><TD> </TD>
<TD>RPC サービス関数の呼び出し</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifCheckStatRpc>sceSifCheckStatRpc </A><BR>
</TD><TD> </TD>
<TD>処理状況の判定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifExecRequest>sceSifExecRequest </A><BR>
</TD><TD> </TD>
<TD>サービス関数の実行</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifGetNextRequest>sceSifGetNextRequest </A><BR>
</TD><TD> </TD>
<TD>RPC リクエストの取得</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifGetOtherData>sceSifGetOtherData </A><BR>
</TD><TD> </TD>
<TD>相手側のデータを 受け取る</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifInitRpc>sceSifInitRpc </A><BR>
</TD><TD> </TD>
<TD>SIF RPC API の初期化</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifRegisterRpc>sceSifRegisterRpc </A><BR>
</TD><TD> </TD>
<TD>RPCサービス関数の登録</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifRemoveRpc>sceSifRemoveRpc </A><BR>
</TD><TD> </TD>
<TD>RPCサービス関数の削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifRemoveRpcQueue>sceSifRemoveRpcQueue </A><BR>
</TD><TD> </TD>
<TD>RPC受信キューの登録をはずす</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifRpcLoop>sceSifRpcLoop </A><BR>
</TD><TD> </TD>
<TD>リクエストを待つ</TD></TR>
<TR><TD></TD><TD>
<A HREF=#sceSifSetRpcQueue>sceSifSetRpcQueue </A><BR>
</TD><TD> </TD>
<TD>RPC受信キューの登録</TD></TR>
</TABLE>
</blockquote>
<DIV align="center">
<BODY BGCOLOR=#ffffff TEXT=#000000 LINK=#0000ff ALINK=#ffff00 VLINK=#800080>
</DIV>
<DIV align="center">
</DIV>
</blockquote>
<HR border=1 width=100%><BR><BR>
<DIV align=center>
<U><H2>構造体</H2></U>
</DIV>
<A name=sceSifClientData>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifClientData
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC クライアント情報
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef struct _sif_client_data {
	struct _sif_rpc_data	<I>rpcd</I>;
	unsigned int	<I>command</I>;
	void		*<I>buff</I>;
	void		*<I>cbuff</I>;
	sceSifEndFunc	<I>func</I>;
	void		*<I>para</I>;
	struct _sif_serve_data	*<I>serve</I>;
}<B> sceSifClientData</B>;
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    sceSifBindRpc()で取得したクライアント情報を格納する構造体です。この時メンバは自動設定される為、プログラム側で設定する必要はありません。 <BR>
    sceSifCallRpc()でサービス関数を呼び出す際にも使用する。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifBindRpc">sceSifBindRpc</a>(), <a href="./srpc_rf.htm#sceSifCallRpc">sceSifCallRpc</a>(), <a href="./srpc_rf.htm#sceSifCheckStatRpc">sceSifCheckStatRpc</a>()
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifEndFunc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifEndFunc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC終了関数
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef void (* <B>sceSifEndFunc</B>)(
	void *<I>data</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- メンバ -->
<B>メンバ</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>data</I>	関数コール時に渡されるデータアドレス
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    RPCサービス関数が終了したときに割り込み領域で呼ばれる関数。その際、dataのアドレスが渡される。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifCallRpc">sceSifCallRpc</a>()
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifQueueData>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifQueueData
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCリクエストキューデータ
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef struct _sif_queue_data {
	int	<I>key</I>;
	int	<I>active</I>;
	struct _sif_serve_data	*<I>link</I>;
	struct _sif_serve_data	*<I>start</I>;
	struct _sif_serve_data	*<I>end</I>;
	struct _sif_queue_data	*<I>next</I>;
} <B>sceSifQueueData</B>;
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    サーバ側で受信したリクエストをキューイングするためのデータ構造です。この時メンバは自動設定される為、プログラム側で設定する必要はありません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifSetRpcQueue">sceSifSetRpcQueue</a>(),<a href="./srpc_rf.htm#sceSifRegisterRpc">sceSifRegisterRpc</a>(),<a href="./srpc_rf.htm#sceSifGetNextRequest">sceSifGetNextRequest</a>(),<a href="./srpc_rf.htm#sceSifRpcLoop">sceSifRpcLoop</a>()
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifReceiveData>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifReceiveData
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCデータレシーブ情報
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef struct _sif_receive_data {
	struct _sif_rpc_data	<I>rpcd</I>;
	void		*<I>src</I>;
	void		*<I>dest</I>;
	int		<I>size</I>;
} <B>sceSifReceiveData</B>;
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    相手側のデータをDMAで受け取るときの制御データを格納するデータ構造です。この時メンバは自動設定される為、プログラム側で設定する必要はありません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifCheckStatRpc">sceSifCheckStatRpc</a>(), <a href="./srpc_rf.htm#sceSifGetOtherData">sceSifGetOtherData</a>()
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifRpcData>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifRpcData
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCクライアントデータヘッダ
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef struct _sif_rpc_data {
	void		*<I>paddr</I>;
	unsigned int	<I>pid</I>;
	int		<I>tid</I>;
	unsigned int	<I>mode</I>;
} <B>sceSifRpcData</B>;
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- メンバ -->
<B>メンバ</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>paddr</I>	パケットのアドレス
<I>pid</I>	パケットID
<I>tid</I>	スレッドID
<I>mode</I>	呼び出しモード
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    RPCクライアント共通のデータヘッダです。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifClientData">sceSifClientData</a>(), <a href="./srpc_rf.htm#sceSifReceiveData">sceSifReceiveData</a>(),<a href="./srpc_rf.htm#sceSifCheckStatRpc">sceSifCheckStatRpc</a>()
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifRpcFunc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifRpcFunc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCサービス関数
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef  void * (* <B>sceSifRpcFunc</B>)(
	unsigned int	<I>fno</I>,
	void		*<I>data</I>,
	int		<I>size</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- メンバ -->
<B>メンバ</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>fno</I>	sceSifCallRpc()のfno
<I>data</I>	受信データの格納されているアドレス
<I>size</I>	受信データのサイズ
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    サーバ側で実行されるRPCサービス関数です。sceSifRegisterRpc() で登録し、リクエストを受けてsceSifExecRequest() で実行します。 <BR>
    この関数の返り値は、リクエストを発したクライアントに返信するデータのアドレスとなります。返信先のアドレスとデータサイズは、クライアントによって指示されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifRegisterRpc">sceSifRegisterRpc</a>()
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifServeData>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifServeData
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCサーバデータ
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>typedef struct _sif_serve_data {
	unsigned int	<I>command</I>;
	sceSifRpcFunc	<I>func</I>;
	void		*<I>buff</I>;
	int		<I>size</I>;
	sceSifRpcFunc	<I>cfunc</I>;
	void		*<I>cbuff</I>;
	int		<I>csize</I>;
	sceSifClientData	*<I>client</I>;
	void		*<I>paddr</I>;
	unsigned int	<I>fno</I>;
	void		*<I>receive</I>;
	int		<I>rsize</I>;
	int		<I>rmode</I>;
	unsigned int	<I>rid</I>;
	struct _sif_serve_data	*<I>link</I>;
	struct _sif_serve_data	*<I>next</I>;
	struct _sif_queue_data	*<I>base</I>;
} <B>sceSifServeData</B>;
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    サーバ側で受け付けるリクエストを識別するための識別子、サービス関数、受信データのアドレス等を登録するデータ構造です。この時メンバは自動設定される為、プログラム側で設定する必要はありません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./srpc_rf.htm#sceSifExecRequest">sceSifExecRequest</a>(),<a href="./srpc_rf.htm#sceSifGetNextRequest">sceSifGetNextRequest</a>(), <a href="./srpc_rf.htm#sceSifRegisterRpc">sceSifRegisterRpc</a>()
<BR>
<DIV align="center">
        </BLOCKQUOTE>
</DIV>
</blockquote>
<HR border=1 width=100%><BR><BR>
<DIV align=center>
<U><H2>関数</H2></U>
</DIV>
</blockquote>
<A name=sceSifBindRpc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifBindRpc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC サービス関数データの検索
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>sceSifBindRpc</B>(
	sceSifClientData	<I>*bd</I>,
	unsigned int	<I>request</I>,
	unsigned int	<I>mode</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>bd</I>	クライアント情報を受け取る構造体のポインタ
<I>request</I>	リクエスト識別子
<I>mode</I>	呼び出しモード。通常は0、必要に応じて次の定数を指定する
</PRE>
<DIV align="center">
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>定数</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>機能</B></TD>
</TR>
<TR>
<TD valign="TOP">SIF_RPCM_NOWAIT</TD>
<TD valign="TOP">非同期実行</TD>
</TR>
</TABLE>
</DIV><BR>
<PRE>
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	サーバ側への通知成功 <BR>
    負(&lt;0)	発行失敗 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    リクエストを送るために必要なクライアント情報をサーバから取得します。 <BR>
    クライアント側で必要な関数です。 <BR>
    この関数を呼び出すと、requestで指定したリクエスト識別子のサービス関	数が登録されているかどうかをサーバ側で調べ、登録されていれば、呼び出しのキーとなるクライアント情報をbdで指定したsceSifClinetData構造体に返してきます。 <BR>
    通常、この関数を呼び出したスレッドはサーバからの返答があるまでスリープ状態になります。mode に SIF_RPCM_NOWAIT を指定しておくとスリープせずにそのまま抜けます。この場合、サーバ側で処理が終了したかどう	かは、sceSifCheckStatRpc()で確認できます。 <BR>
<BR>
    &lt; 注意 &gt; <BR>
    Release 1.4からEEではスリープではなく内部的に確保したセマフォを用いて終了を待ちます。 <BR>
    サービス関数が登録されていたか（Bindが成功したか）どうかは、返されたsceSifClinetDataのserveメンバが0以外の値かどうかで判別できます。以下のようなコードになります。 <BR>
        </BLOCKQUOTE>
<PRE>	#define BIND_ID  0x12345678

	while(1){
		if (sceSifBindRpc( &cd0, BIND_ID, 0) &lt; 0) {
		printf("bind errr\n");
		exit(-1);
		}
		if (cd0.serve != 0) break;
	}
</PRE>
        <BLOCKQUOTE>
<BR>
    なお、上記のようなコードでEEからIOPへ頻繁に通信を行うと、EEがかなり速いためにIOPがほぼ停止状態になります。少し間をおいてリクエストを発行してください。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifCallRpc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifCallRpc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC サービス関数の呼び出し
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>sceSifCallRpc</B>(
	sceSifClientData	<I>*bd</I>,
	unsigned int	<I>fno</I>,
	unsigned int	<I>mode</I>,
	void		*send,
	int		<I>ssize</I>,
	void		*receive,
	int		<I>rsize</I>,
	sceSifEndFunc	<I>*end_func</I>,
	void		<I>*end_para</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>bd</I>	Bind済みのクライアント情報
<I>fno</I>	呼び出されるサービス関数に渡す番号
<I>mode</I>	呼び出しモード。通常は0、必要に応じて次の定数をマスク指定する。
</PRE>
<DIV align="center">
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>定数</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>機能</B></TD>
</TR>
<TR>
<TD valign="TOP">SIF_RPCM_NOWAIT </TD>
<TD valign="TOP">非同期実行</TD>
</TR>
<TR>
<TD valign="TOP">SIF_RPCM_NOWBDC</TD>
<TD valign="TOP">キャッシュのライトバックなし</TD>
</TR>
</TABLE>
</DIV><BR>
<PRE>
<I>send</I>	送信するデータバッファ(EE/IOPで16/4バイトアライメント)
<I>ssize</I>	送信するデータサイズ(byte。EE/IOP で16/4byte単位)
<I>receive</I>	受信するデータバッファ(EE/IOPで16/4バイトアライメント)
<I>rsize</I>	受信するデータサイズ(byte。EE/IOP で16/4byte単位)
<I>end_func	</I>	終了時に割り込み禁止区間で実行される関数
<I>end_para</I>	end_func のパラメータのアドレス
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	サーバ側への通知成功 <BR>
    負(&lt;0)	発行失敗 <BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    登録されているサービス関数を呼び出します。クライアント側で使用する関数です。 <BR>
    引数bdには、あらかじめsceSifBindRpc()でBind済みのクライアント情報の構造体を指定します。 <BR>
    send で指定したデータ ssizeバイトがサーバ側に送られ、サービス関数に	第2 /第3引数として渡されます。fno が第１引数となります。 <BR>
    サービス関数の実行後、その返値のアドレスにあるデータ rsize バイトが、receive で指定した領域に送り返されます。 <BR>
    終了時に end_func で指定した関数が割り込み禁止区間で呼び出されます。 <BR>
    通常、sceSifCallRpc() を呼び出したスレッドはサーバからの返答があるまでスリープ状態になります。mode に SIF_RPCM_NOWAIT をマスクしておくと、スリープせずにそのまま抜けます。この場合、サーバの処理終了は	sceSifCheckStatRpc() で確認できます。 <BR>
<BR>
    &lt;注意&gt; <BR>
    Release 1.4 から EE ではスリープではなく内部的に確保したセマフォを用いて終了を待ちます。EE の場合、キャッシュ上に載っているデータを send/receive するときに	はメモリへ write-back しますが、 mode に SIF_RPCM_NOWBDC をマスクしておくと write-back を行いません。 <BR>
    現在の実装では、サービス関数は再入不可能です。必ず終了を確認して、次を呼んでください。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ssize/rsize の上限は、１回で送れる DMA の上限 1Mbyte - 16byteです。 <BR>
    終了処理関数end_funcは割り込みハンドラとして実行されるため、プログラミングに際していくつか特別な注意が必要です。割り込みハンドラの記述について、\overview\eekernelに注意事項が記載されていますので参照してください。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifCheckStatRpc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifCheckStatRpc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        処理状況の判定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>sceSifCheckStatRpc</B>(
	sceSifRpcData *<I>bd</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>bd</I>	sceSifRpcData 構造体へのポインタ
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    1	実行中 <BR>
    0	終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    sceSifBindRpc()/sceSifCallRpc()/sceSifGetOhterData() の状態を判別する関数です。主に、SIF_RPCM_NOWAIT で発行したときの終了判定に使用します。 <BR>
    引数bdには sceSifClientData/sceSifReceiveData を、sceSifRpcData へキャストして指定してください。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifExecRequest>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifExecRequest
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        サービス関数の実行
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void  <B>sceSifExecRequest</B>(
	sceSifServeData <I>*sd</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>sd</I>	リクエストを指すポインタ
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    リクエストに対応するサービス関数を実行します。 <BR>
    サーバとして機能するために必要な関数です。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifGetNextRequest>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifGetNextRequest
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC リクエストの取得
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>sceSifServeData *<B> sceSifGetNextRequest</B>(
	sceSifQueueData <I>*dp</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>dp</I>	sceSifSetRpcQueue() で設定したリクエスト受信キューへのポインタ
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	リクエストなし <BR>
    0以外	リクエストを指すポインタ <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    受信キューから、受信したリクエストを表す sceSifQueueData 構造体を取	出します。サーバとして機能するために必要な関数です。 <BR>
    返り値が0以外であれば、その値を sceSifExecRequest() へ渡すとサービス関数が実行されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifGetOtherData>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifGetOtherData
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        相手側のデータを 受け取る
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int  <B>sceSifGetOtherData</B>(
	sceSifReceiveData	<I>*bd</I>,
	void		<I>*s</I>rc,
	void		<I>*dest</I>,
	int		<I>size</I>,
	unsigned int	<I>mode</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>bd</I>	sceSifReceiveData 構造体のポインタ
<I>src</I>	相手側のデータアドレス(EE/IOPで16/4バイトアライメント)
<I>dest</I>	転送先のアドレス(EE/IOPで16/4バイトアライメント)
<I>size</I>	転送するサイズ
<I>mode</I>	呼び出しモード。通常は0、必要に応じて次の定数をマスクする
</PRE>
<DIV align="center">
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>定数</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>機能</B></TD>
</TR>
<TR>
<TD valign="TOP">SIF_RPCM_NOWAIT</TD>
<TD valign="TOP">非同期実行</TD>
</TR>
</TABLE>
</DIV><BR>
<PRE>
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	相手側への通知成功 <BR>
    負(&lt;0)	発行失敗 <BR>
<BR>
    相手側のアドレス src からこちらのアドレス dest へデータを転送する関数です。 <BR>
    通常、sceSifReceiveRpc() を呼び出したスレッドは相手からの返答があるまでスリープ状態になります。mode に SIF_RPCM_NOWAIT をマスクしておけばスリープせずにそのまま抜けます。この場合、処理の終了はsceSifCheckStatRpc()で確認できます。 <BR>
    &lt; 注意 &gt; <BR>
    Release 1.4 から EE ではスリープではなく内部的に確保したセマフォを用いて終了を待ちます。 <BR>
        </BLOCKQUOTE>
</PRE>
</blockquote>
<A name=sceSifInitRpc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifInitRpc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        SIF RPC API の初期化
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void  <B>sceSifInitRpc</B>(
	unsigned int <I>mode</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>mode</I>	起動モード（現在の実装では0 固定）
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    SIF RPC API の初期化を行います。 <BR>
    内部変数を初期化し、リクエストを処理するためのコマンド関数を SIF Command API のシステムバッファに登録します。 <BR>
    サーバ/クライアントの両方で行う必要があります。 <BR>
    内部で sceSifInitCmd() を呼びますので、同期のため片方が呼ばれるまでもう一方はこの関数内で待ちに入ります。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifRegisterRpc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifRegisterRpc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCサービス関数の登録
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>sceSifRegisterRpc</B>(
	sceSifServeData	<I>*serve</I>, 
	unsigned int	<I>request</I>,
	sceSifRpcFunc	<I>func</I>, 
	void		<I>*buff</I>,
	sceSifRpcFunc	<I>cfunc</I>, 
	void		<I>*cbuff</I>,
	sceSifQueueData	<I>*qd</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>serve</I>	サービス関数情報を格納する構造体のポインタ
<I>request</I>	リクエスト識別子
<I>func</I>	リクエストを受けたときに実行するサービス関数
<I>buff</I>	funcの引数となるデータアドレス。
<I>cfunc</I>	sceSifCancelRpc()のとき、割り込み禁止区間で実行される関数
<I>cbuff</I>	cfuncの引数となるバッファ
<I>qd</I>	serveの構造体を登録する受信キュー構造体
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    リクエスト識別子とサービス関数を受信キュー構造体に登録します。サーバとして機能するために必要な関数です。 <BR>
    リクエスト識別子は、sceSifBindRpc() でサービス関数を探すために使用されるものです。最上位ビット（bit31）が1の値を指定することはできません（システム使用とします）。 <BR>
    クライアント側からsceSifCallRpc() が呼ばれると、SIF Command APIで登録した関数によってリクエストが受信キューに入れられます。割り込み関数として実行されるSIF Command関数が終了したあと、通常のコンテクストで受信キューからリクエストが取出されて、サービス関数funcが実行されます。funcの実行が終了すると、その返値のアドレスのデータが、sceSifCallRpc()の引数receiveで指定されたアドレスに、同じくrsizeで指定されたサイズ分だけ返送されます。 <BR>
    現在の実装では、サービス関数は再入不可能です。必ず終了を確認して、次を呼んでください。関数自体が再入可能であってもキューイングの構造とEE &lt;-&gt; IOP間の通信量を減らすためにそうなっています。 <BR>
    sceSifCancelRpc()は、現在未実装です。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifRemoveRpc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifRemoveRpc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPCサービス関数の削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>sceSifServeData *<B>sceSifRemoveRpc</B>(
	sceSifServeData	<I>*serve</I>,
	sceSifQueueData	<I>*qd</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>serve</I>	サービス関数情報を格納する構造体のポインタ
<I>qd</I>	serveの構造体を登録する受信キュー構造体
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    NULLなら失敗（受信キューに登録されていない） <BR>
    NULL以外なら成功 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    リクエスト識別子とサービス関数を受信キュー構造体から削除します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifRemoveRpcQueue>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifRemoveRpcQueue
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC受信キューの登録をはずす
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>sceSifQueueData *<B>sceSifRemoveRpcQueue</B>(
	sceSifQueueData <I>*dq</I>,
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>dq</I>	受信キューの構造体
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    NULLなら失敗（登録されていない） <BR>
    NULL以外なら成功 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    RPCリクエストの受信キューをRPCシステムから削除します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=sceSifRpcLoop>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifRpcLoop
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        リクエストを待つ
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>sceSifRpcLoop</B>(
	sceSifQueueData <I>*pd</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>pd</I>	sceSifSetRpcQueue()で設定したリクエスト受信キューへのポインタ
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし（この関数からは戻らない） <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    リクエスト待ちとサービス実行を繰り返すループに入ります。サーバとして機能するために必要な関数です。この関数を呼び出すと、実行スレッドはクライアントからのリクエストを受けるまでSleepし、リクエストを受けるとWakeupしてサービス関数を実行し、終了後再びSleepするというサイクルに入ります。したがって、<I>pd</I>で指定するリクエスト受信キューは、sceSifSetRpcQueue()で登録する際に第２引数にスレッドIDを指定したものでなければなりません。参考として、sceSifRpcLoop()のソースコードを示します。 <BR>
<BR>
        </BLOCKQUOTE>
<PRE>	void sceSifRpcLoop(sceSifQueueData *qd)
	{
		sceSifServeData *rdp;

		while(1) {
		/* 処理関数を取得 */
		while ((rdp = sceSifGetNextRequest(qd))){
			/* 関数の実行 */
			sceSifExecRequest(rdp);
		}
		/* 次のコマンドが来るまで眠る */
		SleepThread();

		}
		return;
	}
</PRE>
<BR>
</blockquote>
<A name=sceSifSetRpcQueue>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>sceSifSetRpcQueue
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        RPC受信キューの登録
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>sceSifSetRpcQueue</B>(
	sceSifQueueData <I>*dq</I>,
	int <I>key</I>
)
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>dq</I>	受信キューの構造体
<I>key</I>	スレッドID。ビジーウェイトするときは負数(&lt;0)
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    RPCリクエストの受信キューをRPCシステムに登録します。 <BR>
    サーバとして機能するために必要な関数です。 <BR>
    引数keyには通常はスレッドIDを指定し、クライアントからのリクエストを受けるたびにWakeupがかかるようにします。keyに負数(&lt;0)を指定した場合はWakeupしないので、ビジーウェイトする場合に使用します。 <BR>
</BLOCKQUOTE>
</blockquote>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A>
<HR>
<DIV ALIGN="right">
    Copyright (c) 2000 Sony Computer Entertainment Inc.  All Rights Reserved.<BR>
    SCEI CONFIDENTIAL
</DIV>
</BODY>
</HTML>
