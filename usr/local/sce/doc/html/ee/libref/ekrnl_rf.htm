<HTML>

<!-- 見出し 1,部見出し -->
<HEAD>
<TITLE> EE Kernel API</TITLE>
</HEAD>
<TABLE WIDTH="100%">
<TR><TD>
<H4>"PlayStation 2"Programmer Tool Runtime Library Release 2.0</H4>
</TD></TR></TABLE>
<HR NOSHADE SIZE=5>
<DIV align=center><H1>EE Kernel API</H1></DIV>
<P>
</TR></TABLE>
</blockquote>

<!-- 見出し 2,章見出し -->
<A NAME="Heading2">
<H3>
<A HREF="#Top"><IMG SRC = ./gif/link.gif BORDER = 0></A>構造体一覧
<HR>
</H3>
</A>
<blockquote>

<TABLE CELLPADDING=0>
<TR><TD></TD><TD>
<A HREF=#SemaParam>SemaParam </A><BR>
</TD><TD> </TD>
<TD>セマフォ</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ThreadParam>ThreadParam </A><BR>
</TD><TD> </TD>
<TD>スレッドの属性</TD></TR>
</TR></TABLE>
</blockquote>

<!-- 見出し 2,章見出し -->
<A NAME="Heading2">
<H3>
<A HREF="#Top"><IMG SRC = ./gif/link.gif BORDER = 0></A>関数一覧
<HR>
</H3>
</A>
<blockquote>

<TABLE CELLPADDING=0>
<TR><TD></TD><TD>
<A HREF=#AddDmacHandler>AddDmacHandler </A><BR>
</TD><TD> </TD>
<TD>DMA割り込みハンドラの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#AddDmacHandler2>AddDmacHandler2 </A><BR>
</TD><TD> </TD>
<TD>DMA割り込みハンドラの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#AddIntcHandler>AddIntcHandler </A><BR>
</TD><TD> </TD>
<TD>INTC割り込みハンドラの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#AddIntcHandler2>AddIntcHandler2 </A><BR>
</TD><TD> </TD>
<TD>INTC割り込みハンドラの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#AddSbusIntcHandler>AddSbusIntcHandler </A><BR>
</TD><TD> </TD>
<TD>SBUS割り込みハンドラの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#CancelWakeupThread / iCancelWakeupThread>CancelWakeupThread / iCancelWakeupThread </A><BR>
</TD><TD> </TD>
<TD>起床要求回数の取得とCancel</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ChangeThreadPriority / iChangeThreadPriority>ChangeThreadPriority / iChangeThreadPriority </A><BR>
</TD><TD> </TD>
<TD>スレッドの優先度変更</TD></TR>
<TR><TD></TD><TD>
<A HREF=#CreateSema>CreateSema </A><BR>
</TD><TD> </TD>
<TD>セマフォの作成</TD></TR>
<TR><TD></TD><TD>
<A HREF=#CreateThread>CreateThread </A><BR>
</TD><TD> </TD>
<TD>新しいスレッドの生成</TD></TR>
<TR><TD></TD><TD>
<A HREF=#DeleteSema>DeleteSema </A><BR>
</TD><TD> </TD>
<TD>セマフォの削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#DeleteThread>DeleteThread </A><BR>
</TD><TD> </TD>
<TD>スレッドの削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#DI>DI </A><BR>
</TD><TD> </TD>
<TD>割り込み禁止</TD></TR>
<TR><TD></TD><TD>
<A HREF=#DisableDmac / iDisableDmac>DisableDmac / iDisableDmac </A><BR>
</TD><TD> </TD>
<TD>DMA割り込み停止</TD></TR>
<TR><TD></TD><TD>
<A HREF=#DisableIntc / iDisableIntc>DisableIntc / iDisableIntc </A><BR>
</TD><TD> </TD>
<TD>INTC割り込み停止</TD></TR>
<TR><TD></TD><TD>
<A HREF=#EI>EI </A><BR>
</TD><TD> </TD>
<TD>割り込み許可</TD></TR>
<TR><TD></TD><TD>
<A HREF=#EnableDmac / iEnableDmac>EnableDmac / iEnableDmac </A><BR>
</TD><TD> </TD>
<TD>DMA割り込み開始</TD></TR>
<TR><TD></TD><TD>
<A HREF=#EnableIntc / iEnableIntc>EnableIntc / iEnableIntc </A><BR>
</TD><TD> </TD>
<TD>INTC割り込み開始</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ExitDeleteThread>ExitDeleteThread </A><BR>
</TD><TD> </TD>
<TD>自スレッドの終了と削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ExitThread>ExitThread </A><BR>
</TD><TD> </TD>
<TD>自スレッドの終了</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ExpandScratchPad>ExpandScratchPad </A><BR>
</TD><TD> </TD>
<TD>スクラッチパットの擬似的拡張</TD></TR>
<TR><TD></TD><TD>
<A HREF=#FlushCache / iFlushCache>FlushCache / iFlushCache </A><BR>
</TD><TD> </TD>
<TD>キャッシュ掃き出し</TD></TR>
<TR><TD></TD><TD>
<A HREF=#GetCop0 / iGetCop0>GetCop0 / iGetCop0 </A><BR>
</TD><TD> </TD>
<TD>COP0レジスタの取得</TD></TR>
<TR><TD></TD><TD>
<A HREF=#GetThreadId>GetThreadId </A><BR>
</TD><TD> </TD>
<TD>自スレッドIDの取得</TD></TR>
<TR><TD></TD><TD>
<A HREF=#InitThread>InitThread </A><BR>
</TD><TD> </TD>
<TD>スレッドの初期化</TD></TR>
<TR><TD></TD><TD>
<A HREF=#Interrupt2Iop>Interrupt2Iop </A><BR>
</TD><TD> </TD>
<TD>IOPへの割り込み</TD></TR>
<TR><TD></TD><TD>
<A HREF=#InvalidDCache / iInvalidDCache>InvalidDCache / iInvalidDCache </A><BR>
</TD><TD> </TD>
<TD>キャッシュ無効化</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ReferSemaStatus / iReferSemaStatus>ReferSemaStatus / iReferSemaStatus </A><BR>
</TD><TD> </TD>
<TD>セマフォ状態の取得</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ReferThreadStatus / iReferThreadStatus>ReferThreadStatus / iReferThreadStatus </A><BR>
</TD><TD> </TD>
<TD>スレッド状態の取得</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ReleaseAlarm / iReleaseAlarm>ReleaseAlarm / iReleaseAlarm </A><BR>
</TD><TD> </TD>
<TD>アラームの解除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ReleaseWaitThread / iReleaseWaitThread>ReleaseWaitThread / iReleaseWaitThread </A><BR>
</TD><TD> </TD>
<TD>WAIT状態にあるスレッドの強制解除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#RemoveDmacHandler>RemoveDmacHandler </A><BR>
</TD><TD> </TD>
<TD>DMA割り込みハンドラの削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#RemoveIntcHandler>RemoveIntcHandler </A><BR>
</TD><TD> </TD>
<TD>割り込みハンドラの削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#RemoveSbusIntcHandler>RemoveSbusIntcHandler </A><BR>
</TD><TD> </TD>
<TD>SBUS割り込みハンドラの削除</TD></TR>
<TR><TD></TD><TD>
<A HREF=#ResumeThread / iResumeThread>ResumeThread / iResumeThread </A><BR>
</TD><TD> </TD>
<TD>SUSPEND状態からREADY状態への移行</TD></TR>
<TR><TD></TD><TD>
<A HREF=#RotateThreadReadyQueue / iRotateThreadReadyQueue>RotateThreadReadyQueue / iRotateThreadReadyQueue </A><BR>
</TD><TD> </TD>
<TD>レディーキューの回転</TD></TR>
<TR><TD></TD><TD>
<A HREF=#SetAlarm / iSetAlarm>SetAlarm / iSetAlarm </A><BR>
</TD><TD> </TD>
<TD>アラームの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#SetDebugHandler>SetDebugHandler </A><BR>
</TD><TD> </TD>
<TD>例外ハンドラの設定</TD></TR>
<TR><TD></TD><TD>
<A HREF=#SignalSema / iSignalSema>SignalSema / iSignalSema </A><BR>
</TD><TD> </TD>
<TD>セマフォ資源返却</TD></TR>
<TR><TD></TD><TD>
<A HREF=#SleepThread>SleepThread </A><BR>
</TD><TD> </TD>
<TD>WAIT状態への移行</TD></TR>
<TR><TD></TD><TD>
<A HREF=#StartThread>StartThread </A><BR>
</TD><TD> </TD>
<TD>スレッドの起動</TD></TR>
<TR><TD></TD><TD>
<A HREF=#SuspendThread / iSuspendThread>SuspendThread / iSuspendThread </A><BR>
</TD><TD> </TD>
<TD>SUSPEND状態への移行</TD></TR>
<TR><TD></TD><TD>
<A HREF=#SyncDCache / iSyncDCache>SyncDCache / iSyncDCache </A><BR>
</TD><TD> </TD>
<TD>キャッシュ掃き出し</TD></TR>
<TR><TD></TD><TD>
<A HREF=#TerminateThread / iTerminateThread>TerminateThread / iTerminateThread </A><BR>
</TD><TD> </TD>
<TD>他スレッドの強制終了</TD></TR>
<TR><TD></TD><TD>
<A HREF=#WaitSema / PollSema / iPollSema>WaitSema / PollSema / iPollSema </A><BR>
</TD><TD> </TD>
<TD>セマフォ資源獲得</TD></TR>
<TR><TD></TD><TD>
<A HREF=#WakeupThread / iWakeupThread>WakeupThread / iWakeupThread </A><BR>
</TD><TD> </TD>
<TD>WAIT状態にあるスレッドのWAKEUP</TD></TR>
</TR></TABLE>
</blockquote>

<!-- 見出し 2,章見出し -->
<A NAME="Heading2">
<H3>
<A HREF="#Top"><IMG SRC = ./gif/link.gif BORDER = 0></A>プログラムの起動/終了関数一覧
<HR>
</H3>
</A>
<blockquote>

<TABLE CELLPADDING=0>
<TR><TD></TD><TD>
<A HREF=#LoadExecPS2>LoadExecPS2 </A><BR>
</TD><TD> </TD>
<TD>プログラムの起動</TD></TR>
<TR><TD></TD><TD>
<A HREF=#Exit>Exit </A><BR>
</TD><TD> </TD>
<TD>プログラムの終了</TD></TR>
</TABLE>
</blockquote>
<DIV align="center">
<BODY BGCOLOR=#ffffff TEXT=#000000 LINK=#0000ff ALINK=#ffff00 VLINK=#800080>
</DIV>
<DIV align="center">
</DIV>
</blockquote>
<HR border=1 width=100%><BR><BR>
<DIV align=center>
<U><H2>構造体</H2></U>
</DIV>
<A name=SemaParam>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SemaParam
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        セマフォ
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>struct <B>SemaParam</B> {
	int	<I>currentCount</I>;
	int	<I>maxCount</I>;
	int	<I>initCount</I>;
	int	<I>numWaitThreads</I>;
	int	<I>attr</I>;
	u_int	<I>option</I>;
}
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- メンバ -->
<B>メンバ</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>currentCount</I>		セマフォ現在値
<I>maxCount</I>		セマフォ資源数の最大値
<I>initCount</I>		セマフォ資源数の初期値
<I>numWaitThreads</I>		セマフォ待ちスレッド数
<I>attr</I>			セマフォ属性
<I>option</I>			ユーザ定義の付加情報
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォの構造体です。 <BR>
    optionはEE Kernelが関知しないメンバで、ユーザプログラムで任意に意味付けして使用することができます。 <BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    現在のバージョンでは、maxCountが正しく処理されません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ThreadParam>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ThreadParam
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スレッドの属性
</DIV><P>

<!-- 構造 -->
<B>構造</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>struct <B>ThreadParam</B> {
	int	<I>status</I>;
	void	(*<I>entry</I>)(void *);
	void	*<I>stack</I>;
	int	<I>stackSize</I>;
	void	*<I>gpReg</I>;
	int	<I>initPriority</I>;
	int	<I>currentPriority</I>;
	u_int	<I>attr</I>;
	u_int	<I>option</I>;
	int	<I>waitType</I>;
	int	<I>waitId</I>;
	int	<I>wakeupCount</I>;
};
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- メンバ -->
<B>メンバ</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>status</I>		スレッド状態
<I>entry</I>		実行開始アドレス (*)
<I>stack</I>		スレッドの使用するスタック領域のアドレス (*)
		（16byteアライメント）
<I>stackSize</I>	スタックサイズ（バイト単位：16の倍数） (*)
<I>gpReg</I>		GP（Global Pointer）レジスタの値 (*)
<I>initPriority</I>	優先度 初期値 (0〜128) (*)
<I>currentPriority</I>	優先度 現在値 (0〜128)
<I>attr</I>		System Reserved（値は任意）
<I>option</I>		ユーザ定義の付加情報 (*)
<I>waitType</I>	WAIT要因
<I>waitId</I>		WAIT要因がセマフォの時セマフォID
<I>wakeupCount</I>	Wakup要求数
(*) スレッド生成時に必要な情報
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドの属性を保持する構造体です。 <BR>
    <I>status</I>はスレッドの状態を次の定数で示します。 <BR>
<BR>
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>定数</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>値</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>状態</B></TD>
</TR>
<TR>
<TD valign="TOP">THS_RUN</TD>
<TD valign="TOP">0x01</TD>
<TD valign="TOP">RUN状態</TD>
</TR>
<TR>
<TD valign="TOP">THS_READY</TD>
<TD valign="TOP">0x02</TD>
<TD valign="TOP">READY状態</TD>
</TR>
<TR>
<TD valign="TOP">THS_WAIT</TD>
<TD valign="TOP">0x04</TD>
<TD valign="TOP">WAIT状態</TD>
</TR>
<TR>
<TD valign="TOP">THS_SUSPEND</TD>
<TD valign="TOP">0x08</TD>
<TD valign="TOP">SUSPEND状態</TD>
</TR>
<TR>
<TD valign="TOP">THS_WAITSUSPEND</TD>
<TD valign="TOP">0x0c</TD>
<TD valign="TOP">WAIT-SUSPEND状態</TD>
</TR>
<TR>
<TD valign="TOP">THS_DORMANT</TD>
<TD valign="TOP">0x10</TD>
<TD valign="TOP">DORMANT状態</TD>
</TR>
</TABLE>
<BR>
<BR>
    <I>option</I>はEE Kernelが関知しないメンバで、ユーザプログラムで任意に意味付けして使用することができます。 <BR>
<BR>
    <I>waitType</I>はWAIT要因を次の値で表します。 <BR>
<BR>
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>値</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>要因</B></TD>
</TR>
<TR>
<TD valign="TOP">0</TD>
<TD valign="TOP">WAIT状態でない</TD>
</TR>
<TR>
<TD valign="TOP">1</TD>
<TD valign="TOP">WAKUP要求待ち</TD>
</TR>
<TR>
<TD valign="TOP">2</TD>
<TD valign="TOP">セマフォ待ち</TD>
</TR>
</TABLE>
<BR>
<BR>
<DIV align="center">
        </BLOCKQUOTE>
</DIV>
</blockquote>
<HR border=1 width=100%><BR><BR>
<DIV align=center>
<U><H2>関数</H2></U>
</DIV>
</blockquote>
<A name=AddDmacHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>AddDmacHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        DMA割り込みハンドラの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>AddDmacHandler</B>(
	int <I>channel</I>,
	int (*<I>handler</I>)(int <I>ch</I>),
	int <I>next</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>channel</I>	チャネル番号
	定数			DMAチャネル
	DMAC_VIF0	VIF0	DIR:to	GP:A
	DMAC_VIF1	VIF1	DIR:both	GP:C
	DMAC_GIF	GIF	DIR:to	GP:C
	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
	DMAC_TO_IPU	to IPU	DIR:to	GP:C
	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
	DMAC_TO_SPR	to SPR	DIR:to	GP:C
<I>handler</I>	ハンドラ関数
<I>next</I>	すでに登録されているハンドラのハンドラID
	0 :先頭に登録する
	-1:最後に登録する
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ハンドラID	正常終了 <BR>
    -1		エラー終了 <BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    DMAチャネルごとにDMA割り込みハンドラを設定します。 <BR>
    <I>channel</I>はDMAチャネルの番号、<I>handler</I>はDMA割り込み時に呼び出されるハンドラのアドレスで、<I>handler</I>の引数<I>ch</I>はDMAチャネルの番号です。<I>next</I>はすでに登録されているDMA割り込みハンドラのアドレスで、<I>handler</I>は<I>next</I>の前に呼び出されることになります。ただし<I>next</I>に0を指定すると<I>handler</I>が先頭の割り込みハンドラとして、-1を指定すると最後の割り込みハンドラとして登録されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    DMA割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセーブされ、ハンドラの実行を終えるとリストアされます。一方、FPUレジスタはセーブ／リストアが行われませんので注意してください。 <BR>
    割り込みハンドラの作成にあたっては、割り込み禁止状態であること、使用できるAPIが異なることなど、いくつか特別な注意が必要です。\overview\eekernelに注意事項が記載されていますので参照してください。 <BR>
    割り込みハンドラが-1を返した場合、それ以降に登録されている割り込みハンドラは呼び出されません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=AddDmacHandler2>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>AddDmacHandler2
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        DMA割り込みハンドラの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>AddDmacHandler2</B>(
	int <I>channel</I>,
	int (*<I>handler</I>)(int <I>ch</I>, void *<I>arg</I>, void *<I>addr</I>),
	int <I>next,</I>
<I>	void *arg</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>channel</I>	チャネル番号
	定数			DMAチャネル
	DMAC_VIF0	VIF0	DIR:to	GP:A
	DMAC_VIF1	VIF1	DIR:both	GP:C
	DMAC_GIF	GIF	DIR:to	GP:C
	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
	DMAC_TO_IPU	to IPU	DIR:to	GP:C
	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
	DMAC_TO_SPR	to SPR	DIR:to	GP:C
<I>handler</I>	ハンドラ関数
<I>next</I>	すでに登録されているハンドラのハンドラID
	0 :先頭に登録する
	-1:最後に登録する
<I>arg</I>	ハンドラへ渡す引数
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ハンドラID	正常終了 <BR>
    -1		エラー終了 <BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    DMAチャネルごとにDMA割り込みハンドラを設定します。割り込みハンドラに渡される引数がAddDmacHandler()と異なります。 <BR>
    <I>channel</I>はDMAチャネルの番号、<I>handler</I>はDMA割り込み時に呼び出されるハンドラのアドレスです。<I>handler</I>の引数<I>ch</I>はDMAチャネルの番号、<I>arg</I>はハンドラへ渡す引数、<I>addr</I>は割り込みが発生した時のプログラムカウンタの値です。<I>next</I>はすでに登録されているDMA割り込みハンドラのアドレスで、<I>handler</I>は<I>next</I>の前に呼び出されることになります。ただし<I>next</I>に0を指定すると<I>handler</I>が先頭の割り込みハンドラとして、-1を指定すると最後の割り込みハンドラとして登録されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    DMA割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセーブされ、ハンドラの実行を終えるとリストアされます。一方、FPUレジスタはセーブ／リストアが行われませんので注意してください。 <BR>
    割り込みハンドラの作成にあたっては、割り込み禁止状態であること、使用できるAPIが異なることなど、いくつか特別な注意が必要です。\overview\eekernelに注意事項が記載されていますので参照してください。 <BR>
    割り込みハンドラが-1を返した場合、それ以降に登録されている割り込みハンドラは呼び出されません。 <BR>
<BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=AddIntcHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>AddIntcHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        INTC割り込みハンドラの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>AddIntcHandler</B>(
	int <I>cause</I>,
	int (*<I>handler</I>)(int <I>ca</I>),
	int <I>next</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
	定数			割り込み要因
	INTC_GS		GS
	INTC_SBUS		SBUS
	INTC_VBLANK_S	V-blank start
	INTC_VBLANK_E	V-blank end
	INTC_VIF0		VIF0
	INTC_VIF1		VIF1
	INTC_VU0		VU0
	INTC_VU1		VU1
	INTC_IPU		IPU
	INTC_TIM0		Timer0
	INTC_TIM1		Timer1
<I>handler</I>	ハンドラ関数
<I>next</I>		すでに登録されているハンドラのハンドラID
		0 :先頭に登録する
		-1:最後に登録する
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ハンドラID	正常終了 <BR>
    -1		エラー終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    INTCの割り込み要因ごとにハンドラを登録します。 <BR>
    <I>cause</I>は割り込み要因、<I>handler</I>は割り込み発生時に呼び出されるハンドラのアドレス、<I>handler</I>の引数<I>ca</I>は割り込み要因です。<I>next</I>はすでに登録されている割り込みハンドラのハンドラIDで、<I>handler</I>は<I>next</I>の前に呼び出されることになります。ただし<I>next</I>に0を指定すると<I>handler</I>が先頭の割り込みハンドラとして、-1を指定すると最後の割り込みハンドラとして登録されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    外部割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセーブされ、ハンドラの実行を終えるとGPRはリストアされます。FPUレジスタのセーブ／リストアは行われませんので注意してください。 <BR>
    割り込みハンドラの作成にあたっては、割り込み禁止状態であること、使用できるAPIが異なることなど、いくつか特別な注意が必要です。\overview\eekernelに注意事項が記載されていますので参照してください。 <BR>
    割り込みハンドラが-1を返した場合、それ以降に登録されている割り込みハンドラは呼び出されません。 <BR>
<BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=AddIntcHandler2>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>AddIntcHandler2
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        INTC割り込みハンドラの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>AddIntcHandler2</B>(
	int <I>cause</I>,
	int (*<I>handler</I>)(int <I>ca</I>, void *<I>arg</I>, void *<I>addr</I>),
	int <I>next</I>
<I>	</I>void <I>*arg</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
	定数			割り込み要因
	INTC_GS		GS
	INTC_SBUS		SBUS
	INTC_VBLANK_S	V-blank start
	INTC_VBLANK_E	V-blank end
	INTC_VIF0		VIF0
	INTC_VIF1		VIF1
	INTC_VU0		VU0
	INTC_VU1		VU1
	INTC_IPU		IPU
	INTC_TIM0		Timer0
	INTC_TIM1		Timer1
<I>handler</I>	ハンドラ関数
<I>next</I>		すでに登録されているハンドラのハンドラID
		0 :先頭に登録する
		-1:最後に登録する
<I>arg	</I>ハンドラへ渡す引数
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ハンドラID	正常終了 <BR>
    -1		エラー終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    INTCの割り込み要因ごとにハンドラを登録します。AddIntcHandler()とはハンドラへ渡す引数が異なります。 <BR>
    <I>cause</I>は割り込み要因、<I>handler</I>は割り込み発生時に呼び出されるハンドラのアドレス、<I>handler</I>の引数<I>ca</I>は割り込み要因、<I>arg</I>はハンドラへ渡す引数、<I>addr</I>は割り込みが発生した時のプログラムカウンタの値です。<I>next</I>はすでに登録されている割り込みハンドラのハンドラIDで、<I>handler</I>は<I>next</I>の前に呼び出されることになります。ただし<I>next</I>に0を指定すると<I>handler</I>が先頭の割り込みハンドラとして、-1を指定すると最後の割り込みハンドラとして登録されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    外部割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセーブされ、ハンドラの実行を終えるとリストアされます。一方、FPUレジスタはセーブ／リストアが行われませんので注意してください。 <BR>
    割り込みハンドラの作成にあたっては、割り込み禁止状態であること、使用できるAPIが異なることなど、いくつか特別な注意が必要です。\overview\eekernelに注意事項が記載されていますので参照してください。 <BR>
    割り込みハンドラが-1を返した場合、それ以降に登録されている割り込みハンドラは呼び出されません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=AddSbusIntcHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>AddSbusIntcHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        SBUS割り込みハンドラの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>AddSbusIntcHandler</B>(
	int <I>cause</I>,
	void (*<I>handler</I>)(int <I>ca</I>)
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>		割り込み要因
<I>handler</I>		ハンドラ関数
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>	正常終了 <BR>
    -1	エラー終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    IOPからの割り込みであるSBUS割り込みのハンドラを登録します。 <BR>
    <I>cause</I>は割り込み要因で、ユーザー定義の0から15までの値を指定します。最大16個までのハンドラを登録することができ、その中で、IOP側で割り込みをかける際に指定された要因の値を持つものが呼び出されます。たとえばIOPから0を指定して割り込みをかけると、<I>cause</I>に0を指定して登録されたハンドラが呼び出され、それ以外のハンドラは呼び出されません。 <BR>
    <I>handler</I>は割り込み発生時に呼び出されるハンドラのアドレス、<I>handler</I>の引数<I>ca</I>は割り込み要因です。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    外部割り込みが発生すると、割り込みハンドラを呼び出す前にGPRはセーブされ、ハンドラの実行を終えるとGPRはリストアされます。FPUレジスタのセーブ／リストアは行われませんので注意してください。 <BR>
    割り込みハンドラの作成にあたっては、割り込み禁止状態であること、使用できるAPIが異なることなど、いくつか特別な注意が必要です。\overview\eekernelに注意事項が記載されていますので参照してください。 <BR>
    SBUS割り込みは常に許可されており、禁止することはできません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=CancelWakeupThread / iCancelWakeupThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>CancelWakeupThread / iCancelWakeupThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        起床要求回数の取得とCancel
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>CancelWakeupThread</B>(
	int <I>tid</I>
);
int <B>iCancelWakeupThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	スレッドID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    起床要求回数	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドの起床要求回数を読み出し、クリアして、起床要求をすべて無効にします。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ChangeThreadPriority / iChangeThreadPriority>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ChangeThreadPriority / iChangeThreadPriority
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スレッドの優先度変更
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ChangeThreadPriority</B>(
	int <I>tid</I>,
	int <I>prio</I>
);
int <B>iChangeThreadPriority</B>(
	int <I>tid</I>,
	int <I>prio</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	スレッドID
<I>prio</I>	スレッドの優先度
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    優先度		正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドの優先度を<I>prio</I>に変更します。該当する優先度のレディーキューの最後に登録されます。変更した優先度はExitによって終了するまで有効です。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=CreateSema>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>CreateSema
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        セマフォの作成
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>CreateSema</B>(
	struct SemaParam *<I>sema</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>sema</I>-&gt;initCount  セマフォの初期値
<I>sema</I>-&gt;maxCount  セマフォの最大値
<I>sema</I>-&gt;option     セマフォに関する付加情報。この値は、ReferSemaStatus()で参照できる。
                  マルチスレッドマネージャはこの値を関知しないので、適宜意味付けして利用してよい。
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    計数セマフォを作成します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=CreateThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>CreateThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        新しいスレッドの生成
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>CreateThread</B>(
	struct ThreadParam *<I>param</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>param</I>-&gt;entry		実行を開始する関数のアドレス
<I>param</I>-&gt;stack		スレッドが使用するスタック領域
			(16byteアラインメント)
<I>param</I>-&gt;stackSize		スタックサイズ(バイト単位:16の倍数)
<I>param</I>-&gt;gpReg		GP(Global Pointer)レジスタの値
<I>param</I>-&gt;initPriority	優先度(0〜63)
<I>param</I>-&gt;option		ユーザ定義の情報
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    新しいスレッドの生成(TCBの割り付けとその初期設定)を行い、スレッドIDを返します。 <BR>
    この関数が呼び出された時点では生成されたスレッドは実行されず、DORMANT状態になります。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    コンパイルオプションに-fno-commonを指定してください。 <BR>
<BR>
    スタック領域を16byteアライメントに揃えるには、次の例のように変数宣言します。 <BR>
    <blockquote>
    	char stack[STACK_SIZE] __attribute__ ((aligned(16))); <BR>
    </blockquote>
<BR>
    <I>param</I>-&gt;gpRegには、グローバル変数_gpのアドレスを代入してください。 <BR>
    <blockquote>
    	param-&gt;gpReg = &_gp; <BR>
    </blockquote>
        </BLOCKQUOTE>
</blockquote>
<A name=DeleteSema>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>DeleteSema
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        セマフォの削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>DeleteSema</B>(
	int <I>sid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>sid</I>	セマフォID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>sid</I>セマフォを削除します。セマフォの待ちキューに登録されていたスレッドにはエラーが返ります。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=DeleteThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>DeleteThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スレッドの削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>DeleteThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	削除するスレッドのID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドを削除し、TCBを解放します。対象とするスレッドはDORMANT状態でなければなりません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドを削除する場合は、ExitDeleteThread()を使用します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=DI>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>DI
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        割り込み禁止
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><B>DI</B>( void );
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    CPUの割り込み許可ビットを0にします。 <BR>
    割り込み許可ビットはスレッドのコンテキストに含まれません。 <BR>
    この機能は、細かい単位で割り込みを制御するため、たとえばVU0をマクロ命令で制御する場合などのために用意されたものです。実行権の制御にはスレッドの優先順位、排他制御にはセマフォを使用してください。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    DI()を呼び出した後の割り込み禁止状態では、printf()は使用できません。scePrintf()を使用してください。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=DisableDmac / iDisableDmac>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>DisableDmac / iDisableDmac
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        DMA割り込み停止
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>DisableDmac</B>(
	int <I>channel</I>
);
int <B>iDisableDmac</B>(
	int <I>channel</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>channel</I>	チャネル番号
	定数			DMAチャネル
	DMAC_VIF0	VIF0	DIR:to	GP:A
	DMAC_VIF1	VIF1	DIR:both	GP:C
	DMAC_GIF	GIF	DIR:to	GP:C
	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
	DMAC_TO_IPU	to IPU	DIR:to	GP:C
	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	すでに停止状態にある <BR>
    1	停止状態に移行 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>channel</I>のDMA終了割り込みを停止します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=DisableIntc / iDisableIntc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>DisableIntc / iDisableIntc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        INTC割り込み停止
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>DisableIntc</B>(
	int <I>cause</I>
);
int <B>iDisableIntc</B>(
	int <I>cause</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
	定数			割り込み要因
	INTC_GS		GS
	INTC_SBUS		SBUS
	INTC_VBLANK_S	V-blank start
	INTC_VBLANK_E	V-blank end
	INTC_VIF0		VIF0
	INTC_VIF1		VIF1
	INTC_VU0		VU0
	INTC_VU1		VU1
	INTC_IPU		IPU
	INTC_TIM0		Timer0
	INTC_TIM1		Timer1
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	すでに停止状態にある <BR>
    1	停止状態に移行 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>を要因とする割り込みを停止します。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=EI>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>EI
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        割り込み許可
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><B>EI</B>( void );
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    CPUの割り込み許可ビットを1にします。 <BR>
    割り込み許可ビットはスレッドのコンテクストに含まれません。 <BR>
    この機能は、細かい単位で割り込みを制御するため、たとえばVU0をマクロ命令で制御する場合などのために用意されたものです。実行権の制御にはスレッドの優先順位、排他制御にはセマフォを使用してください。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=EnableDmac / iEnableDmac>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>EnableDmac / iEnableDmac
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        DMA割り込み開始
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>EnableDmac</B>(
	int <I>channel</I>
);
int <B>iEnableDmac</B>(
	int <I>channel</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>channel</I>	チャネル番号
	定数		DMAチャネル
	DMAC_VIF0	VIF0	DIR:to	GP:A
	DMAC_VIF1	VIF1	DIR:both	GP:C
	DMAC_GIF	GIF	DIR:to	GP:C
	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
	DMAC_TO_IPU	to IPU	DIR:to	GP:C
	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
	DMAC_TO_SPR	to SPR	DIR:to	GP:C
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	すでに開始状態にある <BR>
    1	開始状態に移行 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>channel</I>のDMA終了割り込みを開始します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=EnableIntc / iEnableIntc>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>EnableIntc / iEnableIntc
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        INTC割り込み開始
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>EnableIntc</B>(
	int <I>cause</I>
);
int <B>iEnableIntc</B>(
	int <I>cause</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
	定数			割り込み要因
	INTC_GS		GS
	INTC_SBUS		SBUS
	INTC_VBLANK_S	V-blank start
	INTC_VBLANK_E	V-blank end
	INTC_VIF0		VIF0
	INTC_VIF1		VIF1
	INTC_VU0		VU0
	INTC_VU1		VU1
	INTC_IPU		IPU
	INTC_TIM0		Timer0
	INTC_TIM1		Timer1
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    0	すでに許可状態にある <BR>
    1	許可状態に移行 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>を要因とする割り込みを開始します。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ExitDeleteThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ExitDeleteThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        自スレッドの終了と削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>ExitDeleteThread</B>( void );
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドを終了し、さらに削除します。本システムコールは、呼び出し元に戻ることはないので返値はありません。 <BR>
<BR>
    スレッドが終了する際に、セマフォ等の資源を自動的に解放することはありません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ExitThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ExitThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        自スレッドの終了
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>ExitThread</B>( void );
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドを終了し、DORMANT状態に移行します。本システムコールは、呼び出し元に戻ることはないので返値はありません。 <BR>
<BR>
    スレッドが終了する際に、セマフォ等の資源を自動的に解放することはありません。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ExpandScratchPad>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ExpandScratchPad
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スクラッチパットの擬似的拡張
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ExpandScratchPad</B>(
	u_int	page
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>page		4Kbyteにアラインメントされた8Kbyteの連続したメモリ領域
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    TLB index	正常終了 <BR>
    -1		エラー終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スクラッチパッド(0x70000000 - 0x70003fff)の直後の論理アドレスに、引数pageで指定されるメモリ領域を cached 領域としてマップする。引数 page が 0 のとき、マップされている領域を解除する。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=FlushCache / iFlushCache>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>FlushCache / iFlushCache
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        キャッシュ掃き出し
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>FlushCache</B>(
	int <I>operation</I>
);
void <B>iFlushCache</B>(
	int <I>operation</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>operation   キャッシュに対する命令
            0x0 WRITEBACK_DCACHE :
                データキャッシュの内容をすべて書き戻す
            0x1 INVALIDATE_DCACHE :
                データキャッシュの内容をすべて無効にする
            0x2 INVALIDATE_ICACHE :
                命令キャッシュの内容をすべて無効にする
            0x3 INVALIDATE_CACHE :
                命令/データキャッシュの内容をすべて無効にする
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    キャッシュの掃き出し処理を行います。キャッシュの内容をメモリに書き戻すか、破棄するかを選ぶことができます。 <BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./ekrnl_rf.htm#SyncDCache">SyncDCache</a>(), <a href="./ekrnl_rf.htm#iSyncDCache">iSyncDCache</a>()
        </BLOCKQUOTE>
</blockquote>
<A name=GetCop0 / iGetCop0>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>GetCop0 / iGetCop0
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        COP0レジスタの取得
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>u_int <B>GetCop0</B>(
	int <I>id</I>
);
u_int <B>iGetCop0</B>(
	int <I>id</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>id</I>	レジスタ番号(0〜31)
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    レジスタ値	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    COP0の<I>id</I>番レジスタの値を参照します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=GetThreadId>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>GetThreadId
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        自スレッドIDの取得
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>GetThreadId</B>( void );
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドのスレッドIDを取得します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=InitThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>InitThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スレッドの初期化
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>InitThread </B>(void);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
    -1		初期化失敗 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スケジューリング用スレッドを生成し、そのスレッドIDを返します。 <BR>
    本システムコールを呼び出したスレッドの優先度 が 0 であれば、1 にします。スケジューリング用スレッドの優先度は 0 です。 <BR>
<BR>
    本関数は、iWakeupThread()ならびにiRotateThreadReadyQueue()が、正しくスケジューリングされない不具合に対応するために用意されたもので、両機能を使用しないプログラムは、呼び出す必要はありません。また、セマフォを1つ使用します。 <BR>
<BR>
    スケジューリング用スレッドはiWakeupThread()、iRotateThreadReadyQueue()が、呼び出されない限り起動することはありません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./ekrnl_rf.htm#iWakeupThread">iWakeupThread</a>(), <a href="./ekrnl_rf.htm#iRotateThreadReadyQueue">iRotateThreadReadyQueue</a>()
        </BLOCKQUOTE>
</blockquote>
<A name=Interrupt2Iop>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>Interrupt2Iop
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        IOPへの割り込み
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>Interrupt2Iop</B>(
	int <I>cause</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>	正常終了 <BR>
    -1	エラー終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    IOPに対して<I>cause</I>を要因とする割り込みをかけます。<I>cause</I>には、ユーザー定義の0から15までの値を指定することができます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=InvalidDCache / iInvalidDCache>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>InvalidDCache / iInvalidDCache
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        キャッシュ無効化
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>InvalidDCache</B>(
	void *<I>begin</I>,
	void *<I>end</I>
);
void <B>iInvalidDCache</B>(
	void *<I>begin</I>,
	void *<I>end</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>begin</I>	先頭アドレス
<I>end</I>	後尾アドレス
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    論理アドレス<I>begin</I>から<I>end</I>までのメモリの内容がD-cache上に存在すれば、cache上の値を無効化します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ReferSemaStatus / iReferSemaStatus>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ReferSemaStatus / iReferSemaStatus
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        セマフォ状態の取得
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ReferSemaStatus</B>(
	int <I>sid</I>,
	SemaParam *<I>sema</I>
);
int <B>iReferSemaStatus</B>(
	int <I>sid</I>,
	SemaParam *<I>sema</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>sid</I>	参照するセマフォIDを指定する。
<I>sema</I>	セマフォの状態を受け取る構造体変数へのポインタを指定する。
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォID		正常終了 <BR>
<BR>
    <I>sema</I>-&gt;currentCount	セマフォ現在値 <BR>
    <I>sema</I>-&gt;initCount		セマフォの初期値 <BR>
    <I>sema</I>-&gt;maxCount		セマフォの最大値 <BR>
    <I>sema</I>-&gt;numWaitThreads	セマフォ待ちスレッド数 <BR>
    <I>sema</I>-&gt;option	セマフォに関する付加情報。この値は、CreateSema()で設定されたもの。 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>sid</I>セマフォの状態を参照します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ReferThreadStatus / iReferThreadStatus>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ReferThreadStatus / iReferThreadStatus
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スレッド状態の取得
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ReferThreadStatus</B>(
	int <I>tid</I>,
	ThreadParam *<I>info</I>
);
int <B>iReferThreadStatus</B>(
	int <I>tid</I>,
	ThreadParam *<I>info</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	参照するスレッドIDを指定する。
<I>info</I>	スレッドの状態を受け取る構造体変数へのポインタを指定する。
	戻り値のみ必要な場合はNULLを指定する。
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッド状態を表す定数	正常終了 <BR>
<BR>
    <I>info</I>-&gt;currentPriority	スレッドの現在の優先度 <BR>
    <I>info</I>-&gt;status		スレッドの状態を以下の定数で表す <BR>
<BR>
    <blockquote>
    	0x01 THS_RUN			RUN状態 <BR>
    </blockquote>
    <blockquote>
    	0x02 THS_READY		READY状態 <BR>
    </blockquote>
    <blockquote>
    	0x04 THS_WAIT			WAIT状態 <BR>
    </blockquote>
    <blockquote>
    	0x08 THS_SUSPEND		SUSPEND状態 <BR>
    </blockquote>
    <blockquote>
    	0x0c THS_WAITSUSPEND	WAIT-SUSPEND状態 <BR>
    </blockquote>
    <blockquote>
    	0x10 THS_DORMANT		DORMANT状態 <BR>
    </blockquote>
<BR>
    <I>info</I>-&gt;option	スレッドに関する付加情報。この値は、CreateThread()で設定されたもの。 <BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドの状態を参照します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    このシステムコールはデバッグのために用意されています。デバッグ以外の目的で使用するのは推奨しません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ReleaseAlarm / iReleaseAlarm>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ReleaseAlarm / iReleaseAlarm
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        アラームの解除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ReleaseAlarm</B>(
	int <I>id</I>
);
int <B>iReleaseAlarm</B>(
	int <I>id</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>id</I>	解除するアラームのID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    アラーム設定後の経過時間 (Hsync count) <BR>
    解除に失敗した場合は-1 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    アラームを解除します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ReleaseWaitThread / iReleaseWaitThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ReleaseWaitThread / iReleaseWaitThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        WAIT状態にあるスレッドの強制解除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ReleaseWaitThread</B>(
	int <I>tid</I>
);
int <B>iReleaseWaitThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	スレッドID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    WAIT状態にある<I>tid</I>スレッドを強制解除します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=RemoveDmacHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>RemoveDmacHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        DMA割り込みハンドラの削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>RemoveDmacHandler</B>(
	int <I>channel</I>,
	int <I>hid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>channel</I>	チャネル番号
	定数			DMAチャネル
	定数			DMAチャネル
	DMAC_VIF0	VIF0	DIR:to	GP:A
	DMAC_VIF1	VIF1	DIR:both	GP:C
	DMAC_GIF	GIF	DIR:to	GP:C
	DMAC_FROM_IPU	from IPU	DIR:from	GP:C
	DMAC_TO_IPU	to IPU	DIR:to	GP:C
	DMAC_FROM_SPR	from SPR	DIR:from	GP:C
	DMAC_TO_SPR	to SPR	DIR:to	GP:C
<I>hid</I>	ハンドラID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ハンドラ登録数	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>channel</I>のDMA割り込みハンドラから、<I>hid</I>ハンドラを削除します。<I>hid</I>ハンドラが登録されていない場合はエラーを返します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=RemoveIntcHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>RemoveIntcHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        割り込みハンドラの削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>RemoveIntcHandler</B>(
	int <I>cause</I>,
	int <I>hid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
	定数			割り込み要因
	INTC_GS		GS
	INTC_SBUS		SBUS
	INTC_VBLANK_S	V-blank start
	INTC_VBLANK_E	V-blank end
	INTC_VIF0		VIF0
	INTC_VIF1		VIF1
	INTC_VU0		VU0
	INTC_VU1		VU1
	INTC_IPU		IPU
	INTC_TIM0		Timer0
	INTC_TIM1		Timer1
<I>hid</I>	ハンドラID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ハンドラ登録数	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>を要因とする割り込みハンドラから、<I>hid</I>ハンドラを削除します。<I>hid</I>ハンドラが登録されていない場合はエラーを返します。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=RemoveSbusIntcHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>RemoveSbusIntcHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        SBUS割り込みハンドラの削除
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>RemoveSbusIntcHandler</B>(
	int <I>cause</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>cause</I>	割り込み要因
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>	正常終了 <BR>
    -1	エラー終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>cause</I>を要因とするSBUS割り込みハンドラを削除します。ハンドラが登録されていない場合はエラーを返します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=ResumeThread / iResumeThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>ResumeThread / iResumeThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        SUSPEND状態からREADY状態への移行
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>ResumeThread</B>(
	int <I>tid</I>
);
int <B>iResumeThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	スレッドID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    SUSPEND状態にある<I>tid</I>スレッドをREADY状態にします。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドを指定することはできません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=RotateThreadReadyQueue / iRotateThreadReadyQueue>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>RotateThreadReadyQueue / iRotateThreadReadyQueue
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        レディーキューの回転
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>RotateThreadReadyQueue</B>(
	int <I>prio</I>
);
int <B>iRotateThreadReadyQueue</B>(
	int <I>prio</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>prio</I>	操作したいキューの優先度
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    優先度		正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    優先度<I>prio</I>のレディーキューを回転します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドスケジューリングの不具合を回避するため制限事項です。 <BR>
        </BLOCKQUOTE>
<UL>
         <LI> iRotateThreadReadyQueue() を呼び出す前にInitThread()を呼び出す
         <LI> 全てのスレッドの優先度を 1-127 の範囲に設定する。
</UL>
        <BLOCKQUOTE>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./ekrnl_rf.htm#InitThread">InitThread</a>()
        </BLOCKQUOTE>
</blockquote>
<A name=SetAlarm / iSetAlarm>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SetAlarm / iSetAlarm
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        アラームの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>SetAlarm</B>(
	u_short <I>time</I>,
	void *<I>cbfunc</I>(int, u_short, void *),
	void *<I>arg</I>
);
int <B>iSetAlarm</B>(
	u_short <I>time</I>,
	void *<I>cbfunc</I>(int, u_short, void *),
	void *<I>arg</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>time</I>	時間(Hsync単位)
<I>cbfunc</I>	コールバック関数のアドレス
	void <I>cbfunc</I>(int <I>id</I>, u_short <I>time</I>, void *<I>arg</I>)
		<I>id</I>	: アラームID
		<I>time</I>	: タイムアウト時のHsync count
		<I>arg</I>	: SetAlarmの第3引数
<I>arg</I>	<I>cbfunc</I>に渡す引数
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セットしたアラームのID <BR>
    アラームをセットできなかった場合は-1 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    SetAlarm()を呼び出してから<I>time</I>時間内にReleaseAlarm()が呼ばれない場合、<I>cbfunc</I>が呼び出されます（この時点でそのアラームは解除されます）。同時に設定できるアラームは64個以内です。 <BR>
    なお、HSync Timerはカーネルで1本リザーブしています(TIMER 3)。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=SetDebugHandler>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SetDebugHandler
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        例外ハンドラの設定
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void *<B>SetDebugHandler</B>(
	int <I>code</I>,
	int (*<I>handler</I>)(u_int <I>stat</I>, u_int <I>cause</I>, u_int <I>epc</I>, u_int <I>bva</I>, u_int <I>bpa</I>,
		 u_long128 *<I>gpr</I>)
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>code</I>	例外番号
	1	TLB変更例外
	2	TLB不一致例外（ロードまたは命令フェッチ）
	3	TLB不一致例外（ストア）
	4	アドレスエラー例外（ロードまたは命令フェッチ）
	5	アドレスエラー例外（ストア）
	6	バスエラー例外（命令フェッチ）
	7	バスエラー例外（データロードまたはストア）
	8	システムコール例外
	9	ブレークポイント例外
	10	予約命令例外
	11	コプロセッサ不使用例外
	12	算術オーバーフロー例外
	13	Trap例外
<I>handler</I>	ハンドラ関数
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    以前に登録されていたハンドラのアドレス	正常終了 <BR>
    -1					エラー終了 <BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    CPUの例外が発生した場合に呼び出される例外ハンドラを設定します。呼び出されたハンドラから復帰することはできません。 <BR>
    <I>code</I>は例外番号、<I>handler</I>は例外発生時に呼び出されるハンドラのアドレスで、<I>handler</I>の引数は例外発生時の状態を表します。引数<I>stat</I>はCOP0のstatusレジスタ、引数<I>cause</I>はCOP0のcauseレジスタ、引数<I>epc</I>は例外が発生したプログラムカウンタ値、引数<I>bva</I>はメモリアクセスや分岐アドレス不正時の論理アドレス値、引数<I>bpa</I>はバスエラー時の物理アドレス値、引数<I>gpr</I>はサイズが32個の配列でGPRの値です。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    この関数はデバッグ用の機能です。例外が起きたときに例外の内容を画面に表示する場合などに使用してください。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=SignalSema / iSignalSema>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SignalSema / iSignalSema
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        セマフォ資源返却
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>SignalSema</B>(
	int <I>sid</I>
);
int <B>iSignalSema</B>(
	int <I>sid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>sid</I>	セマフォID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォ資源を返却します。 <BR>
<BR>
    <I>sid</I>セマフォの値が0でセマフォ待ちキューが空でない場合は、セマフォ待ちキューの先頭のスレッドを解除しREADY状態にします。それ以外の場合、セマフォの値をインクリメントします。 <BR>
    正常終了の場合はセマフォIDを、無効な<I>sid</I>を指定した場合はTHREAD_ERRORを返します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=SleepThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SleepThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        WAIT状態への移行
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>SleepThread</B>( void );
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>なし
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドをWAIT状態にします。ただし起床要求回数が1以上の場合は、それをデクリメントするのみで、スレッドの状態は変化しません。 <BR>
    WAIT状態のスレッドはWakeupThread()またはReleaseWaitThread()によって、WAIT解除されます。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=StartThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>StartThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        スレッドの起動
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>StartThread</B>(
	int <I>tid</I>,
	void *<I>arg</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	起動するスレッドのID
<I>arg</I>	引数
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドを起動し、スタックの初期化を行います。対象とするスレッドはDORMANT状態でなければなりません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=SuspendThread / iSuspendThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SuspendThread / iSuspendThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        SUSPEND状態への移行
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>SuspendThread</B>(
	int <I>tid</I>
);
int <B>iSuspendThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	スレッドID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドをSUSPEND状態に移し、スレッドの実行を中断します。 <BR>
    SUSPEND状態は、ResumeThread()システムコールによって解除されます。 <BR>
    SuspendThread(), ResumeThread()による状態遷移は以下のとおりです。 <BR>
<BR>
        </BLOCKQUOTE>
<UL>
         <LI> 対象スレッドが既にWAIT状態にあった場合は、WAIT状態とSUSPEND状態が複合したWAIT-SUSPEND状態になる。
         <LI> WAIT-SUSPEND状態のときWAIT解除の条件が満たされた場合は、SUSPEND状態に移行する。
         <LI> WAIT-SUSPEND状態のスレッドに対してResumeThread()が発行された場合はWAIT状態に戻る。
</UL>
        <BLOCKQUOTE>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    SUSPEND状態は、他スレッドの発行したシステムコールによる中断状態を意味するものであり、本システムコールで自スレッドを指定することはできません。 <BR>
<BR>
    本システムコールは、主にデバッグ用途に使用されることを想定しています。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=SyncDCache / iSyncDCache>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>SyncDCache / iSyncDCache
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        キャッシュ掃き出し
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>SyncDCache</B>(
	void *<I>begin</I>,
	void *<I>end</I>
);
void <B>iSyncDCache</B>(
	void *<I>begin</I>,
	void *<I>end</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>begin</I>	先頭アドレス
<I>end</I>	後尾アドレス
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    論理アドレス<I>begin</I>から<I>end</I>までのメモリの内容がD-cache上に存在すれば、cache上の値をメモリに書き戻します。 <BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./ekrnl_rf.htm#FlushCache">FlushCache</a>(), <a href="./ekrnl_rf.htm#iFlushCache">iFlushCache</a>()
        </BLOCKQUOTE>
</blockquote>
<A name=TerminateThread / iTerminateThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>TerminateThread / iTerminateThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        他スレッドの強制終了
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>TerminateThread</B>(
	int <I>tid</I>
);
int <B>iTerminateThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	強制終了させるスレッドのID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>tid</I>スレッドを強制終了し、DORMANT状態に移行させます。終了が成功すれば<I>tid</I>を返します。 <BR>
<BR>
    対象スレッドがREADY状態ではなくWAIT状態やSUSPEND状態であっても、待ちを解除し終了します。すでにDORMANT状態の場合はエラーになります。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    自スレッドは終了できません。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=WaitSema / PollSema / iPollSema>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>WaitSema / PollSema / iPollSema
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        セマフォ資源獲得
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>WaitSema</B>(
	int <I>sid</I>
);
int <B>PollSema</B>(
	int <I>sid</I>
);
int <B>iPollSema</B>(
	int <I>sid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>sid</I>	セマフォID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    セマフォID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>sid</I>セマフォの値が1より大きい場合、セマフォの値をデクリメントし、ただちに正常終了します。セマフォの値がゼロの場合、別のスレッドがSignalSema()を発行してセマフォの値がインクリメントされるまでWAIT状態になり、そのセマフォの待ちキューにつながれます。 <BR>
    PollSema()システムコールは、WaitSema()からWAIT状態に入る機能を取り除いたシステムコールで、WaitSema()と異なり対象セマフォの値が0の場合エラーを返します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>
<A name=WakeupThread / iWakeupThread>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>WakeupThread / iWakeupThread
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        WAIT状態にあるスレッドのWAKEUP
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>int <B>WakeupThread</B>(
	int <I>tid</I>
);
int <B>iWakeupThread</B>(
	int <I>tid</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>tid</I>	スレッドID
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドID	正常終了 <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    WAIT状態にある<I>tid</I>スレッドをREADY状態にします。対象スレッドがWAIT状態でない場合は起床要求回数がカウントアップされ、次にそのスレッドがSleepThread()を呼び出してもWAIT状態には移らないようになります。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    スレッドスケジューリングの不具合を回避するため制限事項です。 <BR>
        </BLOCKQUOTE>
<UL>
         <LI> iWakeupThread()を呼び出す前にInitThread()を呼び出す
         <LI> 全てのスレッドの優先度を 1-127 の範囲に設定する。
</UL>
        <BLOCKQUOTE>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 関連項目 -->
<B>関連項目</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <a href="./ekrnl_rf.htm#InitThread">InitThread</a>()
<DIV align="center">
        </BLOCKQUOTE>
</DIV>
</blockquote>
<HR border=1 width=100%><BR><BR>
<DIV align=center>
<U><H2>プログラムの起動/終了関数</H2></U>
</DIV>
</blockquote>
<A name=LoadExecPS2>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>LoadExecPS2
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        プログラムの起動
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>LoadExecPS2</B>(
	char *<I>file</I>,
	int <I>n</I>,
	char **<I>args</I>);
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>file</I>	ファイル名
<I>n</I>	引数の個数 (<I>n</I> &lt;= 15)
<I>args</I>	引数の配列
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    <I>file</I>で指定されたプログラムを起動します。 <BR>
    起動されたプログラムのmain関数の引数にはファイル名も含まれます。 <BR>
<BR>
    プログラム例) <BR>
    <blockquote>
    	char *args[] = { "arg1", "arg2" }; <BR>
    </blockquote>
    <blockquote>
    	LoadExecPS2("cdrom0:\\program.elf", 2, args); <BR>
    </blockquote>
<BR>
    上記のコードの場合、起動されるプログラムのmain関数に渡される引数は <BR>
    <blockquote>
    	argc = 3 <BR>
    </blockquote>
    <blockquote>
    	argv = { "cdrom0:\\program.elf", "arg1", "arg2" } <BR>
    </blockquote>
    となります。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    ファイル名とすべての引数の文字列を合わせて256バイト以下でなければなりません。 <BR>
        </BLOCKQUOTE>
</blockquote>
<A name=Exit>
<HR NOSHADE SIZE="8">
<!-- 関数名 -->
<TABLE border=0 width=100% cellspacing=0 cellpadding=0><TR><TD valign=bottom>
<H1>Exit
</TD><TD align=right valign=bottom><A HREF=#top><IMG src=gif/link.gif border=0></A>
</TD></TR>
<TR><TD colspan=2 bgcolor=#336699><IMG src=gif/spacer.gif></TD></TR></TABLE>
<!-- 関数説明 -->
<DIV ALIGN="right">
        プログラムの終了
</DIV><P>

<!-- 形式 -->
<B>形式</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE>void <B>Exit</B>(
	int <I>n</I>
);
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 引数 -->
<B>引数</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
<PRE><I>n</I>	プログラムの実行環境(現時点ではデバッガ）に渡す終了コード
        </BLOCKQUOTE>
</PRE>
</blockquote>

<!-- 返り値 -->
<B>返り値</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    なし <BR>
<BR>
        </BLOCKQUOTE>
</PRE>
</PRE>
</blockquote>

<!-- 解説 -->
<B>解説</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    プログラムを終了します。 <BR>
<BR>
        </BLOCKQUOTE>
</blockquote>

<!-- 備考 -->
<B>備考</B>
<HR NOSHADE ALIGN="left" SIZE=2 WIDTH=20%>
<blockquote>
        <BLOCKQUOTE>
    この関数はあくまでデバッグ用です。マスターディスクに含まれるプログラムでは、一切使用を禁止します。 <BR>
</BLOCKQUOTE>
</blockquote>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A>
<HR>
<DIV ALIGN="right">
    Copyright (c) 2000 Sony Computer Entertainment Inc.  All Rights Reserved.<BR>
    SCEI CONFIDENTIAL
</DIV>
</BODY>
</HTML>
