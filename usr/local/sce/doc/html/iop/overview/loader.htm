<HTML>
<HEAD>
<TITLE> IOP module loader specification</TITLE>
<META HTTP-EQUIV=Content-Type CONTENT="text/html; charset=Shift_JIS">
</HEAD>
<BODY BGCOLOR=#ffffff TEXT=#000000 LINK=#0000ff ALINK=#ffff00 VLINK=#800080>
<TABLE WIDTH="100%">
<TR><TD>
<H4>"PlayStation 2" Programmer Tool Runtime Library Release 2.0</H4>
</TD><TD ALIGN="right">
<FORM><SELECT NAME=list onchange=location.href=this.form.list.options[this.form.list.selectedIndex].value><OPTION VALUE="loader.htm" SELECTED> IOPプログラムローダ
<OPTION VALUE="../../index.htm">TOP MENU
<OPTION VALUE="../../general/index.htm">EE/IOP共通文書
<OPTION VALUE="../../ee/overview/index.htm">EE Overview
<OPTION VALUE="../../ee/libref/index.htm">EE Library Reference
<OPTION VALUE="../../iop/overview/index.htm">IOP Overview
<OPTION VALUE="../../iop/libref/index.htm">IOP Library Reference
<OPTION VALUE="../../deci2/index.htm">DECI2
<OPTION VALUE="../../tool/index.htm">各種ツール
<OPTION VALUE="../../pdadoc/pda/index.htm">PDA関連
</SELECT>
</FORM>
</TD></TR></TABLE>
<HR NOSHADE SIZE=8>
<A NAME=Heading2>
<H1>
IOP module loader specification<BR>
</H1>
</A>
<DIV align=center>
<TABLE border=0 bgcolor=#D6E0BA width=90%><TR><TD>
<H2><U>
        <B>目次</B>
</U></H2>

<blockquote>
<UL>
<P><A HREF="#Heading3_1">  1 概要<BR></A>
<P><A HREF="#Heading3_2">  2 モジュールの構造<BR></A>
    <UL>
    <A HREF="#Heading4_2_1"> セグメントの配置<BR></A><BR>
    <A HREF="#Heading4_2_2"> モジュールID<BR></A><BR>
    <A HREF="#Heading4_2_3"> モジュール名とモジュールバージョン<BR></A><BR>
    </UL>
<P><A HREF="#Heading3_3">  3 モジュール間のリンクの仕組み<BR></A>
    <UL>
    <A HREF="#Heading4_3_1"> エントリテーブル構造体<BR></A><BR>
    <A HREF="#Heading4_3_2"> 予約エントリ<BR></A><BR>
    <A HREF="#Heading4_3_3"> 呼び出しテーブル構造体<BR></A><BR>
    <A HREF="#Heading4_3_4"> ilbファイルフォーマット<BR></A><BR>
    <A HREF="#Heading4_3_5"> リンク時の互換性チェック<BR></A><BR>
    </UL>
<P><A HREF="#Heading3_4">  4 モジュールのロードと起動の手順<BR></A>
    <UL>
    <A HREF="#Heading4_4_1"> モジュールのロード<BR></A><BR>
    <A HREF="#Heading4_4_2"> モジュールの起動<BR></A><BR>
    </UL>
<P><A HREF="#Heading3_5">  5 IOPオブジェクトフォーマット<BR></A>
    <UL>
    <A HREF="#Heading4_5_1"> IOPモジュール情報セクション<BR></A><BR>
    <A HREF="#Heading4_5_2"> ファイル中のデータレイアウト<BR></A><BR>
    <A HREF="#Heading4_5_3"> メモリ中のデータレイアウト<BR></A><BR>
    <A HREF="#Heading4_5_4"> ELFヘッダの詳細<BR></A><BR>
    <A HREF="#Heading4_5_5"> プログラムヘッダテーブルの詳細<BR></A><BR>
    <A HREF="#Heading4_5_6"> 予約シンボル<BR></A><BR>
    <A HREF="#Heading4_5_7"> シンボルテーブルエントリ<BR></A><BR>
    <A HREF="#Heading4_5_8"> リロケーションテーブルエントリ<BR></A><BR>
    <A HREF="#Heading4_5_9"> デバッグ情報<BR></A><BR>
    </UL>
</UL>
</blockquote>
</TD></TR></TABLE>
</DIV>
<DIV align=center>

<!-- 見出し 2,章見出し -->
<A NAME="Heading2">
</DIV>

<!-- 見出し 3,節見出し -->
<A NAME="Heading3_1">
<H2>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A> 1 <B>概要</B>
<HR NOSHADE>
</H2>
</A>

<blockquote>
    このドキュメントでは、IOPプログラムローダの動作と扱うデータの構造について説明します。<BR>
    IOPのメモリ上には複数のプログラムをロードすることが可能です。<BR>
    <BR>
    メモリ上にロードされた一つのプログラムをプログラムモジュール、あるいは単にモジュールと呼びます。<BR>
    プログラムモジュールは、ROM、CD-ROM/DVD-ROM上にリロケータブルなオブジェクトファイルとして格納され、メモリへのロード時にリロケーションされます。<BR>
    IOPオブジェクトファイルは通常 '.irx'の拡張子をもち、IRXファイルと呼ばれることもあります。<BR>
    <BR>
    モジュールは起動エントリをひとつ持ちます。モジュールのロード直後に起動エントリが呼び出され、その戻り値によってモジュールがメモリに常駐するか否かが決定されます。<BR>
    またロードされたモジュールは、他のモジュールからサブルーチンとして呼び出される複数のエントリを持つことが可能です。このように他のモジュールから呼び出されるサブルーチンエントリを持つモジュールを特に常駐ライブラリと呼ぶことがあります。<BR>
    <BR>
    IOPプログラムローダは、CD-ROM/DVD-ROM, ROM等のファイルからプログラムモジュールのロード/リロケートとメモリ上でのモジュールの管理を行います。<BR>
    <BR>
</blockquote>

<!-- 見出し 3,節見出し -->
<A NAME="Heading3_2">
<H2>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A> 2 <B>モジュールの構造</B>
<HR NOSHADE>
</H2>
</A>

<blockquote>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_2_1">
<A HREF="#Heading3_2"> 2. </A>1 <B>セグメントの配置</B>
</A>
</H3>
<blockquote>
    IOPのメモリ上では一つのモジュールは以下の３つのセグメントからなり、各セグメントは下図の順で連続して配置され、それぞれのサイズは16byteの倍数でなければなりません。<BR>
    <BR>
      <BLOCKQUOTE>
      TEXT segment	--  プログラムコード（必須）<BR>
      インストラクションコードと後述のエントリテーブル構造体と呼び出しテーブル構造体が含まれます。<BR>
      それ以外のデータは入るべきではありません。<BR>
      DATA segment	--  初期値つきデータ（無い場合もある）<BR>
      BSS segment	--  初期値無しデータエリア（無い場合もある）<BR>
      </BLOCKQUOTE>
    <BR>
<P>
<IMG SRC ="gif/loadn1.gif">
<P>
    <BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_2_2">
<A HREF="#Heading3_2"> 2. </A>2 <B>モジュールID</B>
</A>
</H3>
<blockquote>
    メモリ上にロードされたモジュールには識別用のID番号が割り当てられます。<BR>
    このID番号をモジュールIDと呼びます。<BR>
    <BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_2_3">
<A HREF="#Heading3_2"> 2. </A>3 <B>モジュール名とモジュールバージョン</B>
</A>
</H3>
<blockquote>
    モジュールには、モジュール名とモジュールバージョンをつけることができます。<BR>
    モジュールのソースプログラム中で、以下のように宣言します。<BR>
    <BR>
      <BLOCKQUOTE>
      ModuleInfo Module = {"Module_name", バージョン番号 };<BR>
      </BLOCKQUOTE>
    <BR>
    グローバル変数名Moduleはモジュール名とモジュールバージョンを指定する用途の為に予約されています。<BR>
    ModuleInfo構造体は、このようになっています。<BR>
    <BR>
      <BLOCKQUOTE>
      typedef struct _moduleinfo {<BR>
      char		*name;<BR>
      unsigned short	version;<BR>
      } ModuleInfo;<BR>
      </BLOCKQUOTE>
    <BR>
    nameフィールドは、モジュールの名称を指定します。<BR>
    名称に使用する文字は、英数字、'_'、'/' だけを使用することを推奨します。<BR>
    <BR>
    versionフィールドの上位8bitは、モジュールのメジャーバージョンを設定し、下位8bitは、マイナーバージョンを設定します。<BR>
    メジャーバージョン、マイナーバージョンとも、1以上の値を用います。<BR>
    0は使用しないでください。<BR>
    <BR>
    モジュール名とモジュールバージョンは、主に以下の用途で使用されます。<BR>
    <BR>
<UL>
         <LI> システムブート時にブートローダがリプレースモジュールを検知するため<BR>
         <LI> プログラマがデバッグ中のモジュールのロードアドレスを把握するため<BR>
         <LI> デバッガがブート済のモジュールとディスク上のオブジェクトファイルの同一性を確認するため<BR>
</UL>
    <BR>
    ただし、IOPプログラムローダはモジュール名とモジュールバージョンがついていないプログラムでも問題なくロードし実行することができます。<BR>
    <BR>
    注意： プログラムローダがモジュール名とモジュールバージョンを利用して同一モジュールの複数回ロードを禁止するような処理はしていません。<BR>
    この動作は今後も変更する予定はありません。<BR>
</blockquote>

<!-- 見出し 3,節見出し -->
<A NAME="Heading3_3">
<H2>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A> 3 <B>モジュール間のリンクの仕組み</B>
<HR NOSHADE>
</H2>
</A>

<blockquote>
    IOPプログラムローダはモジュールのロード時に該当モジュールが他のロード済モジュール（常駐ライブラリ）を呼び出しているかどうかを検査し、必要な場合他のモジュールとのリンクを行います。<BR>
    このリンク機能は以下に述べる二つの構造体を操作することで行われます。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_3_1">
<A HREF="#Heading3_3"> 3. </A>1 <B>エントリテーブル構造体</B>
</A>
</H3>
<blockquote>
    常駐ライブラリモジュールは、他のモジュールに提供するひとまとまりの関数群をライブラリとしてシステムに登録することができます。<BR>
    ひとまとまりの関数群は以下のエントリテーブル構造体で記述され、モジュールの起動時にモジュール自身によってプログラムローダのAPI RegisterLibraryEntries()を使用してシステムに登録します。<BR>
    ひとつのモジュールが登録できるエントリテーブル構造体の数に制限はありません。つまり、ひとつのモジュールが複数のライブラリを登録することができます。<BR>
    <BR>
      <BLOCKQUOTE>
      	.text<BR>
      	.set noreorder<BR>
      	.globl  mylib_entry<BR>
      </BLOCKQUOTE>
    mylib_entry:<BR>
      <BLOCKQUOTE>
      	.word  0x41c00000	/* magic number of entry table */<BR>
      	.word  0			/* reserved */<BR>
      	.short  0x0101		/* version */<BR>
      	.short  0x0000		/* flags */<BR>
      	.ascii  "mylib\0\0\0"	/* library name (max 8 characters) */<BR>
      	.align  2<BR>
      <BR>
      	.word		MylibEntry1	/* address of function 1 */<BR>
      	.word		MylibEntry2	/* address of function 2 */<BR>
      	.word		MylibEntry3	/* address of function 3 */<BR>
      	.word		MylibEntry4	/* address of function 4 */<BR>
      	:<BR>
      	:<BR>
      	.word  0		/* table end mark */<BR>
      </BLOCKQUOTE>
    <BR>
    後述の予約エントリの規定により、エントリ関数は４つ以上登録されていなければなりません。<BR>
    <BR>
    エントリテーブル構造体は、通常loplibgenユーティリティなどで生成します。<BR>
    「sce/doc/iop/tool/compile.htm」を参照してください。<BR>
    (上記中 'flags' のフィールドは、現在は、IOPシステムがエントリテーブルの管理の為に使用するフィールドです。かならず0を入れてください。)<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_3_2">
<A HREF="#Heading3_3"> 3. </A>2 <B>予約エントリ</B>
</A>
</H3>
<blockquote>
    エントリテーブル構造体に登録されている関数は実行時にはテーブル内の順番（インデックス）によって識別されます。<BR>
    原則としては、関数名とテーブル内のインデックスの対応はプログラミング時にプログラマが自由に決めて構いません。<BR>
    しかし、システムサービスの管理上の都合で最初の４つのエントリは関数名に関わらず、以下のように役割が固定されています。<BR>
    <BR>
<DIV align="center">
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>インデックス</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>関数の機能</B></TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>0</DIV></TD>
<TD valign="TOP">ライブラリの初期処理用に予約（詳細未定）</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>1</DIV></TD>
<TD valign="TOP">ライブラリの再初期化処理用に予約（詳細未定）</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>2</DIV></TD>
<TD valign="TOP">ライブラリの終了処理</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>3</DIV></TD>
<TD valign="TOP">予約（詳細未定）</TD>
</TR>
</TABLE>
</DIV><BR>
    <BR>
    この４つのエントリは、該当する関数がある場合にはその関数を登録し、無い場合には、何もせずに単にリターンする関数を登録しなければなりません。<BR>
    <BR>
    ライブラリの終了処理関数は、以下のprototypeを持ちます。<BR>
    <BR>
    	void  lib_terminate(int mode);<BR>
    <BR>
    引数modeにより、終了処理関数を呼ぶ原因が指定されます。<BR>
    <BR>
<DIV align="center">
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>mode</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>原因</B></TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>0</DIV></TD>
<TD valign="TOP">システム終了（reboot準備）</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>1</DIV></TD>
<TD valign="TOP">モジュール削除（現在未実装、予約）</TD>
</TR>
</TABLE>
</DIV><BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_3_3">
<A HREF="#Heading3_3"> 3. </A>3 <B>呼び出しテーブル構造体</B>
</A>
</H3>
<blockquote>
    常駐ライブラリモジュールが提供する関数群を使用するモジュールは以下の形式の呼び出しテーブル構造体をリンクします。<BR>
    エントリテーブル構造体と異なり、自モジュールが必要とする関数だけをテーブルに含みます。<BR>
    IOPプログラムローダは、モジュールのロード直後に呼び出しテーブル構造体中のjump命令を書き換えてモジュール間のリンクを行います。<BR>
    <BR>
      <BLOCKQUOTE>
      	.text<BR>
      	.set noreorder<BR>
      	.globl  mylib_stub<BR>
      </BLOCKQUOTE>
    mylib_stub:<BR>
      <BLOCKQUOTE>
      	.word  0x41e00000	/* magic number of call table */<BR>
      	.word  0			/* reserved */<BR>
      	.short  0x0101		/* version */<BR>
      	.short  0x0000		/* flags */<BR>
      	.ascii  "mylib\0\0\0"	/* library name (max 8 characters) */<BR>
      	.align  2<BR>
      <BR>
      	.globl          MylibEntry1<BR>
      </BLOCKQUOTE>
    MylibEntry1:<BR>
      <BLOCKQUOTE>
      	j      $31<BR>
      	.half   0		/* entry table index */<BR>
      	.half   0x2400	/* index magic : 0x2400XXXX == addiu $0,$0,XXXX */<BR>
      <BR>
      	.globl		MylibEntry2<BR>
      </BLOCKQUOTE>
    MylibEntry2:<BR>
      <BLOCKQUOTE>
      	j      $31<BR>
      	.half   2		/* entry table index */<BR>
      	.half   0x2400	/* index magic */<BR>
      	:<BR>
      	:<BR>
      	:<BR>
      	.word   0, 0	/* table end mark */<BR>
      </BLOCKQUOTE>
    <BR>
    呼び出し関数エントリを一つも含まない呼び出しテーブル構造体は許されません。<BR>
    <BR>
    呼び出しテーブル構造体は、通常loplibldユーティリティなどで自動生成します。<BR>
    「sce/doc/iop/tool/compile.htm」を参照してください。<BR>
    (上記中 'flags' のフィールドは、現在は、IOPシステムが呼び出しテーブルの管理の為に使用するフィールドです。かならず0を入れてください。)<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_3_4">
<A HREF="#Heading3_3"> 3. </A>4 <B>ilbファイルフォーマット</B>
</A>
</H3>
<blockquote>
    常駐ライブラリを作成した場合、ライブラリ名とライブラリバージョン、およびライブラリ中の各関数の名前とテーブルインデックスの対応を記述したデータファイル（ilbファイル）を作成する必要があります。<BR>
    このファイルはライブラリを利用する側のモジュールのリンク時に、呼び出しテーブル構造体を作成するための情報として利用されます。<BR>
    <BR>
    このデータファイルの形式は、以下の様に桁固定形式のテキストファイルとし、データファイルの拡張子は '.ilb' とすることにします。<BR>
    <BR>
      <BLOCKQUOTE>
      #IOP-ILB# 任意の文字列<BR>
      L ライブラリ名<BR>
      V 0xHHHH<BR>
      F 0xHHHH<BR>
      E ddd entryname<BR>
      E ddd entryname<BR>
      E ddd entryname<BR>
      </BLOCKQUOTE>
    <BR>
    最初の '#IOP-ILB#'で始まる行は続くテキスト行がilb-data形式であることを宣言します。<BR>
    'L' で始まる行は必ず2行目に位置し,3桁目から行末まで8文字以内のライブラリ名<BR>
    'V' で始まる行は必ず3行目に位置し,5桁目から4桁の16進数<BR>
    'F' で始まる行は必ず4行目に位置し,5桁目から4桁の16進数で0を指定します。<BR>
    5行目以降は'E'で始まり3桁目から3桁の10進数と、7桁目から行末までのエントリ名<BR>
    <BR>
    複数のilb-data形式を結合して一つのファイルに格納して良いものとします。<BR>
    その場合は '#IOP-ILB#'を区切り記号とみなします。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_3_5">
<A HREF="#Heading3_3"> 3. </A>5 <B>リンク時の互換性チェック</B>
</A>
</H3>
<blockquote>
    前述のようにエントリテーブル構造体と呼び出しテーブル構造体にはlibrary nameフィールドとversionフィールドがあります。<BR>
    library nameフィールドは8byteのサイズを持ち、8byteに満たない名前の場合はnull文字でパディングしてください。<BR>
    versionフィールドの上位8bitは、ライブラリのメジャーバージョンを設定し、下位8bitは、マイナーバージョンを設定します。<BR>
    versionフィールドの設定は、基本的にはプログラマに任されていますが、次の規定があります。<BR>
    メジャーバージョンは、関数テーブルの並び順、及び関数の仕様に互換性のある場合、同じ値を取るように設定しなければいけません。<BR>
    マイナーバージョンは、バグフィックスや後方互換を保った機能追加が行われたときに更新します。<BR>
    メジャーバージョン、マイナーバージョンとも、1以上の値を用います。<BR>
    0は使用しないでください。<BR>
    <BR>
    モジュールがIOPメモリ上にロードされて、そこに含まれる呼び出しテーブル構造体がリンクされるときには、library nameフィールドと、メジャーバージョンが一致する登録済のエントリテーブル構造体が検索され、見つかるとリンクされます。<BR>
    (注意：2000年4月現在、プログラムローダは上記のように動作しますが、呼び出しテーブル構造体の指定するマイナーバージョンよりも小さいマイナーバージョンのエントリテーブル構造体とはリンクが出来ない方が望ましいので、いずれそのように変更する予定です。)<BR>
    <BR>
    エントリテーブル構造体のシステムへの登録時は、既に登録されているライブラリにlibrary nameとメジャーバージョンが一致して、マイナーバージョンが大きいものが存在した場合は、登録に失敗します。<BR>
</blockquote>

<!-- 見出し 3,節見出し -->
<A NAME="Heading3_4">
<H2>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A> 4 <B>モジュールのロードと起動の手順</B>
<HR NOSHADE>
</H2>
</A>

<blockquote>
    プログラムローダはIOPのシステムのブート時およびLoadStartModule()などのAPIにより指示があったときに、IOPオブジェクトファイルをロードしモジュールの起動エントリを呼び出します。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_4_1">
<A HREF="#Heading3_4"> 4. </A>1 <B>モジュールのロード</B>
</A>
</H3>
<blockquote>
    モジュールのロードは以下の手順で行われます。<BR>
    <OL>
         <LI VALUE= 1> IOPオブジェクトファイル形式のオブジェクトデータを調べ、必要なメモリ領域を確保し、オブジェクトの再配置を行います。<BR>
         <LI VALUE= 2> モジュールのBSS segmentをゼロクリアします。<BR>
         <LI VALUE= 3> モジュールのTEXT segmentを調査し、呼び出しテーブル構造体を発見したならばリンクします。<BR>
         <LI VALUE= 4> モジュールIDの割り当てを行います。<BR>
    </OL>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_4_2">
<A HREF="#Heading3_4"> 4. </A>2 <B>モジュールの起動</B>
</A>
</H3>
<blockquote>
    モジュールの起動エントリは次のようなプロトタイプを持たなければなりません。<BR>
    <BR>
    	int startentry(int argc, char *argv[]);<BR>
    <BR>
    プログラムローダは、起動エントリを以下のように呼び出します。<BR>
    <OL>
         <LI VALUE= 1> モジュールのGP(global pointer) valueをGP register($28)にセットする。<BR>
         <LI VALUE= 2>  起動エントリをサブルーチンコールする。<BR>
    </OL>
    <BR>
    起動エントリが呼び出されたときの引数、スタック等は、システムのブート時と平常時とでは異なり、以下のようになります。<BR>
    <BR>

     <H4><B>システムのブート時</B></H4>

      <BLOCKQUOTE>
      スタックは、ブート時にシステムが使用しているおよそ3KBのスタックを使用する。<BR>
      argc = 0<BR>
      argv = NULL<BR>
      <BR>
      </BLOCKQUOTE>

     <H4><B>平常時</B></H4>

      <BLOCKQUOTE>
      起動エントリ実行用に確保されているスレッドの権限で実行される。<BR>
      スレッドのスタックサイズは2KB<BR>
      スレッドの優先順位はMODULE_INIT_PRIORITY(=8)<BR>
      argc = 一般的なC言語のmain関数の引数と同じ。(1以上)<BR>
      argv = 一般的なC言語のmain関数の引数と同じ。<BR>
      文字列ポインタ配列および文字列の実体はスタック上に積まれている。<BR>
      </BLOCKQUOTE>
    <BR>
    起動エントリ実行用に確保されているスレッドは一つしかないので、原則として起動エントリの実行は複数が並行に行われることはありません。<BR>
    プログラマは通常のモジュールの起動エントリのプログラミングでは他のモジュールの起動エントリ処理との競合を気にする必要はありません。<BR>
    例外として、起動エントリのなかで、LoadStartModule()などのAPIによりさらに他のモジュールを起動する場合は、起動エントリの実行がネストします。<BR>
    <BR>
    起動エントリの戻り値の下位2bitは以下の意味を持ちます。<BR>
    <BR>
<DIV align="center">
<TABLE BORDER>
<TR>
<TD valign="TOP" bgcolor="#cccccc"><B>戻り値の下位2bit</B></TD>
<TD valign="TOP" bgcolor="#cccccc"><B>処理</B></TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>0</DIV></TD>
<TD valign="TOP">モジュールはメモリに常駐する</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>1</DIV></TD>
<TD valign="TOP">モジュールはメモリから削除される</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>2</DIV></TD>
<TD valign="TOP">予約値（使用不可）</TD>
</TR>
<TR>
<TD valign="TOP"><DIV align=center>3</DIV></TD>
<TD valign="TOP">予約値（使用不可）</TD>
</TR>
</TABLE>
</DIV><BR>
    <BR>
</blockquote>

<!-- 見出し 3,節見出し -->
<A NAME="Heading3_5">
<H2>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A> 5 <B>IOPオブジェクトフォーマット</B>
<HR NOSHADE>
</H2>
</A>

<blockquote>
    IOPオブジェクトフォーマットは、MIPS R3000のELF形式リロケータブルファイルフォーマットに若干の追加・変更・制限を加えたものです。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_1">
<A HREF="#Heading3_5"> 5. </A>1 <B>IOPモジュール情報セクション</B>
</A>
</H3>
<blockquote>
    IOPオブジェクトフォーマットには、IOPモジュール情報セクションが新規に追加されました。<BR>
    IOPモジュール情報セクションは以下の構造の可変長のデータを持ち、IOPプログラムローダがモジュールをロードした後に実行に必要な情報を設定します。<BR>
    <BR>
<PRE>        /* A section of type SHT_SCE_IOPMOD contains the following structure.  */
        typedef struct _Elf32_IopMod {
        	Elf32_Word	moduleinfo;
        	Elf32_Word	entry;
        	Elf32_Word	gp_value;
        	Elf32_Word	text_size;
        	Elf32_Word	data_size;
        	Elf32_Word	bss_size;
        	Elf32_Half	moduleversion;
        	char		modulename[1];	/* null terminate */
        } Elf32_IopMod;
</PRE>
    <BR>
    entryは、プログラムの起動エントリアドレスのTEXT segment先頭からのオフセットが入ります。<BR>
    gp_valueは、プログラムのGP registerの値のTEXT segment先頭からのオフセットが入ります。<BR>
    text_size, data_size, bss_sizeはそれぞれTEXT, DATA, BSS segmentのサイズを示します。<BR>
    プログラムのDATA segment中にModuleInfo構造体のModule変数が存在するときは、moduleinfoにModule変数のTEXT segment先頭からのオフセットが入り、さらに、moduleversionにModule.versionのコピーが、modulename[]には、Module.nameのコピーが格納されます。<BR>
    Module変数が存在しないときは、moduleinfoには0xffffffff、moduleversionとmodulename[0]には、0が入ります。<BR>
    <BR>
    IOPモジュール情報セクションのセクション名は ".iopmod"となり、セクションヘッダの各フィールドには以下の値が格納されます。<BR>
    <BR>
    sh_type	=  SHT_SCE_IOPMOD(=0x70000080)<BR>
    sh_offset	=  セクションデータのファイル先頭からのオフセット<BR>
    sh_size	=  sizeof(Elf32_IopMod)+strlen(Elf32_IopMod.modulename)<BR>
    sh_addralign	=  4<BR>
    その他	=  0<BR>
    <BR>
    なお、IOPオブジェクトファイルには .reginfoセクションは不要です。<BR>
    .reginfoセクションは入れないでください。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_2">
<A HREF="#Heading3_5"> 5. </A>2 <B>ファイル中のデータレイアウト</B>
</A>
</H3>
<blockquote>
    標準のELF形式リロケータブルファイルではファイル中のデータの配置はとくに規定されていませんが、IOPオブジェクトフォーマットでは以下の順にデータが並んでいなければいけません。<BR>
    <BR>
    <OL>
         <LI VALUE= 1> ELFヘッダ<BR>
         <LI VALUE= 2> プログラムヘッダテーブル<BR>
         <LI VALUE= 3> IOPモジュール情報セクションデータ<BR>
         <LI VALUE= 4> TEXT, DATA segmentデータ<BR>
         <LI VALUE= 5> その他のセクションデータ<BR>
         <LI VALUE= 6> セクションヘッダテーブル<BR>
         <LI VALUE= 7> TEXT, DATA segmentのリロケーションテーブルデータ<BR>
         <LI VALUE= 8> その他のセクションデータ<BR>
    </OL>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_3">
<A HREF="#Heading3_5"> 5. </A>3 <B>メモリ中のデータレイアウト</B>
</A>
</H3>
<blockquote>
    IOPモジュールは「2. モジュールの構造」で述べたようにレイアウトされている必要があります。<BR>
    すなわち、TEXT, DATA, BSS各セグメントはこの順で連続して配置されalignは0x10、つまり16byte境界でなければなりません。<BR>
    <BR>
    UNIXなどでは、.rodataセクションのような書き換え不可のデータをTEXT segmentに含ませることがありますが、IOPのオブジェクトファイルではこれは許されません。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_4">
<A HREF="#Heading3_5"> 5. </A>4 <B>ELFヘッダの詳細</B>
</A>
</H3>
<blockquote>
    ELFヘッダの内容は、以下のように設定されなければなりません。<BR>
    <BR>
      <BLOCKQUOTE>
      e_ident	== 'ELF', ELFCLASS32, ELFDATA2LSB,  EV_CURRENT<BR>
      e_type	== ET_SCE_IOPRELEXEC (==0xFF80)<BR>
      e_machine  == EM_MIPS<BR>
      e_version  == EV_CURRENT<BR>
      e_flags	== 任意（無視される）<BR>
      e_entry	== プログラムの起動エントリアドレスのTEXT segment先頭からのオフセット<BR>
      	(Elf32_IopMod.entryと同じ値)<BR>
      e_ehsize	== sizeof(Elf32_Ehdr)<BR>
      e_phoff	== プログラムヘッダテーブルのファイル内の位置<BR>
      	( sizeof(Elf32_Ehdr)と同じになる)<BR>
      e_phentsize  == sizeof(Elf32_Phdr)<BR>
      e_phnum  == 2<BR>
      e_shoff	== セクションヘッダテーブルのファイル内の位置<BR>
      e_shentsize  == sizeof(Elf32_Shdr)<BR>
      e_shnum  == ファイル中のセクションの数<BR>
      e_shstrndx  == .shstrtabセクションのセクションインデックス<BR>
      </BLOCKQUOTE>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_5">
<A HREF="#Heading3_5"> 5. </A>5 <B>プログラムヘッダテーブルの詳細</B>
</A>
</H3>
<blockquote>
    プログラムヘッダテーブルは必ず２つの要素を持ち、以下の順になっています。<BR>
    <BR>
    IOP Module Header<BR>
      <BLOCKQUOTE>
      p_type	== PT_SCE_IOPMOD( == 0x70000080)<BR>
      p_flags	== PF_R<BR>
      p_offset	== IOPモジュール情報セクションのデータのファイル内の位置<BR>
      p_filesz	== IOPモジュール情報セクションのデータのサイズ<BR>
      	sizeof(Elf32_IopMod)+strlen(Elf32_IopMod.modulename)<BR>
      p_vaddr,p_memsz  == 0<BR>
      p_align	== 4<BR>
      </BLOCKQUOTE>
    Segment Header<BR>
      <BLOCKQUOTE>
      p_type	== PT_LOAD<BR>
      p_flags	== PF_R+PF_W+PF_X<BR>
      p_offset	== TEXT segment データのファイル内の位置<BR>
      p_vaddr	== 0<BR>
      p_filesz	== ファイル中のロードデータのサイズ<BR>
      	(TEXT segment size + DATA segment size)<BR>
      p_memsz  == メモリにロード後のデータサイズ<BR>
      (TEXT segment size + DATA segment size + BSS segment size)<BR>
      p_align	== 0x10<BR>
      </BLOCKQUOTE>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_6">
<A HREF="#Heading3_5"> 5. </A>6 <B>予約シンボル</B>
</A>
</H3>
<blockquote>
    SCE製のIOPオブジェクトファイルジェネレータiopfixupでは、以下の予約シンボルを自動生成します。<BR>
    <BR>
      <BLOCKQUOTE>
      _ftext		TEXTセグメントの先頭アドレス<BR>
      _etext, etext	TEXTセグメントの最後のbyteの次のアドレス<BR>
      _fdata		DATAセグメントの先頭アドレス<BR>
      _edata, edata	DATAセグメントの最後のbyteの次のアドレス<BR>
      _fbss		BSSセグメントの先頭アドレス<BR>
      _end, end	BSSセグメントの最後のbyteの次のアドレス<BR>
      _gp		gpレジスタの初期値<BR>
      </BLOCKQUOTE>
    <BR>
    上記のシンボル間では以下の関係が成り立ちます。<BR>
      <BLOCKQUOTE>
      0 &lt;= ( _fdata - _etext ) &lt; 0x10<BR>
      0 &lt;= ( _fbss - _edata ) &lt; 0x10<BR>
      </BLOCKQUOTE>
    <BR>
    プログラムのソース互換性を確保するために、リンカまたはIOPオブジェクトファイルジェネレータは、上記のシンボルを生成することを推奨します。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_7">
<A HREF="#Heading3_5"> 5. </A>7 <B>シンボルテーブルエントリ</B>
</A>
</H3>
<blockquote>
    シンボルテーブルのテーブルエントリのst_valueフィールドの保持する値がアドレスである場合、それはセクションオフセットではなく、プログラムオフセット（TEXT segmentの先頭からのオフセット）となります。<BR>
    <BR>
    また、上記の予約シンボルのうち、etext, _etext, edata, _edata, _fbss,end, _end, _gpのエントリは、st_shndxフィールドにSHN_RADDR(==0xff1f)が入ります。<BR>
    <BR>
    それ以外は、標準のR3000用ELFリロケータブルファイルと同じです。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_8">
<A HREF="#Heading3_5"> 5. </A>8 <B>リロケーションテーブルエントリ</B>
</A>
</H3>
<blockquote>
    リロケーションテーブルのテーブルエントリのr_offsetフィールドはプログラムオフセット（TEXT segmentの先頭からのオフセット）が格納され、r_symフィールド(==ELF_32_R_SYM(r_info))は常にSTN_UNDEFが格納されます。<BR>
    <BR>
    ELFリロケータブルファイルから IOP オブジェクトファイルに変換する際に、 r_sym フィールドが示しているシンボルの値をプログラムオフセットに変換したのち、該当セクションデータのリロケーションフィールドに適切に足し込まれなければなりません。<BR>
    <BR>
    許されるリロケーションタイプは以下の6タイプのみです。<BR>
      <BLOCKQUOTE>
      R_MIPS_NONE<BR>
      R_MIPS_16<BR>
      R_MIPS_32<BR>
      R_MIPS_26<BR>
      R_MIPS_HI16<BR>
      R_MIPS_LO16<BR>
      </BLOCKQUOTE>
    また、対応するR_MIPS_HI16とR_MIPS_LO16は、オリジナルのMIPSのR3000での定義のとおり、必ずペアでテーブル上に連続して格納されなければいけません。<BR>
    ( gccの拡張では、一つのR_MIPS_HI16に複数のR_MIPS_LO16が存在する場合がありますが、これは許されません。)<BR>
    <BR>
    それ以外は、標準のR3000用ELFリロケータブルファイルと同じです。<BR>
</blockquote>

<!-- 見出し 4,小見出し -->
<H3>
<A NAME="Heading4_5_9">
<A HREF="#Heading3_5"> 5. </A>9 <B>デバッグ情報</B>
</A>
</H3>
<blockquote>
    IOPオブジェクトフォーマットでは、デバッグ情報に関しての規定は行いません。<BR>
    また、IOPプログラムローダは、本文書で規定した以外のセクションを無視します。<BR>
    従って、コンパイラベンダは独自のデバッグ情報を含むセクションをIOPオブジェクトファイルに含めてかまいません。<BR>
    ただし、SCE製のユーティリティは、SCE供給のiop-gcc(標準のR3000用gccとほぼ同じ)の生成するデバッグ情報がセクション名 ".mdebug"セクションタイプSHT_MIPS_DEBUGであることを前提にしているので、MIPS用gccと非互換のデバッグ情報を生成する場合は、これらのセクション名またはセクションタイプを使用してはいけません。<BR>
</blockquote>
<A HREF="#Top"><IMG SRC = gif/link.gif BORDER = 0></A>
<HR>
<DIV ALIGN="right">
    Copyright (c) 2000 Sony Computer Entertainment Inc.  All Rights Reserved.<BR>
    SCEI CONFIDENTIAL
</DIV>
</BODY>
</HTML>
