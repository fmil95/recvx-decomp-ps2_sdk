This is Info file gcc.info, produced by Makeinfo version 1.68 from the
input file ../../src/gcc/gcc.texi.

START-INFO-DIR-ENTRY
* Gcc: (gcc).                           Using and Porting the GNU C compiler.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* gcc: (gcc).                  The GNU C compiler.
END-INFO-DIR-ENTRY
   This file documents the use and the internals of the GNU compiler.

   Published by the Free Software Foundation 59 Temple Place - Suite 330
Boston, MA 02111-1307 USA

   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998
Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License" and "Funding
for Free Software" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License" and "Funding for Free Software", and this permission notice,
may be included in translations approved by the Free Software Foundation
instead of in the original English.


File: gcc.info,  Node: DEC Alpha Options,  Next: Clipper Options,  Prev: Intel 960 Options,  Up: Submodel Options

DEC Alpha Options
-----------------

   These `-m' options are defined for the DEC Alpha implementations:

`-mno-soft-float'
`-msoft-float'
     Use (do not use) the hardware floating-point instructions for
     floating-point operations.  When `-msoft-float' is specified,
     functions in `libgcc1.c' will be used to perform floating-point
     operations.  Unless they are replaced by routines that emulate the
     floating-point operations, or compiled in such a way as to call
     such emulations routines, these routines will issue floating-point
     operations.   If you are compiling for an Alpha without
     floating-point operations, you must ensure that the library is
     built so as not to call them.

     Note that Alpha implementations without floating-point operations
     are required to have floating-point registers.

`-mfp-reg'
`-mno-fp-regs'
     Generate code that uses (does not use) the floating-point register
     set.  `-mno-fp-regs' implies `-msoft-float'.  If the floating-point
     register set is not used, floating point operands are passed in
     integer registers as if they were integers and floating-point
     results are passed in $0 instead of $f0.  This is a non-standard
     calling sequence, so any function with a floating-point argument
     or return value called by code compiled with `-mno-fp-regs' must
     also be compiled with that option.

     A typical use of this option is building a kernel that does not
     use, and hence need not save and restore, any floating-point
     registers.

`-mieee'
     The Alpha architecture implements floating-point hardware
     optimized for maximum performance.  It is mostly compliant with
     the IEEE floating point standard.  However, for full compliance,
     software assistance is required.  This option generates code fully
     IEEE compliant code *except* that the INEXACT FLAG is not
     maintained (see below).  If this option is turned on, the CPP
     macro `_IEEE_FP' is defined during compilation.  The option is a
     shorthand for: `-D_IEEE_FP -mfp-trap-mode=su -mtrap-precision=i
     -mieee-conformant'.  The resulting code is less efficient but is
     able to correctly support denormalized numbers and exceptional
     IEEE values such as not-a-number and plus/minus infinity.  Other
     Alpha compilers call this option `-ieee_with_no_inexact'.

`-mieee-with-inexact'
     This is like `-mieee' except the generated code also maintains the
     IEEE INEXACT FLAG.  Turning on this option causes the generated
     code to implement fully-compliant IEEE math.  The option is a
     shorthand for `-D_IEEE_FP -D_IEEE_FP_INEXACT' plus the three
     following: `-mieee-conformant', `-mfp-trap-mode=sui', and
     `-mtrap-precision=i'.  On some Alpha implementations the resulting
     code may execute significantly slower than the code generated by
     default.  Since there is very little code that depends on the
     INEXACT FLAG, you should normally not specify this option.  Other
     Alpha compilers call this option `-ieee_with_inexact'.

`-mfp-trap-mode=TRAP MODE'
     This option controls what floating-point related traps are enabled.
     Other Alpha compilers call this option `-fptm 'TRAP MODE.  The
     trap mode can be set to one of four values:

    `n'
          This is the default (normal) setting.  The only traps that
          are enabled are the ones that cannot be disabled in software
          (e.g., division by zero trap).

    `u'
          In addition to the traps enabled by `n', underflow traps are
          enabled as well.

    `su'
          Like `su', but the instructions are marked to be safe for
          software completion (see Alpha architecture manual for
          details).

    `sui'
          Like `su', but inexact traps are enabled as well.

`-mfp-rounding-mode=ROUNDING MODE'
     Selects the IEEE rounding mode.  Other Alpha compilers call this
     option `-fprm 'ROUNDING MODE.  The ROUNDING MODE can be one of:

    `n'
          Normal IEEE rounding mode.  Floating point numbers are
          rounded towards the nearest machine number or towards the
          even machine number in case of a tie.

    `m'
          Round towards minus infinity.

    `c'
          Chopped rounding mode.  Floating point numbers are rounded
          towards zero.

    `d'
          Dynamic rounding mode.  A field in the floating point control
          register (FPCR, see Alpha architecture reference manual)
          controls the rounding mode in effect.  The C library
          initializes this register for rounding towards plus infinity.
          Thus, unless your program modifies the FPCR, `d' corresponds
          to round towards plus infinity.

`-mtrap-precision=TRAP PRECISION'
     In the Alpha architecture, floating point traps are imprecise.
     This means without software assistance it is impossible to recover
     from a floating trap and program execution normally needs to be
     terminated.  GNU CC can generate code that can assist operating
     system trap handlers in determining the exact location that caused
     a floating point trap.  Depending on the requirements of an
     application, different levels of precisions can be selected:

    `p'
          Program precision.  This option is the default and means a
          trap handler can only identify which program caused a
          floating point exception.

    `f'
          Function precision.  The trap handler can determine the
          function that caused a floating point exception.

    `i'
          Instruction precision.  The trap handler can determine the
          exact instruction that caused a floating point exception.

     Other Alpha compilers provide the equivalent options called
     `-scope_safe' and `-resumption_safe'.

`-mieee-conformant'
     This option marks the generated code as IEEE conformant.  You must
     not use this option unless you also specify `-mtrap-precision=i'
     and either `-mfp-trap-mode=su' or `-mfp-trap-mode=sui'.  Its only
     effect is to emit the line `.eflag 48' in the function prologue of
     the generated assembly file.  Under DEC Unix, this has the effect
     that IEEE-conformant math library routines will be linked in.

`-mbuild-constants'
     Normally GNU CC examines a 32- or 64-bit integer constant to see
     if it can construct it from smaller constants in two or three
     instructions.  If it cannot, it will output the constant as a
     literal and generate code to load it from the data segment at
     runtime.

     Use this option to require GNU CC to construct *all* integer
     constants using code, even if it takes more instructions (the
     maximum is six).

     You would typically use this option to build a shared library
     dynamic loader.  Itself a shared library, it must relocate itself
     in memory before it can find the variables and constants in its
     own data segment.

`-malpha-as'
`-mgas'
     Select whether to generate code to be assembled by the
     vendor-supplied assembler (`-malpha-as') or by the GNU assembler
     `-mgas'.

`-mbwx'
`-mno-bwx'
`-mcix'
`-mno-cix'
`-mmax'
`-mno-max'
     Indicate whether GNU CC should generate code to use the optional
     BWX, CIX, and MAX instruction sets.  The default is to use the
     instruction sets supported by the CPU type specified via `-mcpu='
     option or that of the CPU on which GNU CC was built if none was
     specified.

`-mcpu=CPU_TYPE'
     Set the instruction set, register set, and instruction scheduling
     parameters for machine type CPU_TYPE.  You can specify either the
     `EV' style name or the corresponding chip number.  GNU CC supports
     scheduling parameters for the EV4 and EV5 family of processors and
     will choose the default values for the instruction set from the
     processor you specify.  If you do not specify a processor type,
     GNU CC will default to the processor on which the compiler was
     built.

     Supported values for CPU_TYPE are

    `ev4'
    `21064'
          Schedules as an EV4 and has no instruction set extensions.

    `ev5'
    `21164'
          Schedules as an EV5 and has no instruction set extensions.

    `ev56'
    `21164a'
          Schedules as an EV5 and supports the BWX extension.

    `pca56'
    `21164pc'
    `21164PC'
          Schedules as an EV5 and supports the BWX and MAX extensions.

    `ev6'
    `21264'
          Schedules as an EV5 (until Digital releases the scheduling
          parameters for the EV6) and supports the BWX, CIX, and MAX
          extensions.

`-mmemory-latency=TIME'
     Sets the latency the scheduler should assume for typical memory
     references as seen by the application.  This number is highly
     dependant on the memory access patterns used by the application
     and the size of the external cache on the machine.

     Valid options for TIME are

    `NUMBER'
          A decimal number representing clock cycles.

    `L1'
    `L2'
    `L3'
    `main'
          The compiler contains estimates of the number of clock cycles
          for "typical" EV4 & EV5 hardware for the Level 1, 2 & 3 caches
          (also called Dcache, Scache, and Bcache), as well as to main
          memory.  Note that L3 is only valid for EV5.


File: gcc.info,  Node: Clipper Options,  Next: H8/300 Options,  Prev: DEC Alpha Options,  Up: Submodel Options

Clipper Options
---------------

   These `-m' options are defined for the Clipper implementations:

`-mc300'
     Produce code for a C300 Clipper processor. This is the default.

`-mc400'
     Produce code for a C400 Clipper processor i.e. use floating point
     registers f8..f15.


File: gcc.info,  Node: H8/300 Options,  Next: SH Options,  Prev: Clipper Options,  Up: Submodel Options

H8/300 Options
--------------

   These `-m' options are defined for the H8/300 implementations:

`-mrelax'
     Shorten some address references at link time, when possible; uses
     the linker option `-relax'.  *Note `ld' and the H8/300:
     (ld.info)H8/300, for a fuller description.

`-mh'
     Generate code for the H8/300H.

`-ms'
     Generate code for the H8/S.

`-mint32'
     Make `int' data 32 bits by default.

`-malign-300'
     On the h8/300h, use the same alignment rules as for the h8/300.
     The default for the h8/300h is to align longs and floats on 4 byte
     boundaries.  `-malign-300' causes them to be aligned on 2 byte
     boundaries.  This option has no effect on the h8/300.


File: gcc.info,  Node: SH Options,  Next: System V Options,  Prev: H8/300 Options,  Up: Submodel Options

SH Options
----------

   These `-m' options are defined for the SH implementations:

`-m1'
     Generate code for the SH1.

`-m2'
     Generate code for the SH2.

`-m3'
     Generate code for the SH3.

`-m3e'
     Generate code for the SH3e.

`-mb'
     Compile code for the processor in big endian mode.

`-ml'
     Compile code for the processor in little endian mode.

`-mdalign'
     Align doubles at 64 bit boundaries.  Note that this changes the
     calling conventions, and thus some functions from the standard C
     library will not work unless you recompile it first with -mdalign.

`-mrelax'
     Shorten some address references at link time, when possible; uses
     the linker option `-relax'.


File: gcc.info,  Node: System V Options,  Next: Z8000 Option,  Prev: SH Options,  Up: Submodel Options

Options for System V
--------------------

   These additional options are available on System V Release 4 for
compatibility with other compilers on those systems:

`-G'
     Create a shared object.  It is recommended that `-symbolic' or
     `-shared' be used instead.

`-Qy'
     Identify the versions of each tool used by the compiler, in a
     `.ident' assembler directive in the output.

`-Qn'
     Refrain from adding `.ident' directives to the output file (this is
     the default).

`-YP,DIRS'
     Search the directories DIRS, and no others, for libraries
     specified with `-l'.

`-Ym,DIR'
     Look in the directory DIR to find the M4 preprocessor.  The
     assembler uses this option.


File: gcc.info,  Node: Z8000 Option,  Next: V850 Options,  Prev: System V Options,  Up: Submodel Options

Zilog Z8000 Option
------------------

   GNU CC recognizes one special option when configured to generate
code for the Z8000 family:

`-mz8001'
     Generate code for the segmented variant of the Z8000 architecture.
     (Without this option, `gcc' generates unsegmented Z8000 code;
     suitable, for example, for the Z8002.)


File: gcc.info,  Node: V850 Options,  Next: NS32K Options,  Prev: Z8000 Option,  Up: Submodel Options

V850 Options
------------

   These `-m' options are defined for V850 implementations:

`-mlong-calls'
`-mno-long-calls'
     Treat all calls as being far away (near).  If calls are assumed to
     be far away, the compiler will always load the functions address
     up into a register, and call indirect through the pointer.

`-mno-ep'
`-mep'
     Do not optimize (do optimize) basic blocks that use the same index
     pointer 4 or more times to copy pointer into the `ep' register, and
     use the shorter `sld' and `sst' instructions.  The `-mep' option
     is on by default if you optimize.

`-mno-prolog-function'
`-mprolog-function'
     Do not use (do use) external functions to save and restore
     registers at the prolog and epilog of a function.  The external
     functions are slower, but use less code space if more than one
     function saves the same number of registers.  The
     `-mprolog-function' option is on by default if you optimize.

`-mspace'
     Try to make the code as small as possible.  At present, this just
     turns on the `-mep' and `-mprolog-function' options.

`-mtda=N'
     Put static or global variables whose size is N bytes or less into
     the tiny data area that register `ep' points to.  The tiny data
     area can hold up to 256 bytes in total (128 bytes for byte
     references).

`-msda=N'
     Put static or global variables whose size is N bytes or less into
     the small data area that register `gp' points to.  The small data
     area can hold up to 64 kilobytes.

`-mzda=N'
     Put static or global variables whose size is N bytes or less into
     the first 32 kilobytes of memory.

`-mv850'
     Specify that the target processor is the V850.

`-mbig-switch'
     Generate code suitable for big switch tables.  Use this option
     only if the assembler/linker complain about out of range branches
     within a switch table.

`-mapp-regs'
     This option will cause r2 and r5 to be used in the code generated
     by the compiler.  This setting is the default.

`-mno-app-regs'
     This option will cause r2 and r5 to be treated as fixed registers.

`-mv850e'
     Specify that the target processor is the V850E.  The preprocessor
     constant `__v850e__' will be defined if this option is used.

     If neither `-mv850' nor `-mv850e' are defined then a default
     target processor will be chosen and the relevant `__v850*__'
     preprocessor constant will be defined.

     The preprocessor constants `__v850' and `__v851__' are always
     defined, regardless of which processor variant is the target.

`-mdisable-callt'
     This option will suppress generation of the CALLT instruction for
     the v850e flavors of the v850 architecture.  The default is
     `-mno-disable-callt' which allows the CALLT instruction to be used.


File: gcc.info,  Node: ARC Options,  Next: D10V Options,  Prev: NS32K Options,  Up: Submodel Options

ARC Options
-----------

   These options are defined for ARC implementations:

`-EL'
     Compile code for little endian mode.  This is the default.

`-EB'
     Compile code for big endian mode.

`-mmangle-cpu'
     Prepend the name of the cpu to all public symbol names.  In
     multiple-processor systems, there are many ARC variants with
     different instruction and register set characteristics.  This flag
     prevents code compiled for one cpu to be linked with code compiled
     for another.  No facility exists for handling variants that are
     "almost identical".  This is an all or nothing option.

`-mcpu=CPU'
     Compile code for ARC variant CPU.  Which variants are supported
     depend on the configuration.  All variants support `-mcpu=base',
     this is the default.

`-mtext=TEXT SECTION'

`-mdata=DATA SECTION'

`-mrodata=READONLY DATA SECTION'
     Put functions, data, and readonly data in TEXT SECTION, DATA
     SECTION, and READONLY DATA SECTION respectively by default.  This
     can be overridden with the `section' attribute.  *Note Variable
     Attributes::


File: gcc.info,  Node: D10V Options,  Next: D30V Options,  Prev: ARC Options,  Up: Submodel Options

D10V Options
------------

   These `-m' options are defined for D10V implementations:

`-mint32'
`-mint16'
     Make `int' data 32 (or 16) bits by default.  The default is
     `-mint16'.

`-mdouble64'
`-mdouble32'
     Make `double' data 64 (or 32) bits by default.  The default is
     `-mdouble32'.

`-maddac3'
`-mno-addac3'
     Enable (disable) the use of `addac3' and `subac3' instructions.
     The `-maddac3' instruction also enables the `-maccum' instruction.

`-maccum'
`-mno-accum'
     Enable (disable) the use of the 32-bit accumulators in compiler
     generated code.

`-mno-asm-optimize'
`-masm-optimize'
     Disable (enable) passing `-O' to the assembler when optimizing.
     The assembler uses the `-O' option to automatically parallelize
     adjacent short instructions where possible.

`-mno-small-insns'
`-msmall-insns'
     Disable (enable) converting some long instructions into two short
     instructions, which can eliminate some nops and enable more code
     to be conditionally executed.

`-mno-cond-move'
`-mcond-move'
     Disable (enable) conditional move instructions, which eliminates
     short branches.

`-mbranch-cost=N'
     Increase the internal costs of branches to N.  Higher costs means
     that the compiler will issue more instructions to avoid doing a
     branch.  The default is 1.

`-mcond-exec=N'
     Specify the maximum number of conditionally executed instructions
     that replace a branch.  The default is 4.


File: gcc.info,  Node: D30V Options,  Prev: D10V Options,  Up: Submodel Options

D30V Options
------------

   These `-m' options are defined for D30V implementations:

`-mextmem'
     Link the `.text', `.data', `.bss', `.strings', `.rodata',
     `.rodata1', `.data1' sections into external memory, which starts
     at location `0x80000000'.

`-mextmemory'
     Same as the `-mextmem' switch.

`-monchip'
     Link the `.text' section into onchip text memory, which starts at
     location `0x0'.  Also link `.data', `.bss', `.strings', `.rodata',
     `.rodata1', `.data1' sections into onchip data memory, which
     starts at location `0x20000000'.

`-mno-asm-optimize'
`-masm-optimize'
     Disable (enable) passing `-O' to the assembler when optimizing.
     The assembler uses the `-O' option to automatically parallelize
     adjacent short instructions where possible.

`-mbranch-cost=N'
     Increase the internal costs of branches to N.  Higher costs means
     that the compiler will issue more instructions to avoid doing a
     branch.  The default is 2.

`-mcond-exec=N'
     Specify the maximum number of conditionally executed instructions
     that replace a branch.  The default is 4.


File: gcc.info,  Node: NS32K Options,  Next: ARC Options,  Prev: V850 Options,  Up: Submodel Options

NS32K Options
-------------

   These are the `-m' options defined for the 32000 series.  The default
values for these options depends on which style of 32000 was selected
when the compiler was configured; the defaults for the most common
choices are given below.

`-m32032'
`-m32032'
     Generate output for a 32032.  This is the default when the
     compiler is configured for 32032 and 32016 based systems.

`-m32332'
`-m32332'
     Generate output for a 32332.  This is the default when the
     compiler is configured for 32332-based systems.

`-m32532'
`-m32532'
     Generate output for a 32532.  This is the default when the
     compiler is configured for 32532-based systems.

`-m32081'
     Generate output containing 32081 instructions for floating point.
     This is the default for all systems.

`-m32381'
     Generate output containing 32381 instructions for floating point.
     This also implies `-m32081'. The 32381 is only compatible with the
     32332 and 32532 cpus. This is the default for the pc532-netbsd
     configuration.

`-mmulti-add'
     Try and generate multiply-add floating point instructions `polyF'
     and `dotF'. This option is only available if the `-m32381' option
     is in effect. Using these instructions requires changes to to
     register allocation which generally has a negative impact on
     performance.  This option should only be enabled when compiling
     code particularly likely to make heavy use of multiply-add
     instructions.

`-mnomulti-add'
     Do not try and generate multiply-add floating point instructions
     `polyF' and `dotF'. This is the default on all platforms.

`-msoft-float'
     Generate output containing library calls for floating point.
     *Warning:* the requisite libraries may not be available.

`-mnobitfield'
     Do not use the bit-field instructions. On some machines it is
     faster to use shifting and masking operations. This is the default
     for the pc532.

`-mbitfield'
     Do use the bit-field instructions. This is the default for all
     platforms except the pc532.

`-mrtd'
     Use a different function-calling convention, in which functions
     that take a fixed number of arguments return pop their arguments
     on return with the `ret' instruction.

     This calling convention is incompatible with the one normally used
     on Unix, so you cannot use it if you need to call libraries
     compiled with the Unix compiler.

     Also, you must provide function prototypes for all functions that
     take variable numbers of arguments (including `printf'); otherwise
     incorrect code will be generated for calls to those functions.

     In addition, seriously incorrect code will result if you call a
     function with too many arguments.  (Normally, extra arguments are
     harmlessly ignored.)

     This option takes its name from the 680x0 `rtd' instruction.

`-mregparam'
     Use a different function-calling convention where the first two
     arguments are passed in registers.

     This calling convention is incompatible with the one normally used
     on Unix, so you cannot use it if you need to call libraries
     compiled with the Unix compiler.

`-mnoregparam'
     Do not pass any arguments in registers. This is the default for all
     targets.

`-msb'
     It is OK to use the sb as an index register which is always loaded
     with zero. This is the default for the pc532-netbsd target.

`-mnosb'
     The sb register is not available for use or has not been
     initialized to zero by the run time system. This is the default
     for all targets except the pc532-netbsd. It is also implied
     whenever `-mhimem' or `-fpic' is set.

`-mhimem'
     Many ns32000 series addressing modes use displacements of up to
     512MB.  If an address is above 512MB then displacements from zero
     can not be used.  This option causes code to be generated which
     can be loaded above 512MB.  This may be useful for operating
     systems or ROM code.

`-mnohimem'
     Assume code will be loaded in the first 512MB of virtual address
     space.  This is the default for all platforms.


File: gcc.info,  Node: Code Gen Options,  Next: Offset info Option,  Prev: Submodel Options,  Up: Invoking GCC

Options for Code Generation Conventions
=======================================

   These machine-independent options control the interface conventions
used in code generation.

   Most of them have both positive and negative forms; the negative form
of `-ffoo' would be `-fno-foo'.  In the table below, only one of the
forms is listed--the one which is not the default.  You can figure out
the other form by either removing `no-' or adding it.

`-fexceptions'
     Enable exception handling. Generates extra code needed to propagate
     exceptions.  For some targets, this implies generation of frame
     unwind information for all functions. This can produce significant
     data size overhead, although it does not affect execution.  If you
     do not specify this option, it is enabled by default for languages
     like C++ which normally require exception handling, and disabled
     for languages like C that do not normally require it.  However,
     when compiling C code that needs to interoperate properly with
     exception handlers written in C++, you may need to enable this
     option.  You may also wish to disable this option is you are
     compiling older C++ programs that don't use exception handling.

`-fpcc-struct-return'
     Return "short" `struct' and `union' values in memory like longer
     ones, rather than in registers.  This convention is less
     efficient, but it has the advantage of allowing intercallability
     between GNU CC-compiled files and files compiled with other
     compilers.

     The precise convention for returning structures in memory depends
     on the target configuration macros.

     Short structures and unions are those whose size and alignment
     match that of some integer type.

`-freg-struct-return'
     Use the convention that `struct' and `union' values are returned
     in registers when possible.  This is more efficient for small
     structures than `-fpcc-struct-return'.

     If you specify neither `-fpcc-struct-return' nor its contrary
     `-freg-struct-return', GNU CC defaults to whichever convention is
     standard for the target.  If there is no standard convention, GNU
     CC defaults to `-fpcc-struct-return', except on targets where GNU
     CC is the principal compiler.  In those cases, we can choose the
     standard, and we chose the more efficient register return
     alternative.

`-fshort-enums'
     Allocate to an `enum' type only as many bytes as it needs for the
     declared range of possible values.  Specifically, the `enum' type
     will be equivalent to the smallest integer type which has enough
     room.

`-fshort-double'
     Use the same size for `double' as for `float'.

`-fshared-data'
     Requests that the data and non-`const' variables of this
     compilation be shared data rather than private data.  The
     distinction makes sense only on certain operating systems, where
     shared data is shared between processes running the same program,
     while private data exists in one copy per process.

`-fno-common'
     Allocate even uninitialized global variables in the bss section of
     the object file, rather than generating them as common blocks.
     This has the effect that if the same variable is declared (without
     `extern') in two different compilations, you will get an error
     when you link them.  The only reason this might be useful is if
     you wish to verify that the program will work on other systems
     which always work this way.

`-fno-ident'
     Ignore the `#ident' directive.

`-fno-gnu-linker'
     Do not output global initializations (such as C++ constructors and
     destructors) in the form used by the GNU linker (on systems where
     the GNU linker is the standard method of handling them).  Use this
     option when you want to use a non-GNU linker, which also requires
     using the `collect2' program to make sure the system linker
     includes constructors and destructors.  (`collect2' is included in
     the GNU CC distribution.)  For systems which *must* use
     `collect2', the compiler driver `gcc' is configured to do this
     automatically.

`-finhibit-size-directive'
     Don't output a `.size' assembler directive, or anything else that
     would cause trouble if the function is split in the middle, and the
     two halves are placed at locations far apart in memory.  This
     option is used when compiling `crtstuff.c'; you should not need to
     use it for anything else.

`-fverbose-asm'
     Put extra commentary information in the generated assembly code to
     make it more readable.  This option is generally only of use to
     those who actually need to read the generated assembly code
     (perhaps while debugging the compiler itself).

     `-fno-verbose-asm', the default, causes the extra information to
     be omitted and is useful when comparing two assembler files.

`-fvolatile'
     Consider all memory references through pointers to be volatile.

`-fvolatile-global'
     Consider all memory references to extern and global data items to
     be volatile.  GNU CC does not consider static data items to be
     volatile because of this switch.

`-fvolatile-static'
     Consider all memory references to static data to be volatile.

`-fpic'
     Generate position-independent code (PIC) suitable for use in a
     shared library, if supported for the target machine.  Such code
     accesses all constant addresses through a global offset table
     (GOT).  The dynamic loader resolves the GOT entries when the
     program starts (the dynamic loader is not part of GNU CC; it is
     part of the operating system).  If the GOT size for the linked
     executable exceeds a machine-specific maximum size, you get an
     error message from the linker indicating that `-fpic' does not
     work; in that case, recompile with `-fPIC' instead.  (These
     maximums are 16k on the m88k, 8k on the Sparc, and 32k on the m68k
     and RS/6000.  The 386 has no such limit.)

     Position-independent code requires special support, and therefore
     works only on certain machines.  For the 386, GNU CC supports PIC
     for System V but not for the Sun 386i.  Code generated for the IBM
     RS/6000 is always position-independent.

`-fPIC'
     If supported for the target machine, emit position-independent
     code, suitable for dynamic linking and avoiding any limit on the
     size of the global offset table.  This option makes a difference
     on the m68k, m88k, and the Sparc.

     Position-independent code requires special support, and therefore
     works only on certain machines.

`-ffixed-REG'
     Treat the register named REG as a fixed register; generated code
     should never refer to it (except perhaps as a stack pointer, frame
     pointer or in some other fixed role).

     REG must be the name of a register.  The register names accepted
     are machine-specific and are defined in the `REGISTER_NAMES' macro
     in the machine description macro file.

     This flag does not have a negative form, because it specifies a
     three-way choice.

`-fcall-used-REG'
     Treat the register named REG as an allocable register that is
     clobbered by function calls.  It may be allocated for temporaries
     or variables that do not live across a call.  Functions compiled
     this way will not save and restore the register REG.

     It is an error to used this flag with the frame pointer or stack
     pointer.  Use of this flag for other registers that have fixed
     pervasive roles in the machine's execution model will produce
     disastrous results.

     This flag does not have a negative form, because it specifies a
     three-way choice.

`-fcall-saved-REG'
     Treat the register named REG as an allocable register saved by
     functions.  It may be allocated even for temporaries or variables
     that live across a call.  Functions compiled this way will save
     and restore the register REG if they use it.

     It is an error to used this flag with the frame pointer or stack
     pointer.  Use of this flag for other registers that have fixed
     pervasive roles in the machine's execution model will produce
     disastrous results.

     A different sort of disaster will result from the use of this flag
     for a register in which function values may be returned.

     This flag does not have a negative form, because it specifies a
     three-way choice.

`-fpack-struct'
     Pack all structure members together without holes.  Usually you
     would not want to use this option, since it makes the code
     suboptimal, and the offsets of structure members won't agree with
     system libraries.

`-fcheck-memory-usage'
     Generate extra code to check each memory access.  GNU CC will
     generate code that is suitable for a detector of bad memory
     accesses such as `Checker'.

     You must also specify this option when you compile functions you
     call that have side effects.  If you do not, you may get erroneous
     messages from the detector.  Normally,  you should compile all
     your code with this option.  If you use functions from a library
     that have side-effects (such as `read'), you may not be able to
     recompile the library and specify this option.  In that case, you
     can enable the `-fprefix-function-name' option, which requests GNU
     CC to encapsulate your code and make other functions look as if
     they were compiled with `-fcheck-memory-usage'.  This is done by
     calling "stubs", which are provided by the detector.  If you
     cannot find or build stubs for every function you call, you may
     have to specify `-fcheck-memory-usage' without
     `-fprefix-function-name'.

     If you specify this option, you can not use the `asm' or `__asm__'
     keywords in functions with memory checking enabled.  The compiler
     cannot understand what the `asm' statement will do, and therefore
     cannot generate the appropriate code, so it is rejected.  However,
     the function attribute `no_check_memory_usage' will disable memory
     checking within a function, and `asm' statements can be put inside
     such functions.  Inline expansion of a non-checked function within
     a checked function is permitted; the inline function's memory
     accesses won't be checked, but the rest will.

     If you move your `asm' statements to non-checked inline functions,
     but they do access memory, you can add calls to the support code
     in your inline function, to indicate any reads, writes, or copies
     being done.  These calls would be similar to those done in the
     stubs described above.

`-fprefix-function-name'
     Request GNU CC to add a prefix to the symbols generated for
     function names.  GNU CC adds a prefix to the names of functions
     defined as well as functions called.  Code compiled with this
     option and code compiled without the option can't be linked
     together, unless or stubs are used.

     If you compile the following code with `-fprefix-function-name'
          extern void bar (int);
          void
          foo (int a)
          {
            return bar (a + 5);
          
          }

     GNU CC will compile the code as if it was written:
          extern void prefix_bar (int);
          void
          prefix_foo (int a)
          {
            return prefix_bar (a + 5);
          }
     This option is designed to be used with `-fcheck-memory-usage'.

`-finstrument-functions'
     Generate instrumentation calls for entry and exit to functions.
     Just after function entry and just before function exit, the
     following profiling functions will be called with the address of
     the current function and its call site.  (On some platforms,
     `__builtin_return_address' does not work beyond the current
     function, so the call site information may not be available to the
     profiling functions otherwise.)

          void __cyg_profile_func_enter (void *this_fn, void *call_site);
          void __cyg_profile_func_exit  (void *this_fn, void *call_site);

     The first argument is the address of the start of the current
     function, which may be looked up exactly in the symbol table.

     This instrumentation is also done for functions expanded inline in
     other functions.  The profiling calls will indicate where,
     conceptually, the inline function is entered and exited.  This
     means that addressable versions of such functions must be
     available.  If all your uses of a function are expanded inline,
     this may mean an additional expansion of code size.  If you use
     `extern inline' in your C code, an addressable version of such
     functions must be provided.  (This is normally the case anyways,
     but if you get lucky and the optimizer always expands the
     functions inline, you might have gotten away without providing
     static copies.)

     A function may be given the attribute `no_instrument_function', in
     which case this instrumentation will not be done.  This can be
     used, for example, for the profiling functions listed above,
     high-priority interrupt routines, and any functions from which the
     profiling functions cannot safely be called (perhaps signal
     handlers, if the profiling routines generate output or allocate
     memory).

`-fstack-check'
     Generate code to verify that you do not go beyond the boundary of
     the stack.  You should specify this flag if you are running in an
     environment with multiple threads, but only rarely need to specify
     it in a single-threaded environment since stack overflow is
     automatically detected on nearly all systems if there is only one
     stack.

`-funaligned-pointers'
     Assume that all pointers contain unaligned addresses.  On machines
     where unaligned memory accesses trap, this will result in much
     larger and slower code for all pointer dereferences, but the code
     will work even if addresses are unaligned.

`-funaligned-struct-hack'
     Always access structure fields using loads and stores of the
     declared size.  This option is useful for code that derefences
     pointers to unaligned structures, but only accesses fields that
     are themselves aligned.  Without this option, gcc may try to use a
     memory access larger than the field.  This might give an unaligned
     access fault on some hardware.

     This option makes some invalid code work at the expense of
     disabling some optimizations.  It is strongly recommended that
     this option not be used.

`-foptimize-comparisons'
     Optimize multiple comparisons better within `&&' and `||'
     expressions.  This is an experimental option.  In some cases it can
     result in worse code.  It depends on many factors.  Now it is known
     only that the optimization works well for PPC740 and PPC750.  This
     option switches on the following transformations:
            (a != 0 || b != 0)  =>  ((a | b) != 0)
            (a == 0 && b == 0)  =>  ((a | b) == 0)
            (a != b || c != d)  =>  (((a ^ b) | (c ^ d)) != 0)
            (a == b && c == d)  =>  (((a ^ b) | (c ^ d)) == 0)
            (a != 0 && b != 0)  =>  (((a | -a) & (b | -b)) < 0)
            (a != b && c != d)  =>  x = a ^ b; y = c ^ d; (((x | -x) & (y | -y)) < 0)
            (a < 0 || b < 0)    =>  ((a | b) < 0)
            (a < 0 && b < 0)    =>  ((a & b) < 0)
            (a >= 0 || b >= 0)  =>  ((a & b) >= 0)
            (a >= 0 && b >= 0)  =>  ((a | b) >= 0)
            (a < 0 || b >= 0)   =>  ((a | ~b) < 0)
            (a < 0 && b >= 0)   =>  ((a & ~b) < 0)
            (a >= 0 || b < 0)   =>  ((~a | b) < 0)
            (a >= 0 && b < 0)   =>  ((~a & b) < 0)
            (a != 0 && b < 0)   =>  (((a | -a) & b) < 0)
            (a != 0 && b >= 0)  =>  (((a | -a) & ~b) < 0)
            (a < 0 && b != 0)   =>  (((b | -b) & a) < 0)
            (a >= 0 && b != 0)  =>  (((b | -b) & ~a) < 0)


File: gcc.info,  Node: Offset info Option,  Next: Environment Variables,  Prev: Code Gen Options,  Up: Invoking GCC

Offset info Option
==================

   `-offset-info output-file'

   This option simplifys access to C struct's from assembler.  For each
member of each structure the compiler will output a `.equ' directive to
associate a symbol with the member's offset in bytes into the
structure.  The symbol itself is the concatenation of the structure's
tag name and the member's name, separated by an underscore.

   This option will output to the specified `output-file' an assembler
`.equ' directive for each member of each structure found in each
compilation.  The `.equ' directives for the structures in a single
header file can be obtained as follows:

     gcc -fsyntax-only -offset-info m.s -x c m.h

Where `m.h' is the header containing the structures, and `m.s' is where
the directives are output.

   The following is a short example of output produced by
`-offset-info'.

     input file (for example m.h):
     
         struct W {
             double d;
             int i;
             };
     
         struct X {
             int a;
             int b;
     
             struct Y {
                 int a;
                 int b;
                 };
     
             struct Y y;
             struct Y yy[10];
             struct Y* p;
             };
     
     output file (for example m.s):
     	.equ W_d,0
     	.equ W_i,8
     	.equ Y_a,0
     	.equ Y_b,4
     	.equ X_a,0
     	.equ X_b,4
     	.equ X_y,8
     	.equ X_yy,16
     	.equ X_p,96

The `-offset-info' option has the following caveats:

*
     No directives are output for bit-field members.

*
     No directives are output for members who's offsets (as measured in
     bits) is greater than the word size of the host.

*
     No directives are output for members who's offsets are not
     constants.  This can happened only in structures which use some
     gcc specific extensions which allow for variable sized members.

`-fargument-alias'
`-fargument-noalias'
`-fargument-noalias-global'
     Specify the possible relationships among parameters and between
     parameters and global data.

     `-fargument-alias' specifies that arguments (parameters) may alias
     each other and may alias global storage.  `-fargument-noalias'
     specifies that arguments do not alias each other, but may alias
     global storage.  `-fargument-noalias-global' specifies that
     arguments do not alias each other and do not alias global storage.

     Each language will automatically use whatever option is required by
     the language standard.  You should not need to use these options
     yourself.

`-fleading-underscore'
     This option and its counterpart, -fno-leading-underscore, forcibly
     change the way C symbols are represented in the object file.  One
     use is to help link with legacy assembly code.

     Be warned that you should know what you are doing when invoking
     this option, and that not all targets provide complete support for
     it.


File: gcc.info,  Node: Environment Variables,  Next: Running Protoize,  Prev: Offset info Option,  Up: Invoking GCC

Environment Variables Affecting GNU CC
======================================

   This section describes several environment variables that affect how
GNU CC operates.  Some of them work by specifying directories or
prefixes to use when searching for various kinds of files. Some are
used to specify other aspects of the compilation environment.

   Note that you can also specify places to search using options such as
`-B', `-I' and `-L' (*note Directory Options::.).  These take
precedence over places specified using environment variables, which in
turn take precedence over those specified by the configuration of GNU
CC.  *Note Driver::.

`LANG'
`LC_CTYPE'
`LC_MESSAGES'
`LC_ALL'
     These environment variables control the way that GNU CC uses
     localization information that allow GNU CC to work with different
     national conventions.  GNU CC inspects the locale categories
     `LC_CTYPE' and `LC_MESSAGES' if it has been configured to do so.
     These locale categories can be set to any value supported by your
     installation.  A typical value is `en_UK' for English in the United
     Kingdom.

     The `LC_CTYPE' environment variable specifies character
     classification.  GNU CC uses it to determine the character
     boundaries in a string; this is needed for some multibyte
     encodings that contain quote and escape characters that would
     otherwise be interpreted as a string end or escape.

     The `LC_MESSAGES' environment variable specifies the language to
     use in diagnostic messages.

     If the `LC_ALL' environment variable is set, it overrides the value
     of `LC_CTYPE' and `LC_MESSAGES'; otherwise, `LC_CTYPE' and
     `LC_MESSAGES' default to the value of the `LANG' environment
     variable.  If none of these variables are set, GNU CC defaults to
     traditional C English behavior.

`TMPDIR'
     If `TMPDIR' is set, it specifies the directory to use for temporary
     files.  GNU CC uses temporary files to hold the output of one
     stage of compilation which is to be used as input to the next
     stage: for example, the output of the preprocessor, which is the
     input to the compiler proper.

`GCC_EXEC_PREFIX'
     If `GCC_EXEC_PREFIX' is set, it specifies a prefix to use in the
     names of the subprograms executed by the compiler.  No slash is
     added when this prefix is combined with the name of a subprogram,
     but you can specify a prefix that ends with a slash if you wish.

     If `GCC_EXEC_PREFIX' is not set, GNU CC will attempt to figure out
     an appropriate prefix to use based on the pathname it was invoked
     with.

     If GNU CC cannot find the subprogram using the specified prefix, it
     tries looking in the usual places for the subprogram.

     The default value of `GCC_EXEC_PREFIX' is `PREFIX/lib/gcc-lib/'
     where PREFIX is the value of `prefix' when you ran the `configure'
     script.

     Other prefixes specified with `-B' take precedence over this
     prefix.

     This prefix is also used for finding files such as `crt0.o' that
     are used for linking.

     In addition, the prefix is used in an unusual way in finding the
     directories to search for header files.  For each of the standard
     directories whose name normally begins with
     `/usr/local/lib/gcc-lib' (more precisely, with the value of
     `GCC_INCLUDE_DIR'), GNU CC tries replacing that beginning with the
     specified prefix to produce an alternate directory name.  Thus,
     with `-Bfoo/', GNU CC will search `foo/bar' where it would
     normally search `/usr/local/lib/bar'.  These alternate directories
     are searched first; the standard directories come next.

`COMPILER_PATH'
     The value of `COMPILER_PATH' is a colon-separated list of
     directories, much like `PATH'.  GNU CC tries the directories thus
     specified when searching for subprograms, if it can't find the
     subprograms using `GCC_EXEC_PREFIX'.

`LIBRARY_PATH'
     The value of `LIBRARY_PATH' is a colon-separated list of
     directories, much like `PATH'.  When configured as a native
     compiler, GNU CC tries the directories thus specified when
     searching for special linker files, if it can't find them using
     `GCC_EXEC_PREFIX'.  Linking using GNU CC also uses these
     directories when searching for ordinary libraries for the `-l'
     option (but directories specified with `-L' come first).

`C_INCLUDE_PATH'
`CPLUS_INCLUDE_PATH'
`OBJC_INCLUDE_PATH'
     These environment variables pertain to particular languages.  Each
     variable's value is a colon-separated list of directories, much
     like `PATH'.  When GNU CC searches for header files, it tries the
     directories listed in the variable for the language you are using,
     after the directories specified with `-I' but before the standard
     header file directories.

`DEPENDENCIES_OUTPUT'
     If this variable is set, its value specifies how to output
     dependencies for Make based on the header files processed by the
     compiler.  This output looks much like the output from the `-M'
     option (*note Preprocessor Options::.), but it goes to a separate
     file, and is in addition to the usual results of compilation.

     The value of `DEPENDENCIES_OUTPUT' can be just a file name, in
     which case the Make rules are written to that file, guessing the
     target name from the source file name.  Or the value can have the
     form `FILE TARGET', in which case the rules are written to file
     FILE using TARGET as the target name.

`LANG'
     This variable is used to pass locale information to the compiler.
     One way in which this information is used is to determine the
     character set to be used when character literals, string literals
     and comments are parsed in C and C++.  When the compiler is
     configured to allow multibyte characters, the following values for
     `LANG' are recognized:

    `C-JIS'
          Recognize JIS characters.

    `C-SJIS'
          Recognize SJIS characters.

    `C-EUCJP'
          Recognize EUCJP characters.

     If `LANG' is not defined, or if it has some other value, then the
     compiler will use mblen and mbtowc as defined by the default
     locale to recognize and translate multibyte characters.

