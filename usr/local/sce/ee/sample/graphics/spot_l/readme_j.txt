[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library  Release 2.0
　　　　　　　　　Copyright (C) 1999 by Sony Computer Entertainment Inc.
                                                   All Rights Reserved
スポットライト光サンプル

<サンプルの解説>

	スポットライト光を表現するサンプルです．スポット光はご存知
	のように，指向性のある点光源のようなものを意味します．
	通常スポットライトは，光があまり拡散しないよう設計されていま
	すので，光の強度の減衰の度合が小さく感じられます．用途に合わ
	せて光の減衰関数を調節すると良いでしょう．
	本サンプルでは距離(１乗)に反比例して減衰するよう作成しています．
	また，3つのスポットライトをサポートしています．

<ファイル>

        main.c          :メインプログラム
        main.h          :メインプログラムのプロトタイプ宣言
        defines.h       :各種 .c ファイルで用いるプロトタイプ宣言
	vu1pack.c       :VU1処理用データパケット生成関数プログラム
	tex256.dsm      :テクスチャデータファイル
        cube.dsm        :オブジェクトデータ(立方体)
	torus.dsm       :オブジェクトデータ(トーラス 1024polygon)
	grid200.dsm     :オブジェクトデータ(平面 200polygon)
	grid1800.dsm    :オブジェクトデータ(凹凸平面 1800polygon)
	spot.dsm        :VU1マイクロコード転送用パケット
	sp3.vsm         :VU1マイクロコード(距離に反比例)
	sp3_opt.vsm     :VU1マイクロコード(最適化版)
	basic.vsm       :VU1マイクロコード(キューブ描画用)

<起動方法>

        % make          ：コンパイル
        % make run      ：実行

        コンパイル後、以下の方法でも実行可能
        % dsedb
        > run main.elf

<コントローラの操作方法>

        ↑↓    :       赤いスポットライト光線方向操作(前後)
        ←→    :       赤いスポットライト光線方向操作(左右)
        L1L2    :       青と緑のスポットライト光線方向操作(上下)
        △×    :       赤いスポットライト光源操作(前後)
        □○    :       赤いスポットライト光源操作(左右)
        R1R2    :       赤いスポットライト光源操作(上下)
        SELECTボタン     :モデルの切替え（平面，凹凸面）

<備考>

    計算手法の概略

	スポット光を計算するには，光源座標と光線ベクトル(光の指向性)
	が必要です．この光線ベクトルと，光源からポリゴン頂点に引いた
	ベクトルとの内積値(cos(p))から，光線の指向性強度を算出します．
	具体的には，以下の関数により計算します．

	Vertex_point(VP) : ポリゴン頂点座標
	Vertex_color(VC) : ポリゴン頂点色(色計算前)
	Vertex_normal(VN): ポリゴン頂点法線ベクトル
	Light_point(LP)  : 光源座標
	Light_color(LC)  : 光源色
	Light_vector(LV) : 光線ベクトル
	Intensity(I)     : 光線の指向性(広がり具合)強度
	a, b, c          : 係数
	・               : 内積
	*                : 積

	Intensity(I) = (cos(p)^2 - a) * b ;
	     : cos(p) = (VP-LP)・LV / |VP-LP|  : |LV| = 1
	     ただし，a, b は (1 - a) * b = 1 を満たす定数

	この関数をグラフに描いてみると分かりますが，中央，つまり指向性
	の方向のみが高い値を示す関数となります．(a, b)の組はおおよそ 
	(0.8, 5) から (0.99, 100) の範囲で用いると良いでしょう．

	この関数を採用した最大の理由は，計算量の少なさにあります．
	cos(p)の二乗を用いているため，正規化のためにルートを取る必要が
	ありません．そのため，最適化したマイクロコード計算量は１頂点
	あたり 43命令となり，通常の並行光源マイクロコードの２倍強程度
	の時間で処理可能です．

	頂点色計算式
	  (RGB) = I * (VP-LP)/|VP-LP|・VN * c/|VP-LP| * LC * VC
	      = I * c/|VP-LP|^2 * ((VP-LP)・VN) * LC * VC

	I の中で 1/|VP-LP|^2 を用いていますから，最終的な計算式では
	1/|VP-LP|^2 の計算結果を２回，効果的に用いる事ができます．
	
	また，実際の計算過程では，正規化などの処理が必要になります
	のでご注意ください．


    注意事項

	1.通常オブジェクトはローカル座標系で定義されます．逆に点光源座標
	はたいていワールド座標で定義します．VU1に伝送されるデータは
	「オブジェクト->ローカル座標」ですから，ワールド座標にある
	点光源との間でベクトルを取るわけにはいきません．

	これを回避する方法はいくつかあります．
	１つは，透視変換の過程でLocal->Screenの変換マトリクスを 
	Local->World,World->Screen の２段に分割し，途中でベクトルを
	とる方法です．ですがこの手法は，VU1マイクロコードに余計な
	計算処理を要しますのであまりお勧めしません．
	２つめは，点光源をあらかじめ World->Localに逆変換しておき，
	VU1にその点光源座標を伝える方法です．こちらはVU1への計算負荷
	を必要としません．本サンプルではこちらの手法を用いています．

	2.点光源による色計算は，各ポリゴン頂点単位でおこないます．
	スポットライトには指向性がありますから，光の範囲とその外側
	との間に明暗の境界が出現します．しかし，ポリゴン頂点間の色
	の線形補間(グーローシェーディング)では，これをきれいに表現
	しきれません．	特にポリゴンが荒くなってくると，その傾向が
	顕著に現れるようになります．
	したがって，スポットライト計算で一定のクオリティを保つには，
	ポリゴン解像度への気くばりが必要になります．
