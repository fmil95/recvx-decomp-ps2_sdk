[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library  Release 2.0
                  Copyright (C) 1999 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

シザリングサンプル(CORE&VU0版)

<サンプルの解説>

        CORE&VU0マクロモードを用いて，ポリゴンをクリップ境界で切断し，
        境界をはみ出さない新たなポリゴンを生成して表示するサンプルです．
        サンプルは Triangleと Triangle stripの両方に対応しています．
        画面上の黄色の線がクリッピング領域を表し，コントーローラー
        で操作可能です．通常この領域は(x, y)=(±2048)の枠に設定し，
        ポリゴンがGSのクリッピング領域をはみ出ないよう制御します．
        また，Zバッファが有効な範囲(z方向near面,far面)も定義されて
        いるはずですから，これもはみ出さないよう切断します．
        手前の面で切られたオブジェクトは，ちょうど断面図が見える
        格好となります．

        一般的にシザリングは，視点に近付いたポリゴンが不自然に欠けて
        表示されないようにするために使用されます．

        (例) 地面，道路，壁


<ファイル>

        main.c          :メインプログラム
        main.h          :メインプログラムのプロトタイプ宣言
        defines.h       :各種 .c ファイルで用いるプロトタイプ宣言
        cube.s          :オブジェクトデータ(立方体)
        torus1.s        :オブジェクトデータ(ドーナツ)
        tex128.dsm      :テクスチャデータ
        remake.c        :クリップ面で切断したポリゴンを自動生成
                         するための関数群

<起動方法>

        % make          ：コンパイル
        % make run      ：実行

        コンパイル後、以下の方法でも実行可能
        % dsedb
        > run main.elf

<コントローラの操作方法>

        ↑↓    :       x軸回転(視点)
        ←→    :       y軸回転(視点)
        L1L2    :       z軸移動(視点，前後)
        △×    :       クリッピング領域変更(y方向)
        □○    :       クリッピング領域変更(x方向)
        R1R2    :       クリッピング領域変更(xy方向)
        selectボタン     :モデルの切り替え（立方体，トーラス）
        startボタン      :シザリングポリゴンの表示の切り替え
                          (TriangleFan or LineStrip)

<備考>

    注意事項


        1.ビューボリュームにおけるnearZ,farZの境界面と，Zbuffer値との
        対応付けの際に注意しなければならない点があります．
        nearZ,farZ面の演算は通常浮動小数点演算で行われます．しかし
	Zbuffer値は整数で表現されるため，FTOI等の命令によりこれを整数化
	することになります．通常では，整数化した時に期待するZ値が得られ
        るよう，ぎりぎりの値で対応づけが行われます．
        (例えば24bit Zbufferの場合，浮動小数演算でnearZ面(例Z=1.0)上の
        点が16777215.0になるよう設定(16777215.0->FTOI->0xffffff)．)
        しかし32bitの浮動小数表現では仮数部は23bitであり，信頼できる
        有効桁数はせいぜい6〜7桁程度となります．そのため，計算誤差
        により 1.0->16777215.0 の演算結果が16777215.0を大きく上回る
        可能性が十分にあります．この時Zbuffer値は破綻し，ゼロとなって
        しまいます．
        これを確実に回避するためには，Zbuffer幅を少々犠牲にしてnearZ面
        の対応値を16777000.0にするなどの処置が必要です．
        本サンプルのように，特にnearZ面にクリティカルなプログラムでは，
        このZbufferにおけるZ値の計算精度の問題に憂慮すべきでしょう．

        2.断面を計算するとき，切断面とポリゴンの各辺との交点を求める
        必要があります．その際，頂点情報(vertex,normal,color,textureUV)
        などを補間する必要があるわけですが，normalの補間については注意
        が必要です．
        ポリゴンをグーローシェーディングで表示している場合，ポリゴンの
	辺上の点の色は，端点である「頂点の色の線形補間」によって求めら
	れます．したがって，安易にnormalの線形補間をおこないlighting色
        を計算すると結果が異なってしまいます．
        これを回避するためには，頂点のlighting色計算後，GSに渡すcolorを
        線形補間する必要があります．つまり，補間が必要な要素は(vertex,
        GScolor, textureUV)ということになります．


    手法の概略

        切断されてできるポリゴンは，凸多角形であるという仮定の下で
        TriangleFanによって新たなポリゴンを生成・描画します．
        
        三角ポリゴンは３つの辺をもっています．これがある面によって
        切断されると，２つの辺が交点を持ち，この２つの交点をつないで
        新しい多角形を作ることができます．これはTriangleFanで表示
        可能な多角形です．次にこの多角形を，また新たな面によって
        切断します．するとこれも２つの交点を持ち，これをつないで
        同様に新たな多角形が作れます．
        このように，再帰的に切断処理をおこなっていけば，最終的に
        必要な領域内(断面群内)に収まるポリゴンを生成できること
        になります．

        本サンプルでは６枚のクリップ面(+x,-x, +y,-y, +z,-z)
        それぞれについて切断処理を行い，最終的なシザリングポリゴンを
        生成しています．

        (参考) Computer Graphics --princeples and practice--
                            SECOND EDITION
                 authors:  James Foley, Andries van Dam,
                         Steven Feiner, John Hughes
                 publisher: ADDISON-WESLEY PUBLISHING COMPANEY 
             
                 Section 3.14 Clipping Polygons(pp124-127)


    処理の概略は、以下の通りです。

        ===== main.c =====
        main():

        1. ダブルバッファの設定、テクスチャのロード,padオープン
        2. パッドからの情報を読み取る
        3. オブジェクトデータからGS転送用パケット作成(withクリッピング)
        4. クリッピングされたポリゴンをシザリング処理
        5. シザリングポリゴンのパケットを作成しGSに転送
        6. クリッピングされたオブジェクトデータのパケットをGSに転送
        7. 2.に戻る


    関数の説明  

        InitNodeArraySet():
        TriangleFan用に用意した頂点配列を管理する構造体NodeArraySet型
        を初期化するための関数．
        
        InitScissorPlane();
        クリップ面の情報を保持する構造体ScissorPlaneArray型を初期化する．

        ResetNodeArraySet();
        再帰的なシザリング処理で使用した，頂点配列構造体を初期化する関数

        FlipNodeArray();
        TriangleFan用の頂点配列をダブルバッファ処理により効果的に
        使用するための，フリップをおこなう関数

        PushTriangleNodeArray();
        シザリング処理に渡す三角ポリゴンの情報を登録し，保持する関数
        
        ClipCheck();
        シザリングで断面を見付ける際，TriangleFanを形成する接続頂点
        間でクリッピングをチェックし，切断面をまたいでいるかどうかを
        確認する関数．

        InterpNode();
        断面を判定した後，面と点の接続線の間に交点を求め，新しい
        接続頂点を生成する関数

        ScissorTriangle();
        三角ポリゴンにシザリング処理を施す関数

        DrawScissorPolygon();
        シザリングしたポリゴン(TriangleFan)を透視変換し，GS転送用の
        パケットを作成＆転送する関数．

        MakePacket();
        通常のオブジェクトデータをクリップ処理付きで透視変換し，
        GS転送用のパケットを作成する．
        クリッピングされた三角ポリゴンはシザリング処理に渡される．


