[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library  Release 2.0
　　　　　　　　　Copyright (C) 1999 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

回転軸内挿によるキーフレームマトリクスアニメーションのサンプル

<サンプルの解説>
	このプログラムは、回転軸内挿という方法で、関節のマトリクスによ
	るキーフレームアニメーションを行なうサンプルです。

	回転軸内挿とは、マトリクスを内挿する方法の一つです。
	 * きれいな回転で内挿できるのでキーフレーム数を減らしやすい
	 * 保持すべきパラメータデータ量が比較的少ない
	 * パラメータと実際の物理量との関係がわかりやすく、扱いやすい
	という利点があります。

<ファイル>
	mkdata/
		このディレクトリでは、元のマトリクスのキーフレーム列か
		ら回転軸内挿用のパラメータを計算します。

	runtime/
		mkdata/ で作成したパラメータを使って、実際のキーフレー
		ムマトリクスアニメーションを行ないます。

<起動方法>
	各ディレクトリ内のドキュメントを参照してください

<コントローラの操作方法>
	各ディレクトリ内のドキュメントを参照してください

<備考>

【回転軸内挿とは】
	複数のマトリクスを、マトリクスの回転を使って内挿する方法です。
	二つのマトリクス間の内挿方法を説明します。

	なお、平行移動分については、別途単純線形内挿を行なうとし、
	ここでは回転部分についてのみ説明します。

	あるコマでの関節マトリクス MA と n コマ後の関節マトリクス MB 
	を内挿するとします。
	このとき、「MB は MA を回転させたもの」であると考えます。
	この回転の軸をα、回転角度を θ とすると、内挿後のマトリクスは

		0コマ目: MA
		1コマ目: MA を回転軸αについて θ/n 回転させたもの
		2コマ目: MA を回転軸αについて 2*(θ/n) 回転させたもの
		3コマ目: MA を回転軸αについて 3*(θ/n) 回転させたもの
		  :         :
		kコマ目: MA を回転軸αについて k*(θ/n) 回転させたもの
		  :         :
		nコマ目: MB (MA を回転軸αについて n*(θ/n) 回転させたもの)	
	となります。
	
【保持すべきデータについて】
	ランタイムに必要なデータは
		回転軸α: (ax,ay,az) の3パラメータベクトル
			回転軸の方向を定めるものなので、整数で12bit
			ずつもあれば十分です
		回転角(θ/n): データにもよりますが、一般的には float 
			データ
		内挿コマ数 n: 最長内挿コマ数に応じた整数
		平行移動量 (T/n) : (tx,ty,tz) の3パラメータベクトル
			　一般的には float データ

	となります。
	データにもよりますが、一般的な場合で計算すると、一つのキーフレー
	ムにつき回転角(θ/n)と平行移動量(T/n)で 64bit, 回転軸αと内挿
	コマ数nで64bit程度、合計128bit あれば十分となります。

【そのほかの応用】
	回転軸内挿を利用すると、単なるキーフレームアニメーションではな
	く、「回転軸の向きを状況に応じて変更する」「回転軸同士を内挿し
	て、複数のアニメーションからその中間を通るアニメーションを生成
	する」などの応用が可能です。


【回転軸内挿の計算方法】
	1. 回転軸αと回転角θの求め方	
		MB=MR MA とすると、MR の固有ベクトルが回転軸αとなります。
		MR は MR= MB MAt として簡単に求まります。
		固有ベクトルの求め方については、mkdata/matrix.c 内の
		関数 EigenVector()、もしくは市販の行列数値演算関連書籍
		を参考にしてください。

	2. 回転軸αについてθ/n回転させるマトリクスを求める方法
		α=(x,y,z), s=sin(θ/n), c=cos(θ/n) とすると
		回転軸α周りに角度rの回転をさせるマトリクス Mr の回転部分は

		{[ (1-c) x^2 + c,   (1-c) x y + z s, (1-c) x z - y s ],
		 [ (1-c) x y - z s, (1-c) y^2 + c,   (1-c) y z + x s ],
		 [ (1-c) x z + y s, (1-c) y z - x s, (1-c) z^2 + c ]}

		として計算できます。
		runtime/axis.c 内の関数 a2m() も参考にしてください。
