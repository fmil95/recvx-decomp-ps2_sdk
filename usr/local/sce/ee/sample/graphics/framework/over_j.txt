[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library  Release 2.0
                  Copyright (C) 2000 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved
                                                               Aug. 2000 

graphics framework

# 概要

	graphics framework は、グラフィックス環境構築のためのフレームワークです。
	現実的なモデリングやシーン構成において、"PlayStation 2"のアーキテクチャ
	に沿った効率的な処理と開発効率のよさを共に満たす枠組みを提供し、ゲーム
	プログラム制作の出発点として、独自アーキテクチャ開発のためのサンプル
	プログラムとして、またモデルデータを簡単に表示するビューワとして
	利用できることを目標として制作したものです。

	graphics framework の制作方針と特長を簡単にまとめると以下のように
	なります。
	 - 高い描画パフォーマンス
	 - オーサリングツール出力データからのパスを確保
	 - データとプログラム双方において可読性と再利用性を確保

	これらを実現するために、以下のような実装を行っています。
	 - 現実的な描画処理を意識しつつ、抽象度の高い柔軟なモデルデータ
	   フォーマットを規定する。また、オーサリングツールの出力データから
	   中間ファイルフォーマット eS 経由でデータ変換するツールを用意する
	 - モデルデータ・テクスチャデータを管理するマネージャを用意する
	 - VU1 処理の高速性を損なわずにマイクロプログラムの再利用効率を高める
	   ために、VU1 の使用方法（VU-Mem のメモリフォーマット）を規定する
	 - VU1 での計算処理とGSへの転送という一連のデータフローを制御する、
	   DMA&VIF コマンドマネージャを用意する

# 構成要素

	graphics frameworkの構成要素として、具体的には以下のものが提供されます。

	- ドキュメント
	- サンプルプログラム
	- サンプルVU1マイクロプログラム
	- サンプルデータ

# ワークフロー

	以下に推奨するワークフローを記します。
	"" はファイルを示しています。

	  3Dツール -> "HMD" -> hmd2es -> "eS(eSTD)" -> es2raw -> ".s" -> framework

	HMDエクスポータに関しては各社のドキュメントを参照してください。
	eS およびコンバータに関しては eSパッケージのドキュメントを参照してください。

# データ構造

	framework が標準名前空間 eSTD の中で対応している構造体を以下に記します。

	Shape
		形状情報と外観情報を含む構造体

	Geometry
		幾何学形状の構造体

	Material
		マテリアル情報の構造体

	Texture
		テクスチャ情報の構造体

	Share
		共有形状の構造体

	Hierarchy
		階層構造の構造体

	Animation
		キーフレームアニメーションの構造体

	注意
	es2raw は内部で Material 単位に Geometry をソートしています。
	これは実機上でのテクスチャ転送を軽減するためです。
	テクスチャ転送を頻繁に行うと描画パフォーマンスは極端に低下します。
	これはVU1を一時停止させる必要があり、計算効率が下がるからです。
	これを避けるために Material > Geometry の関係になっています。
	eSTD では Material < Geometry の関係になっています。
	よって eSTD と es2raw での Shape 内部構造には違いがあります。


	データフォーマットの詳細に関しては、
	eS パッケージ内の doc/es2raw_j.txtを参照してください。

# 処理フロー
	
	graphics framework における処理の全体像を示します。

	初期化
	データフローリストの作成　　　　　	［データフローマネージャ］
	データフローリストへの登録　　　　　　　［データフローマネージャ］
	　↓
	（毎フレーム）
	コントローラ入力の処理　　　　　　　　　　　［CPU］
	カメラなどのマトリクス計算　　　　　　　　　［VU0+CPU］
	　↓
	（毎フレーム、モデルごと）
	アニメーション計算　　　　　　　　　　　　　［VU0+CPU］
	階層座標のマトリクス計算　　　　　　　　　　［VU0+CPU］
	共有ポリゴンの頂点計算　　　　　　　　　　　［VU0+CPU］
	　↓
	（毎フレーム）
	データフローリストをDMACに渡す
	　↓
	（毎フレーム）
	VU1へのマイクロプログラム転送 　　　　　　　［DMAC］
	VUMEM1へGF-VU1フォーマットデータ転送　　　　［DMAC/PATH2］
		（マテリアルごと）
		GSへのテクスチャ転送　　　　　　　　［DMAC］
		(a) VUMEM1へのポリゴンデータ転送　　［DMAC］
		(b) ポリゴンデータの演算　　　　　　［VU1］
		(c) GSへのポリゴン描画　　　　　　　［PATH1］


# データマネージャ

	データの多くはそのままDMACへ渡されて転送・描画されるだけですが、
	ランタイムにプログラム中で設定や参照が必要になるデータの
	処理を容易にするため、標準的なデータ形式を規定しています。
	これらは転送データとして極力そのまま使用できる形式になっています。
	以下に一覧を示します。

	MICRO_FRAME

	この構造体はシーンごとのデータを保持します。
	含まれるデータを以下に示します。
	- GF-VU1標準フォーマット内の「MICRO_FRAME対応パラメータ群」
	 （転送にそのまま使用できる形で保持）
	- VU1マイクロプログラムの転送に使用するデータ
	- DMA&VIFコマンドマネージャが転送パケット生成時に使用するデータ
	- MICRO_FRAMEの管理番号など、シーン単位でプログラマが使用するデータ

	SHAPE_FRAME

	この構造体は形状に関するデータを保持します。
	それぞれのShapeに対してひとつずつインスタンスを用意し、当該Shapeの描画に
	必要なデータをセットして、DMA&VIFコマンドマネージャに登録するとその
	Shapeが描画されます。
	含まれるデータを以下に示します。
	- GF-VU1標準フォーマット内の「SHAPE_FRAME対応パラメータ群」
	 （転送にそのまま使用できる形で保持）
	- DMA&VIFコマンドマネージャが転送パケット生成時に使用するデータ
	- Shapeの管理番号など、Shape単位でプログラマが使用するデータ

	TEXTURE_FRAME

	この構造体はテクスチャに関するデータを保持します。
	テクスチャデータの転送を総括する構造体です。
	含まれるデータを以下に示します。
	- GIFtagやGSレジスタ設定など、テクスチャ（テクセルおよびCLUT）の
	  Host-Local転送に使用するデータ（転送にそのまま使用できる形で保持）
	- そのテクスチャを使った描画に必要なデータ
	 （Tex01レジスタの設定。転送にそのまま使用できる形で保持）
	- 常駐・非常駐テクスチャフラグ
	  常駐テクスチャ: 初回のみテクスチャ転送、GSローカルメモリを常に占有
	  非常駐テクスチャ: 毎回テクスチャ転送、GSローカルメモリを一時的に占有
	- そのほかテクスチャ単位のデータ
	- そのほかプログラマが使用するデータ
	- 1描画あたりの総Host-Local転送サイズ（パフォーマンスチェック用）

	HIERARCHY_FRAME

	この構造体は階層構造に関するデータを保持します。
	含まれるデータを以下に示します。
	- 階層構造の数
	- 座標変換の情報
	- 形状情報
	- 共有情報
	- 生成マトリクス

# データフローマネージメント

	VU1-GSのレンダリングエンジンにダブルバッファリング制御でデータを流すために、
	強力で高速なデータフロー管理機構が必要です。
	graphics frameworkではDMA&VIFコマンド群を統合し、メインメモリ/VU1メモリ/GSローカルメモリ
	を包括してグラフィックデータのデータフローを管理できるしくみを用意しています。

# データフロー管理の概略

	graphics frameworkのデータフロー管理は、概略次のようなデータ構造に基づいています
	（実際のモデルデータ表現においてはさらにいくつか雑多な処理が必要になります）。

      オーダーテーブル(MainMem)
      +---------+----------+
      |   NOP   |  DMAcall |--->モデルデータフローリスト
      |   NOP   |  DMAcall |--->モデルデータフローリスト
      |   NOP   |  DMAcall |->+
      |    .    |     .    |  |
      |         |  DMAend  |  |                           テクスチャ(MainMem)
      +--------------------+  |                              +------------+
     128       64          0  |                           +--|texture_head|
                              |                           |  +------------+
                              |                           |  |texture_data|
                              | モデルデータフローリスト  |  |            |
                              | (MainMem)                 |  +------------+
     +---------+              +--------------------+      |
     |         |<-------------|VIFdirect|  DMAref  |<-----+    rawデータ
     |GSreg&mem|    +---------|VIFunpack|  DMAref  |<------+   (MainMem)
     |         |    | +-------|VIFunpack|  DMAref  |<----+ | +------------+
     +---------+    | | +-----|VIFunpack|  DMAref  |<--+ | +-|   vertex   |
                    | | |     |    .    |     .    |   | |   +------------+
        +--------+  VIF1      |    .    |     .    |   | +---|   normal   |
        |        |<-+ | |     |         |  DMAret  |   |     +------------+
        |        |    | |     +--------------------+   +-----|     ST     |
        | VUmem1 |<---+ |    128        64         0         +------------+
        |        |      |                                    |    color   |
        |        |<-----+                                    +------------+
        +--------+

	図の中央部に示してあるVIFコマンドとDMAタグの列（モデルデータフローリスト）は、
	個々のオブジェクトごとにメインメモリからVU1-GSまでのデータフローを管理する
	中枢部となります。
	メインメモリ上のテクスチャデータ・ポリゴンデータを指し示すDMArefと、
	それぞれの転送先を指し示すVIFコマンドとをセットにしたデータ構造です。

	図の左上部に示したDMAcallの列（オーダーテーブル）は、このようなモデルデータ
	フローリストを複数管理しています。
	各オブジェクトはここに登録された順序で描画されますので、登録順序を変更する
	ことによってオブジェクト間ソート描画を容易に行なえることになります。

# データフローリストのランタイム生成

	モデルデータフローリストおよびオーダーテーブルは、あらかじめオーサリング段階で
	モデルデータとともに用意しておくことも可能です。
	しかし、graphics frameworkではこの処理を関数化し、モデルデータ読み込み後の
	初期化処理として呼び出すことにより、データフローリストをランタイムに生成する
	方針を採っています。
	これはデータの独立性を高めるためであり、オープンソース戦略と合わせて、
	ユーザ独自のカスタマイズを容易にするためです。
	ユーザはモデルデータの特性に合わせて独自の描画データフローを構築することができます。


# GF-VU1標準メモリフォーマット

	graphics frameworkではVUMem1のメモリフォーマット、つまりVU1で処理するデータの形式を
	標準化しています。
	データ形式を標準化することにより、データとVU1マイクロプログラムとの独立性が大幅に向上し、
	ともに再利用性が高まって開発効率の向上につながります。
	同時に、VU1マイクロプログラムの入れ替えが容易になることで、個々のマイクロプログラムを
	用途に特化したシンプルな設計にまとめることができます。
	これはプログラムの可読性に直結し、開発効率の向上に加えて、十分な最適化を施すことができる
	ようになって処理速度の向上にも効果があります。
	一方、標準形式から離れるデータに対してはCPU+VU0での前処理が必要になるというデメリットが
	ありますが、このことも結局レンダリングエンジンであるVU1-GSとジオメトリエンジンである
	CPU+VU0という役割分担を明確にし、ゲーム処理全体の見通しがよくなって開発効率の向上に
	つながります。

# GF-VU1標準メモリフォーマットの詳細

	GF-VU1標準メモリフォーマットの概略を次に示します。アドレスはqword単位です。

	アドレス
	     0 +----------------------------+
	       |SHAPE_FRAME対応パラメータ群 |SHAPE_FRAME構造体から転送される
	    16 |----------------------------|
	       |MICRO_FRAME対応パラメータ群 |MICRO_FRAME構造体から転送される
	    68 |----------------------------|
	       |          work area         |VU1マイクロプログラムで生成する
	   100 |----------------------------|
	       |          free area         |
	   120 |----------------------------|
	       |ダブルバッファ0             |
	       |          GIFtag等          |モデルデータから生成して転送される
	       |         頂点データ         |モデルデータから転送される
	       |        XGKICK Buffer       |VU1マイクロプログラムによる計算結果
	       |----------------------------|
	       |ダブルバッファ1             |
	       |          GIFtag等          |モデルデータから生成して転送される
	       |         頂点データ         |モデルデータから転送される
	       |        XGKICK Buffer       |VU1マイクロプログラムによる計算結果
	       |----------------------------|
	       |          user area         |
	  1024 +----------------------------+

	以下、各部の詳細を示します。

	 - SHAPE_FRAME対応パラメータ群
	SHAPE_FRAME構造体から転送される、Shapeごとのパラメータです。
	
	    0  +------------------------+
	       |local_world             | local_world マトリクス
	    4  |----------------------- |
	       |light_rotation          | light_rotation マトリクス
	    8  |----------------------- |   (local_worldからscale,transを除いたもの)
	       |gif&prim                | GIFtag や prim 情報を格納
	    12 |----------------------- |
	       |calc_data(free use)     | 計算係数
	    16 |----------------------- |

	 - MICRO_FRAME対応パラメータ群
	MICRO_FRAME構造体から転送される、シーンごとのパラメータです。

	    16 |----------------------- |
	       |world_screen            | world_screenマトリクス
	    20 |----------------------- |
	       |world_clip              | world_clipマトリクス
	    24 |----------------------- |
	       |clip_screen             | clip_screenマトリクス
	    28 |----------------------- |
	       |micro_init(free use)    | 計算係数
	    32 |----------------------- |
	       |light_color0            | light_color0 マトリクス
	       |light_vect0             | light_vector0 マトリクス
	       |light_point0            | light_point0 マトリクス
	    44 |----------------------- |
	       |light_color1            | light_color1 マトリクス
	       |light_vect1             | light_vector1 マトリクス
	       |light_point1            | light_point1 マトリクス
	    56 |----------------------- |
	       |light_color2            | light_color2 マトリクス
	       |light_vect2             | light_vect2 マトリクス
	       |light_point2            | light_point2 マトリクス
	    68 |----------------------- |

	 - ワークエリア
	VU1マイクロプログラムで計算して求めるパラメータです。

	    68 |----------------------- |
	       |local_screen            | local_screen マトリクス
	    72 |----------------------- |
	       |local_clip              | local_clip マトリクス
	    76 |----------------------- |
	       |local_lightvect0        | local_lightvect0マトリクス
	       |local_lightpoint0       | local_lightpoint0マトリクス
	    84 |----------------------- |
	       |local_lightvect1        | local_lightvect1
	       |local_lightpoint1       | local_lightpoint1
	    92 |----------------------- |
	       |local_lightvect2        | local_lightvect2
	       |local_lightpoint2       | local_lightpoint2
	    100|----------------------- |

	 - ダブルバッファ
	メインメモリから頂点データを受け入れ、VU1での計算結果を格納してGSへ送り出すバッファ領域です。
	さらに詳細は後述します。

	    120|----------------------- |
	       |  giftag&etc0(4qword)   | GIFtagその他の情報(計4qword)
	       |   ---------------      |
	       | Vu1_calc_data_buffer0  | 頂点データ
	       |   ---------------      |
	       |    XGKICK_buffer0      | XGKICKでGSへ転送する計算結果データ
	       |                        |
	       |----------------------- |<-- 120 + (1024-120- user area)/2
	       |  giftag&etc1(4qword)   | GIFtagその他の情報(計4qword)
	       |    ---------------     |
	       | Vu1_calc_data_buffer1  | 頂点データ
	       |    ---------------     |
	       |    XGKICK_buffer1      | XGKICKでGSへ転送する計算結果データ
	       |                        |
	   user|----------------------- |


	 - ユーザーエリア
	VU1マイクロプログラムが自由に使用できるユーザーエリアです。大きさも自由に設定できます。
	サイズはプログラム内でモデルデータフローリスト作成時に設定します。

	   user+------------------------+
	       |        user area	|
	       |                        |
	   1024+------------------------+

# ダブルバッファ内の頂点データフォーマット

	ダブルバッファ内のデータフォーマット詳細は次のとおりです。

	     |-------------------|  buffer0_start
	     |giftag&etc0(4qword)|    モデルデータに応じて生成されたGIFtagその他
	     | ----------------- |
	     |   vertex          |    モデルデータから転送された頂点データ
	     |   normal          |    各頂点ごとにvertex,normal,st,color
	     |   st              |    を並べたインターリーブ構成
	     |   color           |
	     |  ---------------  |
	     |         :         |
	     |         :         |
	     |-------------------| XGKICK addr
	     |   giftag          |    上記GIFtagのコピー
	     | ----------------- |
	     |    STQ            |    マイクロプログラムで計算された
	     |    rgba           |    GSプリミティブデータ
	     |    xyzf2          |
	     | ----------------- |
	     |         :         |
	     |         :         |
	     |-------------------| buffer0_end (buffer1_start)

	さらに各頂点ごとに特殊な情報を盛り込みたい場合は、
	vertexのwフィールド、normalのwフィールド、stのz,wフィールド等を使うことができます。
	たとえばTriangle Stripの切れ目では2頂点分のXYZF3が必要になりますが、
	この情報をwフィールドに埋め込むということも考えられます。


# 今後の展望

	graphics frameworkには、今後順次、機能の追加・修正を加えていく予定です。
	近い将来に予定している追加機能は以下のとおりです。

	  - GSローカルメモリマネージャ
	  - カメラと光源の管理
	  - 光源の多様化（点光源など）
	  - Triangle Stripへの対応


