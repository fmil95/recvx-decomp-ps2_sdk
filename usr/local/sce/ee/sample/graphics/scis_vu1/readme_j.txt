[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library  Release 2.0
                  Copyright (C) 1999 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

シザリングサンプル(VU1版 2nd version)

<サンプルの解説>

        VU1を用いてポリゴンをクリップ境界で切断し，境界をはみ出さ
        ない新たなポリゴンを生成して表示するサンプルです．
        サンプルは Triangleと Triangle stripの両方に対応しています．
        画面上の黄色の線がクリッピング領域を表し，コントーローラー
        で操作可能です．通常この領域は(x, y)=(±2048)の枠に設定し，
        ポリゴンがGSのクリッピング領域をはみ出ないよう制御します．
        また，Zバッファが有効な範囲(z方向near面,far面)も定義されて
        いるはずですから，これもはみ出さないよう切断します．
        手前の面で切られたオブジェクトは，ちょうど断面図が見える
        格好となります．
        一般的にシザリングは，視点に近付いたポリゴンが不自然に欠けて
        表示されないようにするために使用されます．
        (例) 地面，道路，壁

        VU1版は，CORE&VU0版に比べパフォーマンスは大きく向上しています．
        また，VU1codeサイズ的にも非常に大きなものになっています．
        レジスタ値のスタック退避による関数分岐の処理までしていますので，
        大規模なVU1プログラムの一つの手本になるかもしれません．


<ファイル>

        main.c          :メインプログラム
        main.h          :メインプログラムのプロトタイプ宣言
        defines.h       :各種 .c ファイルで用いるプロトタイプ宣言
        cube.dsm        :オブジェクトデータ(立方体)
        torus51.dsm     :オブジェクトデータ(ドーナツ)
	grid1800.dsm    :オブジェクトデータ(凹凸平面)
        tex128.dsm      :テクスチャデータ
	scissor.dsm     :VU1マイクロコード転送用パケット
	scissor.vsm     :VU1マイクロコード
	sci_opt.vsm     :VU1マイクロコード(最適化版)
	sci_tri.vsm     :VU1マイクロコード(最適化版Triangleモデル専用)
	sci_str.vsm	:VU1マイクロコード(最適化版Stripモデル専用)
	vu1pack.c	:VU1転送用パケット作成関数

<起動方法>

        % make          ：コンパイル
        % make run      ：実行

        コンパイル後、以下の方法でも実行可能
        % dsedb
        > run main.elf

<コントローラの操作方法>

        ↑↓    :       x軸回転(視点)
        ←→    :       y軸回転(視点)
        L1L2    :       z軸移動(視点，前後)
        △×    :       クリッピング領域変更(y方向)
        □○    :       クリッピング領域変更(x方向)
        R1R2    :       クリッピング領域変更(xy方向)
        SELECTボタン     :モデルの切り替え（立方体，トーラス）
        STARTボタン      :シザリングポリゴンの表示の切り替え
                          (TriangleFan or LineStrip)

<備考>

    2nd version の改良点

	以前のバージョンでは計算誤差のため，シザリングしたポリゴン同士の
	間に微妙な隙ができる問題がありました．
	このバージョンでは，これを回避する手法を導入しています．
	ソース scissor.vsm 内のラベル PUSHTRIANGLE: の直後に，シザリング
	ポリゴンを微妙に拡大するコードを挿入しました．拡大率1.01について
	は用途によって調整が必要かもしれません．ご注意ください．


    注意事項

        1.ビューボリュームにおけるnearZ,farZの境界面と，Zbuffer値との
        対応付けの際に注意しなければならない点があります．
        nearZ,farZ面の演算は通常浮動小数点演算で行われます．しかし
	Zbuffer値は整数で表現されるため，FTOI等の命令によりこれを整数化
	することになります．通常では，整数化した時に期待するZ値が得られ
        るよう，ぎりぎりの値で対応づけが行われます．
        (例えば24bit Zbufferの場合，浮動小数演算でnearZ面(例Z=1.0)上の
        点が16777215.0になるよう設定(16777215.0->FTOI->0xffffff)．)
        しかし32bitの浮動小数表現では仮数部は23bitであり，信頼できる
        有効桁数はせいぜい6〜7桁程度となります．そのため，計算誤差
        により 1.0->16777215.0 の演算結果が16777215.0を大きく上回る
        可能性が十分にあります．この時Zbuffer値は破綻し，ゼロとなって
        しまいます．
        これを確実に回避するためには，Zbuffer幅を少々犠牲にしてnearZ面
        の対応値を16777000.0にするなどの処置が必要です．
        本サンプルのように，特にnearZ面にクリティカルなプログラムでは，
        このZbufferにおけるZ値の計算精度の問題に憂慮すべきでしょう．

        2.断面を計算するとき，切断面とポリゴンの各辺との交点を求める
        必要があります．その際，頂点情報(vertex,normal,color,textureUV)
        などを補間する必要があるわけですが，normalの補間については注意
        が必要です．
        ポリゴンをグーローシェーディングで表示している場合，ポリゴンの
	辺上の点の色は，端点である「頂点の色の線形補間」によって求めら
	れます．したがって，安易にnormalの線形補間をおこないlighting色
        を計算すると結果が異なってしまいます．
        これを回避するためには，頂点のlighting色計算後，GSに渡すcolorを
        線形補間する必要があります．つまり，補間が必要な要素は(vertex,
        GScolor, textureUV)ということになります．


    手法の概略

        切断されてできるポリゴンは凸多角形である，という仮定の下で
        TriangleFanによって新たなポリゴンを生成・描画します．
        
        三角ポリゴンは３つの辺をもっています．これがある面によって
        切断されると，２つの辺が交点を持ち，この２つの交点をつないで
        新しい多角形を作ることができます．これはTriangleFanで表示
        可能な多角形です．次にこの多角形を，また新たな面によって
        切断します．するとこれも２つの交点を持ち，これをつないで
        同様に新たな多角形が作れます．
        このように，再帰的に切断処理をおこなっていけば，最終的に
        必要な領域内(断面群内)に収まるポリゴンを生成できること
        になります．

        本サンプルでは６枚のクリップ面(+x,-x, +y,-y, +z,-z)
        それぞれについて切断処理を行い，最終的なシザリングポリゴンを
        生成しています．

        (参考) Computer Graphics --princeples and practice--
                            SECOND EDITION
                 authors:  James Foley, Andries van Dam,
                         Steven Feiner, John Hughes
                 publisher: ADDISON-WESLEY PUBLISHING COMPANEY 
             
                 Section 3.14 Clipping Polygons(pp124-127)


    処理の概略は、以下の通りです。

        ===== main.c =====
       main():

        1. ダブルバッファの設定、テクスチャのロード
        2. padオープン、マイクロコードの転送
        3. パッドからの情報を読み取る
	4. VU1転送用パケット作成
        5. VU1にパケットを転送して描画
	6. 3.に戻る

	SetViewScreenClipMatrix():
	各頂点をクリップ座標系に射影するためのマトリクス(view_clip)
	を計算します．同時に透視変換用のマトリクス(view_screen)も
	求めています．また，クリップ座標からスクリーン座標に変換する
	マトリクスも計算します．

	SetGifClipLine():
	クリッピング領域の境界線を描画するためのGIFパケットを作成する関数．
	ここではVu0で直接透視変換し，その場でGIFのパケットデータを作成
	しています．
	
      ===== vu1packet.c =====
        VU1転送用のパケットを生成するための関数群

        Vu1DmaPacket構造体:
        VU1に転送するパケットを生成，管理する構造体．

        InitVu1DmaPacket():
        Vu1DmaPacket構造体の初期化関数．引数には２つの管理テーブル
        (パケット)へのポインタが渡されます．これはパケットのダブル
        バッファのためです．

        GetVu1ObjHead():
        現在有効なパケットの先頭アドレスを返します．

        AddVu1ObjPacket():
        .dsmファイルでコンパイルされ，メモリ上に存在するオブジェクト
        データ(既にVU1用パケット形式になっている)を追加登録します．

        CloseVu1ObjPacket():
        現在有効なパケットを終了させ，ダブルバッファのスイッチを
        行います．返り値に有効なパケットのアドレスを返すため，
        DMAKICKに使用できます．

	GetVu1EnvHead():
        VU1にマトリクスデータをプリセットするための構造体への
        ポインタを返します．

        CloseVu1EnvPacket():
        VU1で使用するマトリクスデータ(パケット)を閉じ，パケットへの
        ポインタを返します．


       ==== scissor.vsm(VU1 micro code) ====

        [scissor.vsm]

        1. 各種マトリクスをレジスタVF01 - VF16に設定 & pre-calculate
        2. 描画属性の判定(Triangle or TriangleStrip)フラグをセット
        3. 各種カウンタセット（ストリップ頂点数など）
        4. GIFタグのロード・ストア、RGBAQ, ST, XYZFのストア
           ポインタの設定
        5. 頂点を透視変換
        6. 法線ベクトルとライトベクトルの内積を計算
        7. 法線ベクトルとの内積から頂点の色を求める
	8. テクスチャ座標(S,T,Q)の計算
        9. 頂点をクリップ座標に射影しフラグを設定(VI01)
           (XYZとも絶対値|W|の範囲，CLIP命令により過去3点を判定)
	10. 当該ポリゴンが切断面をまたいでいたら，
            シザリングルーチン(S1)に分岐
        11. XYZ2,XYZ3いずれをキックするか決定．ストア．
        12. 頂点数だけループする(5.に戻る)
	13. XGKICK，GSrendering
        14. オブジェクトのブロック数だけループする．
            (4.に戻る．ダブルバッファスイッチ)
	
	S1. VFレジスタ，VIレジスタをスタックバッファに退避
	S2. 与えられたポリゴン(TriangleFanにみたてる)を，
            切断ルーチン(T1)に渡して分岐
        S3. 切断面６つ(+x,-x,+y,-y,+z,-z)の処理が終るまで繰り返す．
	S4. 最終的にできたTriangleFanを透視変換しXGKICK
	S5. メインルーチン11.に戻る

        T1. 各頂点をトレースし，その間に切断面との交点があるか判定
	T2. 辺の状態から，端点情報を次のTriangleFanリストに登録
            ・辺の端点A，Bとも外側なら登録しない．
            ・辺の端点A，Bとも内側ならAを登録．
            ・辺の端点Aが外，Bが内なら，交点を登録
            ・辺の端点Aが内，Bが外なら，Aと交点の２つを登録
        T3. 辺を一周するだけ繰り返し，新しいTriangleFanリストが
            作成されたところでS2に戻る．

