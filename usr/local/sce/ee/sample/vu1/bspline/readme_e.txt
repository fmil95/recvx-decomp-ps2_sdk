[SCEI CONFIDENTIAL DOCUMENT]
"PlayStation 2" Programmer Tool Runtime Library  Release 2.0
                  Copyright (C) 1999 by Sony Computer Entertainment Inc.
                                                     All Rights Reserved

The sample program for drawing B-Spline with VU1

<Description of the Sample>
  
	This is the sample program for drawing the B-Spline surface from 
	the control point given in VU1.

<File>
        main.c          : Main program
        bs.c            : Function for generating the packet
        noise.h         : Prototype declaration of the noise function
        noise.c         : Noise function
        b_data.dsm      : Packet (matrix, blending factor, packet etc.)
        b.vsm           : Micro code for drawing B-Spline
        grid.h          : Control point data of a grid
        torus.h         : Control point data of a torus
        flower.dsm      : Texture data
        b_opt.vsm       : Optimized version of b.vsm

<Activating the Program>
        % make          : Compiles the program.
        % make run      : Executes the program.
			
	After the compilation, the program is also executable with the 
	following.

        % dsedb
        > run main.elf

<Using the Controller>
        Directional key	: Translates the viewpoint.
        select button	: Switches the model. (grid, torus)
        R1 button	: Switches the wire frame with texture.

<Note>
	
	See default.htm about the packet configuration and the micro code.

        The outline of the processing is as follows.

        ===== main.c =====
        main():

        1. Sets the double buffer and loads the texture.
        2. Opens the pad and transfers the micro code.
        3. Sets the blending coefficient and initializes the noise 
	   distribution for transformation.
        4. Reads the information from the pad and sets the drawing packet 
	   and various matrixes.
        5. Sets the coordinate of the control point to the packet.
        6. Transfers the packet to VU1 and draws.
        7. Sets the control point in the next frame.
        8. Returns 4..

        SetBlendingCoeff():

	1. Calculates the blending function and the derivative of the 
	   blending function in the value of t divided by 4.
	2. In the micro code, divides 36 triangles, generated by 4x4 
	   control point, by three triangle strips and displays. 
	   It stores the combination of the value corresponding to each 
	   vertex of this triangle strip calculated in 1. as the packet in
	   advance.          

        CreateViewingMatrix():
        1. Sets the matrix for the screen conversion.

        SetViewPosition():
        1. Sets the viewpoint.

        MoveLight():
        1. Sets the direction of light source.

        ===== bs.c =====
        CreateControlPointArea():

	1. Copies the packet template set in b_data.dsm appropriate number
	   of times on the scratch pad according to the number of the 
	   control point of U and V and the opening or closing of U and V 
	   in drawn data.
        
        SetControlPoint():
 
	1. Sets the coordinate of the control point actually drawn into 
	   the packet generated by CreateControlPointArea() on the scratch
	   pad.

        ==== noise.c ====
        1. Initialization of the noise distribution and interpolation 
	   function

        ==== b.vsm(VU1 micro code) ====

        [b.vsm]
	1. Sets the transparent transformation matrix in the register VF28
	   to VF31.
	2. Sets various counters (e.g. the number of strip vertex).
	3. Sets the 4x4 control pointer set that is supposed to be 
	   calculated from VF01 to VF16.
	4. Loads and stores the GIF tag and sets store pointers of RGBAQ,
	   ST and XYZF.
	5. Loads the blending coefficient that is supposed to be 
	   calculated.
	6. Calculates the tangent vector toward the calculated point and
	   the normal line vector by its outer product.
	7. Calculates the inner product between the normal line and 
	   parallel light source vector and executes illuminance 
	   calculation.
	8. Loads the blending coefficient and calculates the physical 
	   coordinate after splitting the triangle.
	9. Loads the ST value given in advance and calculates the actual
	   ST value by adding the offset.
	10. Executes FTOI etc. and stores RGBAQ, ST and XYZF in the 
	    position that the store pointer indicates in VUmem.
	11. Loops the number of times of vertexes. (Returns 5.)
	12. Loops the number of times of the packets. (Returns 2.)
 	13. Reverses the sign of Z in the packet broken to form the break
	    of the strip.
        14. XGKICKs toward GIF.

